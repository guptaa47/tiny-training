def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(32, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(32), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(32), float32], %v2_conv_1_weight: Tensor[(32, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(32), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(32), float32], %v2_conv_2_weight: Tensor[(16, 32, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(24, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(24), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(24), float32], %v5_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v5_conv_0_bias: Tensor[(120), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(120), float32], %v5_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(120), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(120), float32], %v5_conv_2_weight: Tensor[(24, 120, 1, 1), int8], %v5_conv_2_bias: Tensor[(24), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(24), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v6_conv_0_bias: Tensor[(120), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(120), float32], %v6_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(120), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(120), float32], %v6_conv_2_weight: Tensor[(40, 120, 1, 1), int8], %v6_conv_2_bias: Tensor[(40), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(40), float32], %v7_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v7_conv_0_bias: Tensor[(160), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(160), float32], %v7_conv_1_weight: Tensor[(160, 1, 7, 7), int8], %v7_conv_1_bias: Tensor[(160), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(160), float32], %v7_conv_2_weight: Tensor[(40, 160, 1, 1), int8], %v7_conv_2_bias: Tensor[(40), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(40), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v8_conv_0_bias: Tensor[(160), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(160), float32], %v8_conv_1_weight: Tensor[(160, 1, 5, 5), int8], %v8_conv_1_bias: Tensor[(160), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(160), float32], %v8_conv_2_weight: Tensor[(48, 160, 1, 1), int8], %v8_conv_2_bias: Tensor[(48), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(48), float32], %v9_conv_0_weight: Tensor[(144, 48, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(48, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(48), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(48), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(192, 48, 1, 1), int8], %v10_conv_0_bias: Tensor[(192), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(192), float32], %v10_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(192), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(192), float32], %v10_conv_2_weight: Tensor[(48, 192, 1, 1), int8], %v10_conv_2_bias: Tensor[(48), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(48), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(240, 48, 1, 1), int8], %v11_conv_0_bias: Tensor[(240), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(240), float32], %v11_conv_1_weight: Tensor[(240, 1, 7, 7), int8], %v11_conv_1_bias: Tensor[(240), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(240), float32], %v11_conv_2_weight: Tensor[(96, 240, 1, 1), int8], %v11_conv_2_bias: Tensor[(96), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(96), float32], %v12_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v12_conv_0_bias: Tensor[(384), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(384), float32], %v12_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(384), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(384), float32], %v12_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v12_conv_2_bias: Tensor[(96), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(96), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v13_conv_0_bias: Tensor[(384), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(384), float32], %v13_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(384), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(384), float32], %v13_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v13_conv_2_bias: Tensor[(96), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(96), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(576, 96, 1, 1), int8], %v14_conv_0_bias: Tensor[(576), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(576), float32], %v14_conv_1_weight: Tensor[(576, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(576), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(576), float32], %v14_conv_2_weight: Tensor[(160, 576, 1, 1), int8], %v14_conv_2_bias: Tensor[(160), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(160), float32], %v15_weight: Tensor[(10, 160, 1, 1), int8], %v15_bias: Tensor[(10), int32], %v15_zero_x: Tensor[(1), int8], %v15_zero_y: Tensor[(1), int8], %v15_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 160, 1, 1), int8], Tensor[(160), int32], Tensor[(160, 576, 1, 1), int8], Tensor[(576), int32], Tensor[(576, 1, 3, 3), int8], Tensor[(576), int32], Tensor[(576, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 384, 1, 1), int8], Tensor[(384), int32], Tensor[(384, 1, 5, 5), int8], Tensor[(384), int32], Tensor[(384, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 384, 1, 1), int8], Tensor[(384), int32], Tensor[(384, 1, 5, 5), int8], Tensor[(384), int32], Tensor[(384, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 240, 1, 1), int8], Tensor[(240), int32], Tensor[(240, 1, 7, 7), int8], Tensor[(240), int32], Tensor[(240, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 192, 1, 1), int8], Tensor[(192), int32], Tensor[(192, 1, 3, 3), int8], Tensor[(192), int32], Tensor[(192, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 144, 1, 1), int8], Tensor[(144), int32], Tensor[(144, 1, 3, 3), int8], Tensor[(144), int32], Tensor[(144, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 160, 1, 1), int8], Tensor[(160), int32], Tensor[(160, 1, 5, 5), int8], Tensor[(160), int32], Tensor[(160, 40, 1, 1), int8], Tensor[(40), int32], Tensor[(40, 160, 1, 1), int8], Tensor[(160), int32], Tensor[(160, 1, 7, 7), int8], Tensor[(160), int32], Tensor[(160, 40, 1, 1), int8], Tensor[(40), int32], Tensor[(40, 120, 1, 1), int8], Tensor[(120), int32], Tensor[(120, 1, 3, 3), int8], Tensor[(120), int32], Tensor[(120, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 120, 1, 1), int8], Tensor[(120), int32], Tensor[(120, 1, 3, 3), int8], Tensor[(120), int32], Tensor[(120, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 1, 7, 7), int8], Tensor[(48), int32], Tensor[(48, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 1, 3, 3), int8], Tensor[(48), int32], Tensor[(48, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(32, 1, 3, 3), int8], Tensor[(32), int32], Tensor[(32, 8, 1, 1), int8], Tensor[(8), int32], Tensor[(8, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 1, 3, 3), int8], Tensor[(16), int32], Tensor[(16, 3, 3, 3), int8]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=32) /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %40 = nn.mcuconv2d(%39, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[3, 3, 3, 3], groups=160) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %46 = nn.mcuadd(%39, %45, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[2, 2, 2, 2], groups=160) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %60 = nn.mcuadd(%53, %59, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %62 = nn.mcuconv2d(%61, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %68 = nn.mcuadd(%61, %67, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %70 = nn.mcuconv2d(%69, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=240) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %76 = nn.mcuconv2d(%75, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %82 = nn.mcuadd(%75, %81, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %84 = nn.mcuconv2d(%83, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %90 = nn.mcuadd(%83, %89, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %92 = nn.mcuconv2d(%91, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[1, 1, 1, 1], groups=576) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 160, 4, 4), int8] */;
  %98 = mcumean(%97, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %99 = nn.mcuconv2d(%98, %v15_weight, %v15_bias, %v15_zero_x, %v15_zero_y, %v15_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %100 = nn.mcutruncate(%99) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %101 = reshape(%100, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %103 = nn.log_softmax(%102) /* ty=Tensor[(1, 10), float32] */;
  %104 = greater_equal(%99, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %105 = less_equal(%99, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %106 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %107 = negative(%106) /* ty=float32 */;
  %108 = multiply(%107, %label) /* ty=Tensor[(1, 10), float32] */;
  %109 = sum(%108, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %110 = exp(%103) /* ty=Tensor[(1, 10), float32] */;
  %111 = multiply(%109, %110) /* ty=Tensor[(1, 10), float32] */;
  %112 = subtract(%108, %111) /* ty=Tensor[(1, 10), float32] */;
  %113 = multiply(%104, %105) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %114 = reshape(%112, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %115 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %116 = where(%113, %114, %115) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %117 = cast(%116, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %118 = reshape(%98, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %119 = tile(%116, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %120 = cast(%118, dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %121 = reshape(%119, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1600, 1, 1, 1), float32] */;
  %122 = nn.conv2d(%120, %121, padding=[0, 0, 0, 0], groups=160, out_dtype="float32") /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %123 = reshape(%122, newshape=[1, 160, 10, 1, 1]) /* ty=Tensor[(1, 160, 10, 1, 1), float32] */;
  %124 = sum(%123, axis=[0]) /* ty=Tensor[(160, 10, 1, 1), float32] */;
  %125 = transpose(%124, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %126 = abs(%125) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %127 = max(%126, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %128 = divide(%127, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %129 = divide(%125, %128) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %130 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %131 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %132 = cast(%v15_weight, dtype="float32") /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %133 = nn.conv2d_transpose(%116, %132, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %134 = abs(%133) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %135 = max(%134, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %136 = divide(%135, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %137 = divide(%133, %136) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %138 = cast(%137, dtype="int8") /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %140 = multiply(%139, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %141 = ones(shape=[1, 160, 4, 4], dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %142 = multiply(%130, %131) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %143 = multiply(%140, %141) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %144 = zeros(shape=[1, 160, 4, 4], dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %145 = where(%142, %143, %144) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %146 = cast(%145, dtype="int32") /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %147 = reshape(%95, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %148 = tile(%145, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 92160, 4, 4), float32] */;
  %149 = cast(%147, dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %150 = reshape(%148, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(92160, 1, 4, 4), float32] */;
  %151 = nn.conv2d(%149, %150, padding=[0, 0, 0, 0], groups=576, out_dtype="float32") /* ty=Tensor[(1, 92160, 1, 1), float32] */;
  %152 = reshape(%151, newshape=[1, 576, 160, 1, 1]) /* ty=Tensor[(1, 576, 160, 1, 1), float32] */;
  %153 = sum(%152, axis=[0]) /* ty=Tensor[(576, 160, 1, 1), float32] */;
  %154 = transpose(%153, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %155 = abs(%154) /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %156 = max(%155, axis=[1], keepdims=True) /* ty=Tensor[(160, 1, 1, 1), float32] */;
  %157 = divide(%156, 127f /* ty=float32 */) /* ty=Tensor[(160, 1, 1, 1), float32] */;
  %158 = divide(%154, %157) /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %159 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %160 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %161 = cast(%v14_conv_2_weight, dtype="float32") /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %162 = nn.conv2d_transpose(%145, %161, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %163 = abs(%162) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %164 = max(%163, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %165 = divide(%164, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %166 = divide(%162, %165) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %167 = multiply(%159, %160) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %168 = cast(%166, dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %169 = zeros(shape=[1, 576, 4, 4], dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %170 = where(%167, %168, %169) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %171 = cast(%170, dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %172 = tile(%170, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %173 = reshape(%93, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %174 = reshape(%172, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 4, 4), int8] */;
  %175 = nn.conv2d(%173, %174, padding=[1, 1, 1, 1], groups=576, out_dtype="int32") /* ty=Tensor[(1, 576, 3, 3), int32] */;
  %176 = reshape(%175, newshape=[1, 1, 576, 3, 3]) /* ty=Tensor[(1, 1, 576, 3, 3), int32] */;
  %177 = sum(%176, axis=[0]) /* ty=Tensor[(1, 576, 3, 3), int32] */;
  %178 = transpose(%177, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 3, 3), int32] */;
  %179 = abs(%178) /* ty=Tensor[(576, 1, 3, 3), int32] */;
  %180 = max(%179, axis=[1], keepdims=True) /* ty=Tensor[(576, 1, 3, 3), int32] */;
  %181 = divide(%180, 127 /* ty=int32 */) /* ty=Tensor[(576, 1, 3, 3), int32] */;
  %182 = divide(%178, %181) /* ty=Tensor[(576, 1, 3, 3), int32] */;
  %183 = greater_equal(%92, -128 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %184 = less_equal(%92, 127 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %185 = nn.conv2d_transpose(%170, %v14_conv_1_weight, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %186 = abs(%185) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %187 = max(%186, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %188 = divide(%187, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %189 = divide(%185, %188) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %190 = multiply(%183, %184) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %191 = cast(%189, dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %192 = zeros(shape=[1, 576, 4, 4], dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %193 = where(%190, %191, %192) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %194 = cast(%193, dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %195 = tile(%193, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 4, 4), int8] */;
  %196 = reshape(%91, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %197 = reshape(%195, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 4, 4), int8] */;
  %198 = nn.conv2d(%196, %197, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* ty=Tensor[(1, 55296, 1, 1), int32] */;
  %199 = reshape(%198, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), int32] */;
  %200 = sum(%199, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), int32] */;
  %201 = transpose(%200, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), int32] */;
  %202 = abs(%201) /* ty=Tensor[(576, 96, 1, 1), int32] */;
  %203 = max(%202, axis=[1], keepdims=True) /* ty=Tensor[(576, 1, 1, 1), int32] */;
  %204 = divide(%203, 127 /* ty=int32 */) /* ty=Tensor[(576, 1, 1, 1), int32] */;
  %205 = divide(%201, %204) /* ty=Tensor[(576, 96, 1, 1), int32] */;
  %206 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %207 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %208 = greater_equal(%90, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %209 = less_equal(%90, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %210 = nn.conv2d_transpose(%193, %v14_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %211 = abs(%210) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %212 = max(%211, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %213 = divide(%212, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %214 = divide(%210, %213) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %215 = multiply(%208, %209) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %216 = cast(%214, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %217 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %218 = where(%215, %216, %217) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %219 = cast(%218, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %220 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %221 = divide(%219, %220) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %222 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %223 = multiply(%221, %222) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %224 = multiply(%206, %207) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %225 = cast(%223, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %226 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %227 = where(%224, %225, %226) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %228 = cast(%227, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %229 = tile(%227, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 36864, 4, 4), int8] */;
  %230 = reshape(%87, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %231 = reshape(%229, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 4, 4), int8] */;
  %232 = nn.conv2d(%230, %231, padding=[0, 0, 0, 0], groups=384, out_dtype="int32") /* ty=Tensor[(1, 36864, 1, 1), int32] */;
  %233 = reshape(%232, newshape=[1, 384, 96, 1, 1]) /* ty=Tensor[(1, 384, 96, 1, 1), int32] */;
  %234 = sum(%233, axis=[0]) /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %235 = transpose(%234, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 384, 1, 1), int32] */;
  %236 = abs(%235) /* ty=Tensor[(96, 384, 1, 1), int32] */;
  %237 = max(%236, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %238 = divide(%237, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %239 = divide(%235, %238) /* ty=Tensor[(96, 384, 1, 1), int32] */;
  %240 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %241 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %242 = nn.conv2d_transpose(%227, %v13_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %243 = abs(%242) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %244 = max(%243, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %245 = divide(%244, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %246 = divide(%242, %245) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %247 = multiply(%240, %241) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %248 = cast(%246, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %249 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %250 = where(%247, %248, %249) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %251 = cast(%250, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %252 = tile(%250, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %253 = reshape(%85, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %254 = reshape(%252, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 4, 4), int8] */;
  %255 = nn.conv2d(%253, %254, padding=[2, 2, 2, 2], groups=384, out_dtype="int32") /* ty=Tensor[(1, 384, 5, 5), int32] */;
  %256 = reshape(%255, newshape=[1, 1, 384, 5, 5]) /* ty=Tensor[(1, 1, 384, 5, 5), int32] */;
  %257 = sum(%256, axis=[0]) /* ty=Tensor[(1, 384, 5, 5), int32] */;
  %258 = transpose(%257, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 5, 5), int32] */;
  %259 = abs(%258) /* ty=Tensor[(384, 1, 5, 5), int32] */;
  %260 = max(%259, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 5, 5), int32] */;
  %261 = divide(%260, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 5, 5), int32] */;
  %262 = divide(%258, %261) /* ty=Tensor[(384, 1, 5, 5), int32] */;
  %263 = greater_equal(%84, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %264 = less_equal(%84, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %265 = nn.conv2d_transpose(%250, %v13_conv_1_weight, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %266 = abs(%265) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %267 = max(%266, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %268 = divide(%267, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %269 = divide(%265, %268) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %270 = multiply(%263, %264) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %271 = cast(%269, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %272 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %273 = where(%270, %271, %272) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %274 = cast(%273, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %275 = tile(%273, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 36864, 4, 4), int8] */;
  %276 = reshape(%83, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %277 = reshape(%275, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 4, 4), int8] */;
  %278 = nn.conv2d(%276, %277, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* ty=Tensor[(1, 36864, 1, 1), int32] */;
  %279 = reshape(%278, newshape=[1, 96, 384, 1, 1]) /* ty=Tensor[(1, 96, 384, 1, 1), int32] */;
  %280 = sum(%279, axis=[0]) /* ty=Tensor[(96, 384, 1, 1), int32] */;
  %281 = transpose(%280, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %282 = abs(%281) /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %283 = max(%282, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %284 = divide(%283, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %285 = divide(%281, %284) /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %286 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %287 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %288 = greater_equal(%82, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %289 = less_equal(%82, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %290 = nn.conv2d_transpose(%273, %v13_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %291 = abs(%290) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %292 = max(%291, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %293 = divide(%292, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %294 = divide(%290, %293) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %295 = multiply(%288, %289) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %296 = cast(%294, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %297 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %298 = where(%295, %296, %297) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %299 = cast(%298, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %300 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %301 = divide(%299, %300) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %302 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %303 = multiply(%301, %302) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %304 = multiply(%286, %287) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %305 = cast(%303, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %306 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %307 = where(%304, %305, %306) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %308 = cast(%307, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %309 = tile(%307, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 36864, 4, 4), int8] */;
  %310 = reshape(%79, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %311 = reshape(%309, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 4, 4), int8] */;
  %312 = nn.conv2d(%310, %311, padding=[0, 0, 0, 0], groups=384, out_dtype="int32") /* ty=Tensor[(1, 36864, 1, 1), int32] */;
  %313 = reshape(%312, newshape=[1, 384, 96, 1, 1]) /* ty=Tensor[(1, 384, 96, 1, 1), int32] */;
  %314 = sum(%313, axis=[0]) /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %315 = transpose(%314, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 384, 1, 1), int32] */;
  %316 = abs(%315) /* ty=Tensor[(96, 384, 1, 1), int32] */;
  %317 = max(%316, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %318 = divide(%317, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %319 = divide(%315, %318) /* ty=Tensor[(96, 384, 1, 1), int32] */;
  %320 = greater_equal(%78, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %321 = less_equal(%78, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %322 = nn.conv2d_transpose(%307, %v12_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %323 = abs(%322) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %324 = max(%323, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %325 = divide(%324, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %326 = divide(%322, %325) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %327 = multiply(%320, %321) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %328 = cast(%326, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %329 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %330 = where(%327, %328, %329) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %331 = cast(%330, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %332 = tile(%330, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %333 = reshape(%77, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %334 = reshape(%332, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 4, 4), int8] */;
  %335 = nn.conv2d(%333, %334, padding=[2, 2, 2, 2], groups=384, out_dtype="int32") /* ty=Tensor[(1, 384, 5, 5), int32] */;
  %336 = reshape(%335, newshape=[1, 1, 384, 5, 5]) /* ty=Tensor[(1, 1, 384, 5, 5), int32] */;
  %337 = sum(%336, axis=[0]) /* ty=Tensor[(1, 384, 5, 5), int32] */;
  %338 = transpose(%337, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 5, 5), int32] */;
  %339 = abs(%338) /* ty=Tensor[(384, 1, 5, 5), int32] */;
  %340 = max(%339, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 5, 5), int32] */;
  %341 = divide(%340, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 5, 5), int32] */;
  %342 = divide(%338, %341) /* ty=Tensor[(384, 1, 5, 5), int32] */;
  %343 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %344 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %345 = nn.conv2d_transpose(%330, %v12_conv_1_weight, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %346 = abs(%345) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %347 = max(%346, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %348 = divide(%347, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %349 = divide(%345, %348) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %350 = multiply(%343, %344) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %351 = cast(%349, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %352 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %353 = where(%350, %351, %352) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %354 = cast(%353, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %355 = tile(%353, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 36864, 4, 4), int8] */;
  %356 = reshape(%75, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %357 = reshape(%355, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 4, 4), int8] */;
  %358 = nn.conv2d(%356, %357, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* ty=Tensor[(1, 36864, 1, 1), int32] */;
  %359 = reshape(%358, newshape=[1, 96, 384, 1, 1]) /* ty=Tensor[(1, 96, 384, 1, 1), int32] */;
  %360 = sum(%359, axis=[0]) /* ty=Tensor[(96, 384, 1, 1), int32] */;
  %361 = transpose(%360, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %362 = abs(%361) /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %363 = max(%362, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %364 = divide(%363, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %365 = divide(%361, %364) /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %366 = greater_equal(%74, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %367 = less_equal(%74, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %368 = nn.conv2d_transpose(%353, %v12_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %369 = abs(%368) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %370 = max(%369, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %371 = divide(%370, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %372 = divide(%368, %371) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %373 = multiply(%366, %367) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %374 = cast(%372, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %375 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %376 = where(%373, %374, %375) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %377 = cast(%376, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %378 = tile(%376, reps=[1, 240, 1, 1]) /* ty=Tensor[(1, 23040, 4, 4), int8] */;
  %379 = reshape(%73, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %380 = reshape(%378, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(23040, 1, 4, 4), int8] */;
  %381 = nn.conv2d(%379, %380, padding=[0, 0, 0, 0], groups=240, out_dtype="int32") /* ty=Tensor[(1, 23040, 1, 1), int32] */;
  %382 = reshape(%381, newshape=[1, 240, 96, 1, 1]) /* ty=Tensor[(1, 240, 96, 1, 1), int32] */;
  %383 = sum(%382, axis=[0]) /* ty=Tensor[(240, 96, 1, 1), int32] */;
  %384 = transpose(%383, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 240, 1, 1), int32] */;
  %385 = abs(%384) /* ty=Tensor[(96, 240, 1, 1), int32] */;
  %386 = max(%385, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %387 = divide(%386, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %388 = divide(%384, %387) /* ty=Tensor[(96, 240, 1, 1), int32] */;
  %389 = greater_equal(%72, -128 /* ty=int32 */) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %390 = less_equal(%72, 127 /* ty=int32 */) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %391 = nn.conv2d_transpose(%376, %v11_conv_2_weight, channels=240, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %392 = abs(%391) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %393 = max(%392, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %394 = divide(%393, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %395 = divide(%391, %394) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %396 = multiply(%389, %390) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %397 = cast(%395, dtype="int8") /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %398 = zeros(shape=[1, 240, 4, 4], dtype="int8") /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %399 = where(%396, %397, %398) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %400 = cast(%399, dtype="int32") /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %401 = tile(%399, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %402 = reshape(%71, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %403 = reshape(%401, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(240, 1, 4, 4), int8] */;
  %404 = nn.conv2d(%402, %403, padding=[3, 3, 3, 3], dilation=[2, 2], groups=240, out_dtype="int32") /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %405 = reshape(%404, newshape=[1, 1, 240, 8, 8]) /* ty=Tensor[(1, 1, 240, 8, 8), int32] */;
  %406 = sum(%405, axis=[0]) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %407 = transpose(%406, axes=[1, 0, 2, 3]) /* ty=Tensor[(240, 1, 8, 8), int32] */;
  %408 = strided_slice(%407, begin=[0, 0, 0, 0], end=[240, 1, 7, 7], strides=[1], axes=None) /* ty=Tensor[(240, 1, 7, 7), int32] */;
  %409 = abs(%408) /* ty=Tensor[(240, 1, 7, 7), int32] */;
  %410 = max(%409, axis=[1], keepdims=True) /* ty=Tensor[(240, 1, 7, 7), int32] */;
  %411 = divide(%410, 127 /* ty=int32 */) /* ty=Tensor[(240, 1, 7, 7), int32] */;
  %412 = divide(%408, %411) /* ty=Tensor[(240, 1, 7, 7), int32] */;
  %413 = greater_equal(%70, -128 /* ty=int32 */) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %414 = less_equal(%70, 127 /* ty=int32 */) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %415 = nn.conv2d_transpose(%399, %v11_conv_1_weight, channels=240, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=240, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %416 = abs(%415) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %417 = max(%416, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %418 = divide(%417, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %419 = divide(%415, %418) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %420 = multiply(%413, %414) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %421 = cast(%419, dtype="int8") /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %422 = zeros(shape=[1, 240, 8, 8], dtype="int8") /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %423 = where(%420, %421, %422) /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %424 = cast(%423, dtype="int32") /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %425 = tile(%423, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 11520, 8, 8), int8] */;
  %426 = reshape(%69, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %427 = reshape(%425, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(11520, 1, 8, 8), int8] */;
  %428 = nn.conv2d(%426, %427, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 11520, 1, 1), int32] */;
  %429 = reshape(%428, newshape=[1, 48, 240, 1, 1]) /* ty=Tensor[(1, 48, 240, 1, 1), int32] */;
  %430 = sum(%429, axis=[0]) /* ty=Tensor[(48, 240, 1, 1), int32] */;
  %431 = transpose(%430, axes=[1, 0, 2, 3]) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %432 = abs(%431) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %433 = max(%432, axis=[1], keepdims=True) /* ty=Tensor[(240, 1, 1, 1), int32] */;
  %434 = divide(%433, 127 /* ty=int32 */) /* ty=Tensor[(240, 1, 1, 1), int32] */;
  %435 = divide(%431, %434) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %436 = greater_equal(%66, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %437 = less_equal(%66, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %438 = greater_equal(%68, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %439 = less_equal(%68, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %440 = nn.conv2d_transpose(%423, %v11_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %441 = abs(%440) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %442 = max(%441, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %443 = divide(%442, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %444 = divide(%440, %443) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %445 = multiply(%438, %439) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %446 = cast(%444, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %447 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %448 = where(%445, %446, %447) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %450 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %451 = divide(%449, %450) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %452 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %453 = multiply(%451, %452) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %454 = multiply(%436, %437) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %455 = cast(%453, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %456 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %457 = where(%454, %455, %456) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %458 = cast(%457, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %459 = tile(%457, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 9216, 8, 8), int8] */;
  %460 = reshape(%65, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %461 = reshape(%459, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(9216, 1, 8, 8), int8] */;
  %462 = nn.conv2d(%460, %461, padding=[0, 0, 0, 0], groups=192, out_dtype="int32") /* ty=Tensor[(1, 9216, 1, 1), int32] */;
  %463 = reshape(%462, newshape=[1, 192, 48, 1, 1]) /* ty=Tensor[(1, 192, 48, 1, 1), int32] */;
  %464 = sum(%463, axis=[0]) /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %465 = transpose(%464, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 192, 1, 1), int32] */;
  %466 = abs(%465) /* ty=Tensor[(48, 192, 1, 1), int32] */;
  %467 = max(%466, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %468 = divide(%467, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %469 = divide(%465, %468) /* ty=Tensor[(48, 192, 1, 1), int32] */;
  %470 = greater_equal(%64, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %471 = less_equal(%64, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %472 = nn.conv2d_transpose(%457, %v10_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %473 = abs(%472) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %474 = max(%473, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %475 = divide(%474, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %476 = divide(%472, %475) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %477 = multiply(%470, %471) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %478 = cast(%476, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %479 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %480 = where(%477, %478, %479) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %481 = cast(%480, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %482 = tile(%480, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %483 = reshape(%63, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %484 = reshape(%482, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 8, 8), int8] */;
  %485 = nn.conv2d(%483, %484, padding=[1, 1, 1, 1], groups=192, out_dtype="int32") /* ty=Tensor[(1, 192, 3, 3), int32] */;
  %486 = reshape(%485, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), int32] */;
  %487 = sum(%486, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), int32] */;
  %488 = transpose(%487, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %489 = abs(%488) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %490 = max(%489, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %491 = divide(%490, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %492 = divide(%488, %491) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %493 = greater_equal(%62, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %494 = less_equal(%62, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %495 = nn.conv2d_transpose(%480, %v10_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %496 = abs(%495) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %497 = max(%496, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %498 = divide(%497, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %499 = divide(%495, %498) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %500 = multiply(%493, %494) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %501 = cast(%499, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %502 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %503 = where(%500, %501, %502) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %504 = cast(%503, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %505 = tile(%503, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 9216, 8, 8), int8] */;
  %506 = reshape(%61, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %507 = reshape(%505, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(9216, 1, 8, 8), int8] */;
  %508 = nn.conv2d(%506, %507, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 9216, 1, 1), int32] */;
  %509 = reshape(%508, newshape=[1, 48, 192, 1, 1]) /* ty=Tensor[(1, 48, 192, 1, 1), int32] */;
  %510 = sum(%509, axis=[0]) /* ty=Tensor[(48, 192, 1, 1), int32] */;
  %511 = transpose(%510, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %512 = abs(%511) /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %513 = max(%512, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %514 = divide(%513, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %515 = divide(%511, %514) /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %516 = greater_equal(%58, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %517 = less_equal(%58, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %518 = greater_equal(%60, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %519 = less_equal(%60, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %520 = nn.conv2d_transpose(%503, %v10_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %521 = abs(%520) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %522 = max(%521, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %523 = divide(%522, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %524 = divide(%520, %523) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %525 = multiply(%518, %519) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %526 = cast(%524, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %527 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %528 = where(%525, %526, %527) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %530 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %531 = divide(%529, %530) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %532 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %533 = multiply(%531, %532) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %534 = multiply(%516, %517) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %535 = cast(%533, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %536 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %537 = where(%534, %535, %536) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %538 = cast(%537, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %539 = tile(%537, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 6912, 8, 8), int8] */;
  %540 = reshape(%57, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %541 = reshape(%539, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6912, 1, 8, 8), int8] */;
  %542 = nn.conv2d(%540, %541, padding=[0, 0, 0, 0], groups=144, out_dtype="int32") /* ty=Tensor[(1, 6912, 1, 1), int32] */;
  %543 = reshape(%542, newshape=[1, 144, 48, 1, 1]) /* ty=Tensor[(1, 144, 48, 1, 1), int32] */;
  %544 = sum(%543, axis=[0]) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %545 = transpose(%544, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 144, 1, 1), int32] */;
  %546 = abs(%545) /* ty=Tensor[(48, 144, 1, 1), int32] */;
  %547 = max(%546, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %548 = divide(%547, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %549 = divide(%545, %548) /* ty=Tensor[(48, 144, 1, 1), int32] */;
  %550 = greater_equal(%56, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %551 = less_equal(%56, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %552 = nn.conv2d_transpose(%537, %v9_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %553 = abs(%552) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %554 = max(%553, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %555 = divide(%554, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %556 = divide(%552, %555) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %557 = multiply(%550, %551) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %558 = cast(%556, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %559 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %560 = where(%557, %558, %559) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %561 = cast(%560, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %562 = tile(%560, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %563 = reshape(%55, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %564 = reshape(%562, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), int8] */;
  %565 = nn.conv2d(%563, %564, padding=[1, 1, 1, 1], groups=144, out_dtype="int32") /* ty=Tensor[(1, 144, 3, 3), int32] */;
  %566 = reshape(%565, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), int32] */;
  %567 = sum(%566, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), int32] */;
  %568 = transpose(%567, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %569 = abs(%568) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %570 = max(%569, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %571 = divide(%570, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %572 = divide(%568, %571) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %573 = greater_equal(%54, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %574 = less_equal(%54, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %575 = nn.conv2d_transpose(%560, %v9_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %576 = abs(%575) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %577 = max(%576, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %578 = divide(%577, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %579 = divide(%575, %578) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %580 = multiply(%573, %574) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %581 = cast(%579, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %582 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %583 = where(%580, %581, %582) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %584 = cast(%583, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %585 = tile(%583, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 6912, 8, 8), int8] */;
  %586 = reshape(%53, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %587 = reshape(%585, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6912, 1, 8, 8), int8] */;
  %588 = nn.conv2d(%586, %587, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 6912, 1, 1), int32] */;
  %589 = reshape(%588, newshape=[1, 48, 144, 1, 1]) /* ty=Tensor[(1, 48, 144, 1, 1), int32] */;
  %590 = sum(%589, axis=[0]) /* ty=Tensor[(48, 144, 1, 1), int32] */;
  %591 = transpose(%590, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %592 = abs(%591) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %593 = max(%592, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %594 = divide(%593, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %595 = divide(%591, %594) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %596 = greater_equal(%52, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %597 = less_equal(%52, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %598 = nn.conv2d_transpose(%583, %v9_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %599 = abs(%598) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %600 = max(%599, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %601 = divide(%600, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %602 = divide(%598, %601) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %603 = multiply(%596, %597) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %604 = cast(%602, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %605 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %606 = where(%603, %604, %605) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %607 = cast(%606, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %608 = tile(%606, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 7680, 8, 8), int8] */;
  %609 = reshape(%51, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %610 = reshape(%608, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(7680, 1, 8, 8), int8] */;
  %611 = nn.conv2d(%609, %610, padding=[0, 0, 0, 0], groups=160, out_dtype="int32") /* ty=Tensor[(1, 7680, 1, 1), int32] */;
  %612 = reshape(%611, newshape=[1, 160, 48, 1, 1]) /* ty=Tensor[(1, 160, 48, 1, 1), int32] */;
  %613 = sum(%612, axis=[0]) /* ty=Tensor[(160, 48, 1, 1), int32] */;
  %614 = transpose(%613, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 160, 1, 1), int32] */;
  %615 = abs(%614) /* ty=Tensor[(48, 160, 1, 1), int32] */;
  %616 = max(%615, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %617 = divide(%616, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %618 = divide(%614, %617) /* ty=Tensor[(48, 160, 1, 1), int32] */;
  %619 = greater_equal(%50, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %620 = less_equal(%50, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %621 = nn.conv2d_transpose(%606, %v8_conv_2_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %622 = abs(%621) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %623 = max(%622, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %624 = divide(%623, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %625 = divide(%621, %624) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %626 = multiply(%619, %620) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %627 = cast(%625, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %628 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %629 = where(%626, %627, %628) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %630 = cast(%629, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %631 = tile(%629, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %632 = reshape(%49, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %633 = reshape(%631, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(160, 1, 8, 8), int8] */;
  %634 = nn.conv2d(%632, %633, padding=[2, 2, 2, 2], groups=160, out_dtype="int32") /* ty=Tensor[(1, 160, 5, 5), int32] */;
  %635 = reshape(%634, newshape=[1, 1, 160, 5, 5]) /* ty=Tensor[(1, 1, 160, 5, 5), int32] */;
  %636 = sum(%635, axis=[0]) /* ty=Tensor[(1, 160, 5, 5), int32] */;
  %637 = transpose(%636, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 1, 5, 5), int32] */;
  %638 = abs(%637) /* ty=Tensor[(160, 1, 5, 5), int32] */;
  %639 = max(%638, axis=[1], keepdims=True) /* ty=Tensor[(160, 1, 5, 5), int32] */;
  %640 = divide(%639, 127 /* ty=int32 */) /* ty=Tensor[(160, 1, 5, 5), int32] */;
  %641 = divide(%637, %640) /* ty=Tensor[(160, 1, 5, 5), int32] */;
  %642 = greater_equal(%48, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %643 = less_equal(%48, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %644 = nn.conv2d_transpose(%629, %v8_conv_1_weight, channels=160, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=160, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %645 = abs(%644) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %646 = max(%645, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %647 = divide(%646, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %648 = divide(%644, %647) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %649 = multiply(%642, %643) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %650 = cast(%648, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %651 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %652 = where(%649, %650, %651) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %653 = cast(%652, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %654 = tile(%652, reps=[1, 40, 1, 1]) /* ty=Tensor[(1, 6400, 8, 8), int8] */;
  %655 = reshape(%47, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %656 = reshape(%654, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6400, 1, 8, 8), int8] */;
  %657 = nn.conv2d(%655, %656, padding=[0, 0, 0, 0], groups=40, out_dtype="int32") /* ty=Tensor[(1, 6400, 1, 1), int32] */;
  %658 = reshape(%657, newshape=[1, 40, 160, 1, 1]) /* ty=Tensor[(1, 40, 160, 1, 1), int32] */;
  %659 = sum(%658, axis=[0]) /* ty=Tensor[(40, 160, 1, 1), int32] */;
  %660 = transpose(%659, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %661 = abs(%660) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %662 = max(%661, axis=[1], keepdims=True) /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %663 = divide(%662, 127 /* ty=int32 */) /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %664 = divide(%660, %663) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %665 = greater_equal(%44, -128 /* ty=int32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %666 = less_equal(%44, 127 /* ty=int32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %667 = greater_equal(%46, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %668 = less_equal(%46, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %669 = nn.conv2d_transpose(%652, %v8_conv_0_weight, channels=40, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %670 = abs(%669) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %671 = max(%670, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %672 = divide(%671, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %673 = divide(%669, %672) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %674 = multiply(%667, %668) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %675 = cast(%673, dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %676 = zeros(shape=[1, 40, 8, 8], dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %677 = where(%674, %675, %676) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %678 = cast(%677, dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %679 = reshape(%v7_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %680 = divide(%678, %679) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %681 = reshape(%v7_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %682 = multiply(%680, %681) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %683 = multiply(%665, %666) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %684 = cast(%682, dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %685 = zeros(shape=[1, 40, 8, 8], dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %686 = where(%683, %684, %685) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %687 = cast(%686, dtype="int32") /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %688 = tile(%686, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 6400, 8, 8), int8] */;
  %689 = reshape(%43, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %690 = reshape(%688, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6400, 1, 8, 8), int8] */;
  %691 = nn.conv2d(%689, %690, padding=[0, 0, 0, 0], groups=160, out_dtype="int32") /* ty=Tensor[(1, 6400, 1, 1), int32] */;
  %692 = reshape(%691, newshape=[1, 160, 40, 1, 1]) /* ty=Tensor[(1, 160, 40, 1, 1), int32] */;
  %693 = sum(%692, axis=[0]) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %694 = transpose(%693, axes=[1, 0, 2, 3]) /* ty=Tensor[(40, 160, 1, 1), int32] */;
  %695 = abs(%694) /* ty=Tensor[(40, 160, 1, 1), int32] */;
  %696 = max(%695, axis=[1], keepdims=True) /* ty=Tensor[(40, 1, 1, 1), int32] */;
  %697 = divide(%696, 127 /* ty=int32 */) /* ty=Tensor[(40, 1, 1, 1), int32] */;
  %698 = divide(%694, %697) /* ty=Tensor[(40, 160, 1, 1), int32] */;
  %699 = greater_equal(%42, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %700 = less_equal(%42, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %701 = nn.conv2d_transpose(%686, %v7_conv_2_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %702 = abs(%701) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %703 = max(%702, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %704 = divide(%703, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %705 = divide(%701, %704) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %706 = multiply(%699, %700) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %707 = cast(%705, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %708 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %709 = where(%706, %707, %708) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %710 = cast(%709, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %711 = tile(%709, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %712 = reshape(%41, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %713 = reshape(%711, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(160, 1, 8, 8), int8] */;
  %714 = nn.conv2d(%712, %713, padding=[3, 3, 3, 3], groups=160, out_dtype="int32") /* ty=Tensor[(1, 160, 7, 7), int32] */;
  %715 = reshape(%714, newshape=[1, 1, 160, 7, 7]) /* ty=Tensor[(1, 1, 160, 7, 7), int32] */;
  %716 = sum(%715, axis=[0]) /* ty=Tensor[(1, 160, 7, 7), int32] */;
  %717 = transpose(%716, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 1, 7, 7), int32] */;
  %718 = abs(%717) /* ty=Tensor[(160, 1, 7, 7), int32] */;
  %719 = max(%718, axis=[1], keepdims=True) /* ty=Tensor[(160, 1, 7, 7), int32] */;
  %720 = divide(%719, 127 /* ty=int32 */) /* ty=Tensor[(160, 1, 7, 7), int32] */;
  %721 = divide(%717, %720) /* ty=Tensor[(160, 1, 7, 7), int32] */;
  %722 = greater_equal(%40, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %723 = less_equal(%40, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %724 = nn.conv2d_transpose(%709, %v7_conv_1_weight, channels=160, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=160, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %725 = abs(%724) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %726 = max(%725, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %727 = divide(%726, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %728 = divide(%724, %727) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %729 = multiply(%722, %723) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %730 = cast(%728, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %731 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %732 = where(%729, %730, %731) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %733 = cast(%732, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %734 = tile(%732, reps=[1, 40, 1, 1]) /* ty=Tensor[(1, 6400, 8, 8), int8] */;
  %735 = reshape(%39, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %736 = reshape(%734, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6400, 1, 8, 8), int8] */;
  %737 = nn.conv2d(%735, %736, padding=[0, 0, 0, 0], groups=40, out_dtype="int32") /* ty=Tensor[(1, 6400, 1, 1), int32] */;
  %738 = reshape(%737, newshape=[1, 40, 160, 1, 1]) /* ty=Tensor[(1, 40, 160, 1, 1), int32] */;
  %739 = sum(%738, axis=[0]) /* ty=Tensor[(40, 160, 1, 1), int32] */;
  %740 = transpose(%739, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %741 = abs(%740) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %742 = max(%741, axis=[1], keepdims=True) /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %743 = divide(%742, 127 /* ty=int32 */) /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %744 = divide(%740, %743) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %745 = greater_equal(%38, -128 /* ty=int32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %746 = less_equal(%38, 127 /* ty=int32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %747 = nn.conv2d_transpose(%732, %v7_conv_0_weight, channels=40, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %748 = abs(%747) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %749 = max(%748, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %750 = divide(%749, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %751 = divide(%747, %750) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %752 = multiply(%745, %746) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %753 = cast(%751, dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %754 = zeros(shape=[1, 40, 8, 8], dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %755 = where(%752, %753, %754) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %756 = cast(%755, dtype="int32") /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %757 = tile(%755, reps=[1, 120, 1, 1]) /* ty=Tensor[(1, 4800, 8, 8), int8] */;
  %758 = reshape(%37, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %759 = reshape(%757, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4800, 1, 8, 8), int8] */;
  %760 = nn.conv2d(%758, %759, padding=[0, 0, 0, 0], groups=120, out_dtype="int32") /* ty=Tensor[(1, 4800, 1, 1), int32] */;
  %761 = reshape(%760, newshape=[1, 120, 40, 1, 1]) /* ty=Tensor[(1, 120, 40, 1, 1), int32] */;
  %762 = sum(%761, axis=[0]) /* ty=Tensor[(120, 40, 1, 1), int32] */;
  %763 = transpose(%762, axes=[1, 0, 2, 3]) /* ty=Tensor[(40, 120, 1, 1), int32] */;
  %764 = abs(%763) /* ty=Tensor[(40, 120, 1, 1), int32] */;
  %765 = max(%764, axis=[1], keepdims=True) /* ty=Tensor[(40, 1, 1, 1), int32] */;
  %766 = divide(%765, 127 /* ty=int32 */) /* ty=Tensor[(40, 1, 1, 1), int32] */;
  %767 = divide(%763, %766) /* ty=Tensor[(40, 120, 1, 1), int32] */;
  %768 = greater_equal(%36, -128 /* ty=int32 */) /* ty=Tensor[(1, 120, 8, 8), bool] */;
  %769 = less_equal(%36, 127 /* ty=int32 */) /* ty=Tensor[(1, 120, 8, 8), bool] */;
  %770 = nn.conv2d_transpose(%755, %v6_conv_2_weight, channels=120, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %771 = abs(%770) /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %772 = max(%771, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %773 = divide(%772, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %774 = divide(%770, %773) /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %775 = multiply(%768, %769) /* ty=Tensor[(1, 120, 8, 8), bool] */;
  %776 = cast(%774, dtype="int8") /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %777 = zeros(shape=[1, 120, 8, 8], dtype="int8") /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %778 = where(%775, %776, %777) /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %779 = cast(%778, dtype="int32") /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %780 = tile(%778, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %781 = reshape(%35, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %782 = reshape(%780, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(120, 1, 8, 8), int8] */;
  %783 = nn.conv2d(%781, %782, padding=[1, 1, 1, 1], dilation=[2, 2], groups=120, out_dtype="int32") /* ty=Tensor[(1, 120, 4, 4), int32] */;
  %784 = reshape(%783, newshape=[1, 1, 120, 4, 4]) /* ty=Tensor[(1, 1, 120, 4, 4), int32] */;
  %785 = sum(%784, axis=[0]) /* ty=Tensor[(1, 120, 4, 4), int32] */;
  %786 = transpose(%785, axes=[1, 0, 2, 3]) /* ty=Tensor[(120, 1, 4, 4), int32] */;
  %787 = strided_slice(%786, begin=[0, 0, 0, 0], end=[120, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(120, 1, 3, 3), int32] */;
  %788 = abs(%787) /* ty=Tensor[(120, 1, 3, 3), int32] */;
  %789 = max(%788, axis=[1], keepdims=True) /* ty=Tensor[(120, 1, 3, 3), int32] */;
  %790 = divide(%789, 127 /* ty=int32 */) /* ty=Tensor[(120, 1, 3, 3), int32] */;
  %791 = divide(%787, %790) /* ty=Tensor[(120, 1, 3, 3), int32] */;
  %792 = greater_equal(%34, -128 /* ty=int32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %793 = less_equal(%34, 127 /* ty=int32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %794 = nn.conv2d_transpose(%778, %v6_conv_1_weight, channels=120, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=120, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %795 = abs(%794) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %796 = max(%795, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %797 = divide(%796, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %798 = divide(%794, %797) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %799 = multiply(%792, %793) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %800 = cast(%798, dtype="int8") /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %801 = zeros(shape=[1, 120, 16, 16], dtype="int8") /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %802 = where(%799, %800, %801) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %803 = cast(%802, dtype="int32") /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %804 = tile(%802, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 2880, 16, 16), int8] */;
  %805 = reshape(%33, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %806 = reshape(%804, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2880, 1, 16, 16), int8] */;
  %807 = nn.conv2d(%805, %806, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 2880, 1, 1), int32] */;
  %808 = reshape(%807, newshape=[1, 24, 120, 1, 1]) /* ty=Tensor[(1, 24, 120, 1, 1), int32] */;
  %809 = sum(%808, axis=[0]) /* ty=Tensor[(24, 120, 1, 1), int32] */;
  %810 = transpose(%809, axes=[1, 0, 2, 3]) /* ty=Tensor[(120, 24, 1, 1), int32] */;
  %811 = abs(%810) /* ty=Tensor[(120, 24, 1, 1), int32] */;
  %812 = max(%811, axis=[1], keepdims=True) /* ty=Tensor[(120, 1, 1, 1), int32] */;
  %813 = divide(%812, 127 /* ty=int32 */) /* ty=Tensor[(120, 1, 1, 1), int32] */;
  %814 = divide(%810, %813) /* ty=Tensor[(120, 24, 1, 1), int32] */;
  %815 = greater_equal(%30, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %816 = less_equal(%30, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %817 = greater_equal(%32, meta[relay.Constant][10] /* ty=int8 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %818 = less_equal(%32, meta[relay.Constant][11] /* ty=int8 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %819 = nn.conv2d_transpose(%802, %v6_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %820 = abs(%819) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %821 = max(%820, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %822 = divide(%821, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %823 = divide(%819, %822) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %824 = multiply(%817, %818) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %825 = cast(%823, dtype="int8") /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %826 = zeros(shape=[1, 24, 16, 16], dtype="int8") /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %827 = where(%824, %825, %826) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %828 = cast(%827, dtype="float32") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %829 = reshape(%v5_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %830 = divide(%828, %829) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %831 = reshape(%v5_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %832 = multiply(%830, %831) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %833 = multiply(%815, %816) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %834 = cast(%832, dtype="int8") /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %835 = zeros(shape=[1, 24, 16, 16], dtype="int8") /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %836 = where(%833, %834, %835) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %837 = cast(%836, dtype="int32") /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %838 = tile(%836, reps=[1, 120, 1, 1]) /* ty=Tensor[(1, 2880, 16, 16), int8] */;
  %839 = reshape(%29, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %840 = reshape(%838, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2880, 1, 16, 16), int8] */;
  %841 = nn.conv2d(%839, %840, padding=[0, 0, 0, 0], groups=120, out_dtype="int32") /* ty=Tensor[(1, 2880, 1, 1), int32] */;
  %842 = reshape(%841, newshape=[1, 120, 24, 1, 1]) /* ty=Tensor[(1, 120, 24, 1, 1), int32] */;
  %843 = sum(%842, axis=[0]) /* ty=Tensor[(120, 24, 1, 1), int32] */;
  %844 = transpose(%843, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 120, 1, 1), int32] */;
  %845 = abs(%844) /* ty=Tensor[(24, 120, 1, 1), int32] */;
  %846 = max(%845, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %847 = divide(%846, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %848 = divide(%844, %847) /* ty=Tensor[(24, 120, 1, 1), int32] */;
  %849 = greater_equal(%28, -128 /* ty=int32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %850 = less_equal(%28, 127 /* ty=int32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %851 = nn.conv2d_transpose(%836, %v5_conv_2_weight, channels=120, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %852 = abs(%851) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %853 = max(%852, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %854 = divide(%853, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %855 = divide(%851, %854) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %856 = multiply(%849, %850) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %857 = cast(%855, dtype="int8") /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %858 = zeros(shape=[1, 120, 16, 16], dtype="int8") /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %859 = where(%856, %857, %858) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %860 = cast(%859, dtype="int32") /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %861 = tile(%859, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %862 = reshape(%27, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %863 = reshape(%861, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(120, 1, 16, 16), int8] */;
  %864 = nn.conv2d(%862, %863, padding=[1, 1, 1, 1], groups=120, out_dtype="int32") /* ty=Tensor[(1, 120, 3, 3), int32] */;
  %865 = reshape(%864, newshape=[1, 1, 120, 3, 3]) /* ty=Tensor[(1, 1, 120, 3, 3), int32] */;
  %866 = sum(%865, axis=[0]) /* ty=Tensor[(1, 120, 3, 3), int32] */;
  %867 = transpose(%866, axes=[1, 0, 2, 3]) /* ty=Tensor[(120, 1, 3, 3), int32] */;
  %868 = abs(%867) /* ty=Tensor[(120, 1, 3, 3), int32] */;
  %869 = max(%868, axis=[1], keepdims=True) /* ty=Tensor[(120, 1, 3, 3), int32] */;
  %870 = divide(%869, 127 /* ty=int32 */) /* ty=Tensor[(120, 1, 3, 3), int32] */;
  %871 = divide(%867, %870) /* ty=Tensor[(120, 1, 3, 3), int32] */;
  %872 = greater_equal(%26, -128 /* ty=int32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %873 = less_equal(%26, 127 /* ty=int32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %874 = nn.conv2d_transpose(%859, %v5_conv_1_weight, channels=120, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=120, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %875 = abs(%874) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %876 = max(%875, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %877 = divide(%876, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %878 = divide(%874, %877) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %879 = multiply(%872, %873) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %880 = cast(%878, dtype="int8") /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %881 = zeros(shape=[1, 120, 16, 16], dtype="int8") /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %882 = where(%879, %880, %881) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %883 = cast(%882, dtype="int32") /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %884 = tile(%882, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 2880, 16, 16), int8] */;
  %885 = reshape(%25, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %886 = reshape(%884, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2880, 1, 16, 16), int8] */;
  %887 = nn.conv2d(%885, %886, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 2880, 1, 1), int32] */;
  %888 = reshape(%887, newshape=[1, 24, 120, 1, 1]) /* ty=Tensor[(1, 24, 120, 1, 1), int32] */;
  %889 = sum(%888, axis=[0]) /* ty=Tensor[(24, 120, 1, 1), int32] */;
  %890 = transpose(%889, axes=[1, 0, 2, 3]) /* ty=Tensor[(120, 24, 1, 1), int32] */;
  %891 = abs(%890) /* ty=Tensor[(120, 24, 1, 1), int32] */;
  %892 = max(%891, axis=[1], keepdims=True) /* ty=Tensor[(120, 1, 1, 1), int32] */;
  %893 = divide(%892, 127 /* ty=int32 */) /* ty=Tensor[(120, 1, 1, 1), int32] */;
  %894 = divide(%890, %893) /* ty=Tensor[(120, 24, 1, 1), int32] */;
  %895 = greater_equal(%24, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %896 = less_equal(%24, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %897 = nn.conv2d_transpose(%882, %v5_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %898 = abs(%897) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %899 = max(%898, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %900 = divide(%899, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %901 = divide(%897, %900) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %902 = multiply(%895, %896) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %903 = cast(%901, dtype="int8") /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %904 = zeros(shape=[1, 24, 16, 16], dtype="int8") /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %905 = where(%902, %903, %904) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %906 = cast(%905, dtype="int32") /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %907 = tile(%905, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 1152, 16, 16), int8] */;
  %908 = reshape(%23, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %909 = reshape(%907, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1152, 1, 16, 16), int8] */;
  %910 = nn.conv2d(%908, %909, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 1152, 1, 1), int32] */;
  %911 = reshape(%910, newshape=[1, 48, 24, 1, 1]) /* ty=Tensor[(1, 48, 24, 1, 1), int32] */;
  %912 = sum(%911, axis=[0]) /* ty=Tensor[(48, 24, 1, 1), int32] */;
  %913 = transpose(%912, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 48, 1, 1), int32] */;
  %914 = abs(%913) /* ty=Tensor[(24, 48, 1, 1), int32] */;
  %915 = max(%914, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %916 = divide(%915, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %917 = divide(%913, %916) /* ty=Tensor[(24, 48, 1, 1), int32] */;
  %918 = greater_equal(%22, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %919 = less_equal(%22, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %920 = nn.conv2d_transpose(%905, %v4_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %921 = abs(%920) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %922 = max(%921, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %923 = divide(%922, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %924 = divide(%920, %923) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %925 = multiply(%918, %919) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %926 = cast(%924, dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %927 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %928 = where(%925, %926, %927) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %929 = cast(%928, dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %930 = tile(%928, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %931 = reshape(%21, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %932 = reshape(%930, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), int8] */;
  %933 = nn.conv2d(%931, %932, padding=[3, 3, 3, 3], dilation=[2, 2], groups=48, out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %934 = reshape(%933, newshape=[1, 1, 48, 8, 8]) /* ty=Tensor[(1, 1, 48, 8, 8), int32] */;
  %935 = sum(%934, axis=[0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %936 = transpose(%935, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 8, 8), int32] */;
  %937 = strided_slice(%936, begin=[0, 0, 0, 0], end=[48, 1, 7, 7], strides=[1], axes=None) /* ty=Tensor[(48, 1, 7, 7), int32] */;
  %938 = abs(%937) /* ty=Tensor[(48, 1, 7, 7), int32] */;
  %939 = max(%938, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 7, 7), int32] */;
  %940 = divide(%939, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 7, 7), int32] */;
  %941 = divide(%937, %940) /* ty=Tensor[(48, 1, 7, 7), int32] */;
  %942 = greater_equal(%20, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %943 = less_equal(%20, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %944 = nn.conv2d_transpose(%928, %v4_conv_1_weight, channels=48, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=48, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %945 = abs(%944) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %946 = max(%945, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %947 = divide(%946, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %948 = divide(%944, %947) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %949 = multiply(%942, %943) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %950 = cast(%948, dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %951 = zeros(shape=[1, 48, 32, 32], dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %952 = where(%949, %950, %951) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %953 = cast(%952, dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %954 = tile(%952, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), int8] */;
  %955 = reshape(%19, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %956 = reshape(%954, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), int8] */;
  %957 = nn.conv2d(%955, %956, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %958 = reshape(%957, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), int32] */;
  %959 = sum(%958, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %960 = transpose(%959, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %961 = abs(%960) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %962 = max(%961, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %963 = divide(%962, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %964 = divide(%960, %963) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %965 = greater_equal(%16, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %966 = less_equal(%16, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %967 = greater_equal(%18, meta[relay.Constant][12] /* ty=int8 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %968 = less_equal(%18, meta[relay.Constant][13] /* ty=int8 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %969 = nn.conv2d_transpose(%952, %v4_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %970 = abs(%969) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %971 = max(%970, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %972 = divide(%971, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %973 = divide(%969, %972) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %974 = multiply(%967, %968) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %975 = cast(%973, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %976 = zeros(shape=[1, 16, 32, 32], dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %977 = where(%974, %975, %976) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %978 = cast(%977, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %979 = reshape(%v3_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %980 = divide(%978, %979) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %981 = reshape(%v3_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %982 = multiply(%980, %981) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %983 = multiply(%965, %966) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %984 = cast(%982, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %985 = zeros(shape=[1, 16, 32, 32], dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %986 = where(%983, %984, %985) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %987 = cast(%986, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %988 = tile(%986, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), int8] */;
  %989 = reshape(%15, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %990 = reshape(%988, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), int8] */;
  %991 = nn.conv2d(%989, %990, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %992 = reshape(%991, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), int32] */;
  %993 = sum(%992, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %994 = transpose(%993, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %995 = abs(%994) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %996 = max(%995, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %997 = divide(%996, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %998 = divide(%994, %997) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %999 = greater_equal(%14, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1000 = less_equal(%14, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1001 = nn.conv2d_transpose(%986, %v3_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1002 = abs(%1001) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1003 = max(%1002, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1004 = divide(%1003, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1005 = divide(%1001, %1004) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1006 = multiply(%999, %1000) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1007 = cast(%1005, dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1008 = zeros(shape=[1, 48, 32, 32], dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1009 = where(%1006, %1007, %1008) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1010 = cast(%1009, dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1011 = tile(%1009, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1012 = reshape(%13, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1013 = reshape(%1011, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 32, 32), int8] */;
  %1014 = nn.conv2d(%1012, %1013, padding=[1, 1, 1, 1], groups=48, out_dtype="int32") /* ty=Tensor[(1, 48, 3, 3), int32] */;
  %1015 = reshape(%1014, newshape=[1, 1, 48, 3, 3]) /* ty=Tensor[(1, 1, 48, 3, 3), int32] */;
  %1016 = sum(%1015, axis=[0]) /* ty=Tensor[(1, 48, 3, 3), int32] */;
  %1017 = transpose(%1016, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1018 = abs(%1017) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1019 = max(%1018, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1020 = divide(%1019, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1021 = divide(%1017, %1020) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1022 = greater_equal(%12, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1023 = less_equal(%12, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1024 = nn.conv2d_transpose(%1009, %v3_conv_1_weight, channels=48, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1025 = abs(%1024) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1026 = max(%1025, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1027 = divide(%1026, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1028 = divide(%1024, %1027) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1029 = multiply(%1022, %1023) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1030 = cast(%1028, dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1031 = zeros(shape=[1, 48, 32, 32], dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1032 = where(%1029, %1030, %1031) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1033 = cast(%1032, dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1034 = tile(%1032, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), int8] */;
  %1035 = reshape(%11, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1036 = reshape(%1034, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), int8] */;
  %1037 = nn.conv2d(%1035, %1036, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1038 = reshape(%1037, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), int32] */;
  %1039 = sum(%1038, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1040 = transpose(%1039, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1041 = abs(%1040) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1042 = max(%1041, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1043 = divide(%1042, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1044 = divide(%1040, %1043) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1045 = greater_equal(%10, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1046 = less_equal(%10, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1047 = nn.conv2d_transpose(%1032, %v3_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1048 = abs(%1047) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1049 = max(%1048, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1050 = divide(%1049, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1051 = divide(%1047, %1050) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1052 = multiply(%1045, %1046) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1053 = cast(%1051, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1054 = zeros(shape=[1, 16, 32, 32], dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1055 = where(%1052, %1053, %1054) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1056 = cast(%1055, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1057 = tile(%1055, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 512, 32, 32), int8] */;
  %1058 = reshape(%9, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %1059 = reshape(%1057, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(512, 1, 32, 32), int8] */;
  %1060 = nn.conv2d(%1058, %1059, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 512, 1, 1), int32] */;
  %1061 = reshape(%1060, newshape=[1, 32, 16, 1, 1]) /* ty=Tensor[(1, 32, 16, 1, 1), int32] */;
  %1062 = sum(%1061, axis=[0]) /* ty=Tensor[(32, 16, 1, 1), int32] */;
  %1063 = transpose(%1062, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 32, 1, 1), int32] */;
  %1064 = abs(%1063) /* ty=Tensor[(16, 32, 1, 1), int32] */;
  %1065 = max(%1064, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1066 = divide(%1065, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1067 = divide(%1063, %1066) /* ty=Tensor[(16, 32, 1, 1), int32] */;
  %1068 = greater_equal(%8, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 32, 32), bool] */;
  %1069 = less_equal(%8, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 32, 32), bool] */;
  %1070 = nn.conv2d_transpose(%1055, %v2_conv_2_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %1071 = abs(%1070) /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %1072 = max(%1071, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1073 = divide(%1072, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1074 = divide(%1070, %1073) /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %1075 = multiply(%1068, %1069) /* ty=Tensor[(1, 32, 32, 32), bool] */;
  %1076 = cast(%1074, dtype="int8") /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %1077 = zeros(shape=[1, 32, 32, 32], dtype="int8") /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %1078 = where(%1075, %1076, %1077) /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %1079 = cast(%1078, dtype="int32") /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %1080 = tile(%1078, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %1081 = reshape(%7, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %1082 = reshape(%1080, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(32, 1, 32, 32), int8] */;
  %1083 = nn.conv2d(%1081, %1082, padding=[1, 1, 1, 1], dilation=[2, 2], groups=32, out_dtype="int32") /* ty=Tensor[(1, 32, 4, 4), int32] */;
  %1084 = reshape(%1083, newshape=[1, 1, 32, 4, 4]) /* ty=Tensor[(1, 1, 32, 4, 4), int32] */;
  %1085 = sum(%1084, axis=[0]) /* ty=Tensor[(1, 32, 4, 4), int32] */;
  %1086 = transpose(%1085, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 1, 4, 4), int32] */;
  %1087 = strided_slice(%1086, begin=[0, 0, 0, 0], end=[32, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(32, 1, 3, 3), int32] */;
  %1088 = abs(%1087) /* ty=Tensor[(32, 1, 3, 3), int32] */;
  %1089 = max(%1088, axis=[1], keepdims=True) /* ty=Tensor[(32, 1, 3, 3), int32] */;
  %1090 = divide(%1089, 127 /* ty=int32 */) /* ty=Tensor[(32, 1, 3, 3), int32] */;
  %1091 = divide(%1087, %1090) /* ty=Tensor[(32, 1, 3, 3), int32] */;
  %1092 = greater_equal(%6, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %1093 = less_equal(%6, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %1094 = nn.conv2d_transpose(%1078, %v2_conv_1_weight, channels=32, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=32, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %1095 = abs(%1094) /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %1096 = max(%1095, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1097 = divide(%1096, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1098 = divide(%1094, %1097) /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %1099 = multiply(%1092, %1093) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %1100 = cast(%1098, dtype="int8") /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %1101 = zeros(shape=[1, 32, 64, 64], dtype="int8") /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %1102 = where(%1099, %1100, %1101) /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %1103 = cast(%1102, dtype="int32") /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %1104 = tile(%1102, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 256, 64, 64), int8] */;
  %1105 = reshape(%5, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1106 = reshape(%1104, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(256, 1, 64, 64), int8] */;
  %1107 = nn.conv2d(%1105, %1106, padding=[0, 0, 0, 0], groups=8, out_dtype="int32") /* ty=Tensor[(1, 256, 1, 1), int32] */;
  %1108 = reshape(%1107, newshape=[1, 8, 32, 1, 1]) /* ty=Tensor[(1, 8, 32, 1, 1), int32] */;
  %1109 = sum(%1108, axis=[0]) /* ty=Tensor[(8, 32, 1, 1), int32] */;
  %1110 = transpose(%1109, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 8, 1, 1), int32] */;
  %1111 = abs(%1110) /* ty=Tensor[(32, 8, 1, 1), int32] */;
  %1112 = max(%1111, axis=[1], keepdims=True) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %1113 = divide(%1112, 127 /* ty=int32 */) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %1114 = divide(%1110, %1113) /* ty=Tensor[(32, 8, 1, 1), int32] */;
  %1115 = greater_equal(%4, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1116 = less_equal(%4, 127 /* ty=int32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1117 = nn.conv2d_transpose(%1102, %v2_conv_0_weight, channels=8, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1118 = abs(%1117) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1119 = max(%1118, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1120 = divide(%1119, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1121 = divide(%1117, %1120) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1122 = multiply(%1115, %1116) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1123 = cast(%1121, dtype="int8") /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1124 = zeros(shape=[1, 8, 64, 64], dtype="int8") /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1125 = where(%1122, %1123, %1124) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1126 = cast(%1125, dtype="int32") /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1127 = tile(%1125, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 128, 64, 64), int8] */;
  %1128 = reshape(%3, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1129 = reshape(%1127, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(128, 1, 64, 64), int8] */;
  %1130 = nn.conv2d(%1128, %1129, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 128, 1, 1), int32] */;
  %1131 = reshape(%1130, newshape=[1, 16, 8, 1, 1]) /* ty=Tensor[(1, 16, 8, 1, 1), int32] */;
  %1132 = sum(%1131, axis=[0]) /* ty=Tensor[(16, 8, 1, 1), int32] */;
  %1133 = transpose(%1132, axes=[1, 0, 2, 3]) /* ty=Tensor[(8, 16, 1, 1), int32] */;
  %1134 = abs(%1133) /* ty=Tensor[(8, 16, 1, 1), int32] */;
  %1135 = max(%1134, axis=[1], keepdims=True) /* ty=Tensor[(8, 1, 1, 1), int32] */;
  %1136 = divide(%1135, 127 /* ty=int32 */) /* ty=Tensor[(8, 1, 1, 1), int32] */;
  %1137 = divide(%1133, %1136) /* ty=Tensor[(8, 16, 1, 1), int32] */;
  %1138 = greater_equal(%2, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1139 = less_equal(%2, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1140 = nn.conv2d_transpose(%1125, %v1_conv_1_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1141 = abs(%1140) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1142 = max(%1141, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1143 = divide(%1142, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1144 = divide(%1140, %1143) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1145 = multiply(%1138, %1139) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1146 = cast(%1144, dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1147 = zeros(shape=[1, 16, 64, 64], dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1148 = where(%1145, %1146, %1147) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1149 = cast(%1148, dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1150 = tile(%1148, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1151 = reshape(%1, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1152 = reshape(%1150, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(16, 1, 64, 64), int8] */;
  %1153 = nn.conv2d(%1151, %1152, padding=[1, 1, 1, 1], groups=16, out_dtype="int32") /* ty=Tensor[(1, 16, 3, 3), int32] */;
  %1154 = reshape(%1153, newshape=[1, 1, 16, 3, 3]) /* ty=Tensor[(1, 1, 16, 3, 3), int32] */;
  %1155 = sum(%1154, axis=[0]) /* ty=Tensor[(1, 16, 3, 3), int32] */;
  %1156 = transpose(%1155, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1157 = abs(%1156) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1158 = max(%1157, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1159 = divide(%1158, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1160 = divide(%1156, %1159) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1161 = greater_equal(%0, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1162 = less_equal(%0, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1163 = nn.conv2d_transpose(%1148, %v1_conv_0_weight, channels=16, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=16, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1164 = abs(%1163) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1165 = max(%1164, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1166 = divide(%1165, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1167 = divide(%1163, %1166) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1168 = multiply(%1161, %1162) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1169 = cast(%1167, dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1170 = zeros(shape=[1, 16, 64, 64], dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1171 = where(%1168, %1169, %1170) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1172 = cast(%1171, dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1173 = tile(%1171, reps=[1, 3, 1, 1]) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %1174 = reshape(%input, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 3, 128, 128), int8] */;
  %1175 = reshape(%1173, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 64, 64), int8] */;
  %1176 = nn.conv2d(%1174, %1175, padding=[1, 1, 1, 1], dilation=[2, 2], groups=3, out_dtype="int32") /* ty=Tensor[(1, 48, 4, 4), int32] */;
  %1177 = reshape(%1176, newshape=[1, 3, 16, 4, 4]) /* ty=Tensor[(1, 3, 16, 4, 4), int32] */;
  %1178 = sum(%1177, axis=[0]) /* ty=Tensor[(3, 16, 4, 4), int32] */;
  %1179 = transpose(%1178, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 3, 4, 4), int32] */;
  %1180 = strided_slice(%1179, begin=[0, 0, 0, 0], end=[16, 3, 3, 3], strides=[1], axes=None) /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %1181 = abs(%1180) /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %1182 = max(%1181, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1183 = divide(%1182, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1184 = divide(%1180, %1183) /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %1185 = nn.cross_entropy_with_logits(%103, %label) /* ty=float32 */;
  %1186 = sum(%117, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %1187 = cast(%129, dtype="int8") /* ty=Tensor[(10, 160, 1, 1), int8] */;
  %1188 = sum(%146, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %1189 = cast(%158, dtype="int8") /* ty=Tensor[(160, 576, 1, 1), int8] */;
  %1190 = sum(%171, axis=[1], exclude=True) /* ty=Tensor[(576), int32] */;
  %1191 = cast(%182, dtype="int8") /* ty=Tensor[(576, 1, 3, 3), int8] */;
  %1192 = sum(%194, axis=[1], exclude=True) /* ty=Tensor[(576), int32] */;
  %1193 = cast(%205, dtype="int8") /* ty=Tensor[(576, 96, 1, 1), int8] */;
  %1194 = sum(%228, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1195 = cast(%239, dtype="int8") /* ty=Tensor[(96, 384, 1, 1), int8] */;
  %1196 = sum(%251, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %1197 = cast(%262, dtype="int8") /* ty=Tensor[(384, 1, 5, 5), int8] */;
  %1198 = sum(%274, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %1199 = cast(%285, dtype="int8") /* ty=Tensor[(384, 96, 1, 1), int8] */;
  %1200 = sum(%308, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1201 = cast(%319, dtype="int8") /* ty=Tensor[(96, 384, 1, 1), int8] */;
  %1202 = sum(%331, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %1203 = cast(%342, dtype="int8") /* ty=Tensor[(384, 1, 5, 5), int8] */;
  %1204 = sum(%354, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %1205 = cast(%365, dtype="int8") /* ty=Tensor[(384, 96, 1, 1), int8] */;
  %1206 = sum(%377, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1207 = cast(%388, dtype="int8") /* ty=Tensor[(96, 240, 1, 1), int8] */;
  %1208 = sum(%400, axis=[1], exclude=True) /* ty=Tensor[(240), int32] */;
  %1209 = cast(%412, dtype="int8") /* ty=Tensor[(240, 1, 7, 7), int8] */;
  %1210 = sum(%424, axis=[1], exclude=True) /* ty=Tensor[(240), int32] */;
  %1211 = cast(%435, dtype="int8") /* ty=Tensor[(240, 48, 1, 1), int8] */;
  %1212 = sum(%458, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1213 = cast(%469, dtype="int8") /* ty=Tensor[(48, 192, 1, 1), int8] */;
  %1214 = sum(%481, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1215 = cast(%492, dtype="int8") /* ty=Tensor[(192, 1, 3, 3), int8] */;
  %1216 = sum(%504, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1217 = cast(%515, dtype="int8") /* ty=Tensor[(192, 48, 1, 1), int8] */;
  %1218 = sum(%538, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1219 = cast(%549, dtype="int8") /* ty=Tensor[(48, 144, 1, 1), int8] */;
  %1220 = sum(%561, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1221 = cast(%572, dtype="int8") /* ty=Tensor[(144, 1, 3, 3), int8] */;
  %1222 = sum(%584, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1223 = cast(%595, dtype="int8") /* ty=Tensor[(144, 48, 1, 1), int8] */;
  %1224 = sum(%607, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1225 = cast(%618, dtype="int8") /* ty=Tensor[(48, 160, 1, 1), int8] */;
  %1226 = sum(%630, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %1227 = cast(%641, dtype="int8") /* ty=Tensor[(160, 1, 5, 5), int8] */;
  %1228 = sum(%653, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %1229 = cast(%664, dtype="int8") /* ty=Tensor[(160, 40, 1, 1), int8] */;
  %1230 = sum(%687, axis=[1], exclude=True) /* ty=Tensor[(40), int32] */;
  %1231 = cast(%698, dtype="int8") /* ty=Tensor[(40, 160, 1, 1), int8] */;
  %1232 = sum(%710, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %1233 = cast(%721, dtype="int8") /* ty=Tensor[(160, 1, 7, 7), int8] */;
  %1234 = sum(%733, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %1235 = cast(%744, dtype="int8") /* ty=Tensor[(160, 40, 1, 1), int8] */;
  %1236 = sum(%756, axis=[1], exclude=True) /* ty=Tensor[(40), int32] */;
  %1237 = cast(%767, dtype="int8") /* ty=Tensor[(40, 120, 1, 1), int8] */;
  %1238 = sum(%779, axis=[1], exclude=True) /* ty=Tensor[(120), int32] */;
  %1239 = cast(%791, dtype="int8") /* ty=Tensor[(120, 1, 3, 3), int8] */;
  %1240 = sum(%803, axis=[1], exclude=True) /* ty=Tensor[(120), int32] */;
  %1241 = cast(%814, dtype="int8") /* ty=Tensor[(120, 24, 1, 1), int8] */;
  %1242 = sum(%837, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1243 = cast(%848, dtype="int8") /* ty=Tensor[(24, 120, 1, 1), int8] */;
  %1244 = sum(%860, axis=[1], exclude=True) /* ty=Tensor[(120), int32] */;
  %1245 = cast(%871, dtype="int8") /* ty=Tensor[(120, 1, 3, 3), int8] */;
  %1246 = sum(%883, axis=[1], exclude=True) /* ty=Tensor[(120), int32] */;
  %1247 = cast(%894, dtype="int8") /* ty=Tensor[(120, 24, 1, 1), int8] */;
  %1248 = sum(%906, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1249 = cast(%917, dtype="int8") /* ty=Tensor[(24, 48, 1, 1), int8] */;
  %1250 = sum(%929, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1251 = cast(%941, dtype="int8") /* ty=Tensor[(48, 1, 7, 7), int8] */;
  %1252 = sum(%953, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1253 = cast(%964, dtype="int8") /* ty=Tensor[(48, 16, 1, 1), int8] */;
  %1254 = sum(%987, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1255 = cast(%998, dtype="int8") /* ty=Tensor[(16, 48, 1, 1), int8] */;
  %1256 = sum(%1010, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1257 = cast(%1021, dtype="int8") /* ty=Tensor[(48, 1, 3, 3), int8] */;
  %1258 = sum(%1033, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1259 = cast(%1044, dtype="int8") /* ty=Tensor[(48, 16, 1, 1), int8] */;
  %1260 = sum(%1056, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1261 = cast(%1067, dtype="int8") /* ty=Tensor[(16, 32, 1, 1), int8] */;
  %1262 = sum(%1079, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %1263 = cast(%1091, dtype="int8") /* ty=Tensor[(32, 1, 3, 3), int8] */;
  %1264 = sum(%1103, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %1265 = cast(%1114, dtype="int8") /* ty=Tensor[(32, 8, 1, 1), int8] */;
  %1266 = sum(%1126, axis=[1], exclude=True) /* ty=Tensor[(8), int32] */;
  %1267 = cast(%1137, dtype="int8") /* ty=Tensor[(8, 16, 1, 1), int8] */;
  %1268 = sum(%1149, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1269 = cast(%1160, dtype="int8") /* ty=Tensor[(16, 1, 3, 3), int8] */;
  %1270 = sum(%1172, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1271 = cast(%1184, dtype="int8") /* ty=Tensor[(16, 3, 3, 3), int8] */;
  (%1185, %1186, %1187, %1188, %1189, %1190, %1191, %1192, %1193, %1194, %1195, %1196, %1197, %1198, %1199, %1200, %1201, %1202, %1203, %1204, %1205, %1206, %1207, %1208, %1209, %1210, %1211, %1212, %1213, %1214, %1215, %1216, %1217, %1218, %1219, %1220, %1221, %1222, %1223, %1224, %1225, %1226, %1227, %1228, %1229, %1230, %1231, %1232, %1233, %1234, %1235, %1236, %1237, %1238, %1239, %1240, %1241, %1242, %1243, %1244, %1245, %1246, %1247, %1248, %1249, %1250, %1251, %1252, %1253, %1254, %1255, %1256, %1257, %1258, %1259, %1260, %1261, %1262, %1263, %1264, %1265, %1266, %1267, %1268, %1269, %1270, %1271)
}

