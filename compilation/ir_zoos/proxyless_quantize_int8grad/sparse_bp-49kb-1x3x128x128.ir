def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(24, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(24), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(24), float32], %v2_conv_1_weight: Tensor[(24, 1, 5, 5), int8], %v2_conv_1_bias: Tensor[(24), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(24), float32], %v2_conv_2_weight: Tensor[(16, 24, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(48), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(48), float32], %v5_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(48), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(48), float32], %v5_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(48), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(48), float32], %v6_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v6_conv_1_bias: Tensor[(48), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(48), float32], %v6_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(48), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(48), float32], %v7_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v7_conv_1_bias: Tensor[(48), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(48), float32], %v7_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v7_conv_2_bias: Tensor[(16), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(16), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v8_conv_0_bias: Tensor[(96), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(96), float32], %v8_conv_1_weight: Tensor[(96, 1, 7, 7), int8], %v8_conv_1_bias: Tensor[(96), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(96), float32], %v8_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v9_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(72), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(72), float32], %v9_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v9_conv_1_bias: Tensor[(72), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(72), float32], %v9_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(72), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(72), float32], %v10_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v10_conv_1_bias: Tensor[(72), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(72), float32], %v10_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(72), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(72), float32], %v11_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v11_conv_1_bias: Tensor[(72), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(72), float32], %v11_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v11_conv_2_bias: Tensor[(24), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(24), float32], %v11_qadd_zero_x1: Tensor[(1), int8], %v11_qadd_zero_x2: Tensor[(1), int8], %v11_qadd_scale_x1: Tensor[(1), float32], %v11_qadd_scale_x2: Tensor[(1), float32], %v11_qadd_zero_y: Tensor[(1), int8], %v11_qadd_scale_y: Tensor[(1), float32], %v12_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v12_conv_0_bias: Tensor[(144), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(144), float32], %v12_conv_1_weight: Tensor[(144, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(144), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(144), float32], %v12_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v13_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(96), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(96), float32], %v13_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(96), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(96), float32], %v13_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(96), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(96), float32], %v14_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v14_conv_1_bias: Tensor[(96), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(96), float32], %v14_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v14_conv_2_bias: Tensor[(32), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(32), float32], %v14_qadd_zero_x1: Tensor[(1), int8], %v14_qadd_zero_x2: Tensor[(1), int8], %v14_qadd_scale_x1: Tensor[(1), float32], %v14_qadd_scale_x2: Tensor[(1), float32], %v14_qadd_zero_y: Tensor[(1), int8], %v14_qadd_scale_y: Tensor[(1), float32], %v15_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v15_conv_0_bias: Tensor[(96), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(96), float32], %v15_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v15_conv_1_bias: Tensor[(96), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(96), float32], %v15_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v15_conv_2_bias: Tensor[(32), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(32), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v16_conv_0_bias: Tensor[(192), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(192), float32], %v16_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v16_conv_1_bias: Tensor[(192), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(192), float32], %v16_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v16_conv_2_bias: Tensor[(64), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(64), float32], %v17_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v17_conv_0_bias: Tensor[(384), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(384), float32], %v17_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v17_conv_1_bias: Tensor[(384), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(384), float32], %v17_conv_2_weight: Tensor[(64, 384, 1, 1), int8], %v17_conv_2_bias: Tensor[(64), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(64), float32], %v17_qadd_zero_x1: Tensor[(1), int8], %v17_qadd_zero_x2: Tensor[(1), int8], %v17_qadd_scale_x1: Tensor[(1), float32], %v17_qadd_scale_x2: Tensor[(1), float32], %v17_qadd_zero_y: Tensor[(1), int8], %v17_qadd_scale_y: Tensor[(1), float32], %v18_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v18_conv_0_bias: Tensor[(192), int32], %v18_conv_0_zero_x: Tensor[(1), int8], %v18_conv_0_zero_y: Tensor[(1), int8], %v18_conv_0_scale: Tensor[(192), float32], %v18_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v18_conv_1_bias: Tensor[(192), int32], %v18_conv_1_zero_x: Tensor[(1), int8], %v18_conv_1_zero_y: Tensor[(1), int8], %v18_conv_1_scale: Tensor[(192), float32], %v18_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v18_conv_2_bias: Tensor[(64), int32], %v18_conv_2_zero_x: Tensor[(1), int8], %v18_conv_2_zero_y: Tensor[(1), int8], %v18_conv_2_scale: Tensor[(64), float32], %v18_qadd_zero_x1: Tensor[(1), int8], %v18_qadd_zero_x2: Tensor[(1), int8], %v18_qadd_scale_x1: Tensor[(1), float32], %v18_qadd_scale_x2: Tensor[(1), float32], %v18_qadd_zero_y: Tensor[(1), int8], %v18_qadd_scale_y: Tensor[(1), float32], %v19_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v19_conv_0_bias: Tensor[(192), int32], %v19_conv_0_zero_x: Tensor[(1), int8], %v19_conv_0_zero_y: Tensor[(1), int8], %v19_conv_0_scale: Tensor[(192), float32], %v19_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v19_conv_1_bias: Tensor[(192), int32], %v19_conv_1_zero_x: Tensor[(1), int8], %v19_conv_1_zero_y: Tensor[(1), int8], %v19_conv_1_scale: Tensor[(192), float32], %v19_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v19_conv_2_bias: Tensor[(64), int32], %v19_conv_2_zero_x: Tensor[(1), int8], %v19_conv_2_zero_y: Tensor[(1), int8], %v19_conv_2_scale: Tensor[(64), float32], %v19_qadd_zero_x1: Tensor[(1), int8], %v19_qadd_zero_x2: Tensor[(1), int8], %v19_qadd_scale_x1: Tensor[(1), float32], %v19_qadd_scale_x2: Tensor[(1), float32], %v19_qadd_zero_y: Tensor[(1), int8], %v19_qadd_scale_y: Tensor[(1), float32], %v20_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v20_conv_0_bias: Tensor[(384), int32], %v20_conv_0_zero_x: Tensor[(1), int8], %v20_conv_0_zero_y: Tensor[(1), int8], %v20_conv_0_scale: Tensor[(384), float32], %v20_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v20_conv_1_bias: Tensor[(384), int32], %v20_conv_1_zero_x: Tensor[(1), int8], %v20_conv_1_zero_y: Tensor[(1), int8], %v20_conv_1_scale: Tensor[(384), float32], %v20_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v20_conv_2_bias: Tensor[(96), int32], %v20_conv_2_zero_x: Tensor[(1), int8], %v20_conv_2_zero_y: Tensor[(1), int8], %v20_conv_2_scale: Tensor[(96), float32], %v21_weight: Tensor[(10, 96, 1, 1), int8], %v21_bias: Tensor[(10), int32], %v21_zero_x: Tensor[(1), int8], %v21_zero_y: Tensor[(1), int8], %v21_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(384, 16, 1, 1), int8], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 16, 1, 1), int8], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 8, 1, 1), int8], Tensor[(64), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 8, 1, 1), int8]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[2, 2, 2, 2], groups=24) /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %48 = nn.mcuadd(%41, %47, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %78 = nn.mcuadd(%71, %77, %v11_qadd_zero_x1, %v11_qadd_zero_x2, %v11_qadd_scale_x1, %v11_qadd_scale_x2, %v11_qadd_zero_y, %v11_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %84 = nn.mcuconv2d(%83, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %100 = nn.mcuadd(%93, %99, %v14_qadd_zero_x1, %v14_qadd_zero_x2, %v14_qadd_scale_x1, %v14_qadd_scale_x2, %v14_qadd_zero_y, %v14_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %106 = nn.mcuconv2d(%105, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %108 = nn.mcuadd(%101, %107, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %114 = nn.mcuconv2d(%113, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %122 = nn.mcuadd(%115, %121, %v17_qadd_zero_x1, %v17_qadd_zero_x2, %v17_qadd_scale_x1, %v17_qadd_scale_x2, %v17_qadd_zero_y, %v17_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %123 = nn.mcutruncate(%122) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %124 = nn.mcuconv2d(%123, %v18_conv_0_weight, %v18_conv_0_bias, %v18_conv_0_zero_x, %v18_conv_0_zero_y, %v18_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %125 = nn.mcutruncate(%124) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %126 = nn.mcuconv2d(%125, %v18_conv_1_weight, %v18_conv_1_bias, %v18_conv_1_zero_x, %v18_conv_1_zero_y, %v18_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %127 = nn.mcutruncate(%126) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %128 = nn.mcuconv2d(%127, %v18_conv_2_weight, %v18_conv_2_bias, %v18_conv_2_zero_x, %v18_conv_2_zero_y, %v18_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %129 = nn.mcutruncate(%128) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %130 = nn.mcuadd(%123, %129, %v18_qadd_zero_x1, %v18_qadd_zero_x2, %v18_qadd_scale_x1, %v18_qadd_scale_x2, %v18_qadd_zero_y, %v18_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %131 = nn.mcutruncate(%130) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %132 = nn.mcuconv2d(%131, %v19_conv_0_weight, %v19_conv_0_bias, %v19_conv_0_zero_x, %v19_conv_0_zero_y, %v19_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %133 = nn.mcutruncate(%132) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %134 = nn.mcuconv2d(%133, %v19_conv_1_weight, %v19_conv_1_bias, %v19_conv_1_zero_x, %v19_conv_1_zero_y, %v19_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %135 = nn.mcutruncate(%134) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %136 = nn.mcuconv2d(%135, %v19_conv_2_weight, %v19_conv_2_bias, %v19_conv_2_zero_x, %v19_conv_2_zero_y, %v19_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %137 = nn.mcutruncate(%136) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %138 = nn.mcuadd(%131, %137, %v19_qadd_zero_x1, %v19_qadd_zero_x2, %v19_qadd_scale_x1, %v19_qadd_scale_x2, %v19_qadd_zero_y, %v19_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %139 = nn.mcutruncate(%138) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %140 = nn.mcuconv2d(%139, %v20_conv_0_weight, %v20_conv_0_bias, %v20_conv_0_zero_x, %v20_conv_0_zero_y, %v20_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %141 = nn.mcutruncate(%140) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %142 = nn.mcuconv2d(%141, %v20_conv_1_weight, %v20_conv_1_bias, %v20_conv_1_zero_x, %v20_conv_1_zero_y, %v20_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %143 = nn.mcutruncate(%142) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %144 = nn.mcuconv2d(%143, %v20_conv_2_weight, %v20_conv_2_bias, %v20_conv_2_zero_x, %v20_conv_2_zero_y, %v20_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %145 = nn.mcutruncate(%144) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %146 = mcumean(%145, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %147 = nn.mcuconv2d(%146, %v21_weight, %v21_bias, %v21_zero_x, %v21_zero_y, %v21_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %148 = nn.mcutruncate(%147) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %149 = reshape(%148, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %151 = nn.log_softmax(%150) /* ty=Tensor[(1, 10), float32] */;
  %152 = greater_equal(%147, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %153 = less_equal(%147, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %154 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %155 = negative(%154) /* ty=float32 */;
  %156 = multiply(%155, %label) /* ty=Tensor[(1, 10), float32] */;
  %157 = sum(%156, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %158 = exp(%151) /* ty=Tensor[(1, 10), float32] */;
  %159 = multiply(%157, %158) /* ty=Tensor[(1, 10), float32] */;
  %160 = subtract(%156, %159) /* ty=Tensor[(1, 10), float32] */;
  %161 = multiply(%152, %153) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %162 = reshape(%160, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %163 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %164 = where(%161, %162, %163) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %165 = cast(%164, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %166 = reshape(%146, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %167 = tile(%164, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %168 = cast(%166, dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %169 = reshape(%167, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 1, 1), float32] */;
  %170 = nn.conv2d(%168, %169, padding=[0, 0, 0, 0], groups=96, out_dtype="float32") /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %171 = reshape(%170, newshape=[1, 96, 10, 1, 1]) /* ty=Tensor[(1, 96, 10, 1, 1), float32] */;
  %172 = sum(%171, axis=[0]) /* ty=Tensor[(96, 10, 1, 1), float32] */;
  %173 = transpose(%172, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %174 = abs(%173) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %175 = max(%174, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %176 = divide(%175, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %177 = divide(%173, %176) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %178 = greater_equal(%144, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %179 = less_equal(%144, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %180 = cast(%v21_weight, dtype="float32") /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %181 = nn.conv2d_transpose(%164, %180, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %182 = abs(%181) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %183 = max(%182, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %184 = divide(%183, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %185 = divide(%181, %184) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %186 = cast(%185, dtype="int8") /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %188 = multiply(%187, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %189 = ones(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %190 = multiply(%178, %179) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %191 = multiply(%188, %189) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %192 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %193 = where(%190, %191, %192) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %194 = cast(%193, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %195 = greater_equal(%142, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %196 = less_equal(%142, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %197 = cast(%v20_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %198 = nn.conv2d_transpose(%193, %197, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %199 = abs(%198) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %200 = max(%199, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %201 = divide(%200, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %202 = divide(%198, %201) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %203 = multiply(%195, %196) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %204 = cast(%202, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %205 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %206 = where(%203, %204, %205) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %207 = cast(%206, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %208 = greater_equal(%140, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %209 = less_equal(%140, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %210 = nn.conv2d_transpose(%206, %v20_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %211 = abs(%210) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %212 = max(%211, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %213 = divide(%212, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %214 = divide(%210, %213) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %215 = multiply(%208, %209) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %216 = cast(%214, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %217 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %218 = where(%215, %216, %217) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %219 = cast(%218, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %220 = strided_slice(%139, begin=[0, 0, 0, 0], end=[1, 16, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 16, 4, 4), int8] */;
  %221 = tile(%218, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 6144, 4, 4), int8] */;
  %222 = reshape(%220, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 4, 4), int8] */;
  %223 = reshape(%221, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 4, 4), int8] */;
  %224 = nn.conv2d(%222, %223, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %225 = reshape(%224, newshape=[1, 16, 384, 1, 1]) /* ty=Tensor[(1, 16, 384, 1, 1), int32] */;
  %226 = sum(%225, axis=[0]) /* ty=Tensor[(16, 384, 1, 1), int32] */;
  %227 = transpose(%226, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 16, 1, 1), int32] */;
  %228 = abs(%227) /* ty=Tensor[(384, 16, 1, 1), int32] */;
  %229 = max(%228, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %230 = divide(%229, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %231 = divide(%227, %230) /* ty=Tensor[(384, 16, 1, 1), int32] */;
  %232 = greater_equal(%136, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %233 = less_equal(%136, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %234 = greater_equal(%138, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %235 = less_equal(%138, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %236 = nn.conv2d_transpose(%218, %v20_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %237 = abs(%236) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %238 = max(%237, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %239 = divide(%238, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %240 = divide(%236, %239) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %241 = multiply(%234, %235) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %242 = cast(%240, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %243 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %244 = where(%241, %242, %243) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %245 = cast(%244, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %246 = reshape(%v19_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %247 = divide(%245, %246) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %248 = reshape(%v19_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %249 = multiply(%247, %248) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %250 = multiply(%232, %233) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %251 = cast(%249, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %252 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %253 = where(%250, %251, %252) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %254 = cast(%253, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %255 = greater_equal(%134, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %256 = less_equal(%134, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %257 = nn.conv2d_transpose(%253, %v19_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %258 = abs(%257) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %259 = max(%258, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %260 = divide(%259, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %261 = divide(%257, %260) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %262 = multiply(%255, %256) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %263 = cast(%261, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %264 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %265 = where(%262, %263, %264) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %266 = cast(%265, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %267 = greater_equal(%132, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %268 = less_equal(%132, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %269 = nn.conv2d_transpose(%265, %v19_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %270 = abs(%269) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %271 = max(%270, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %272 = divide(%271, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %273 = divide(%269, %272) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %274 = multiply(%267, %268) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %275 = cast(%273, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %276 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %277 = where(%274, %275, %276) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %278 = cast(%277, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %279 = strided_slice(%131, begin=[0, 0, 0, 0], end=[1, 16, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 16, 4, 4), int8] */;
  %280 = tile(%277, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 3072, 4, 4), int8] */;
  %281 = reshape(%279, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 4, 4), int8] */;
  %282 = reshape(%280, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 4, 4), int8] */;
  %283 = nn.conv2d(%281, %282, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %284 = reshape(%283, newshape=[1, 16, 192, 1, 1]) /* ty=Tensor[(1, 16, 192, 1, 1), int32] */;
  %285 = sum(%284, axis=[0]) /* ty=Tensor[(16, 192, 1, 1), int32] */;
  %286 = transpose(%285, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 16, 1, 1), int32] */;
  %287 = abs(%286) /* ty=Tensor[(192, 16, 1, 1), int32] */;
  %288 = max(%287, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %289 = divide(%288, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %290 = divide(%286, %289) /* ty=Tensor[(192, 16, 1, 1), int32] */;
  %291 = greater_equal(%128, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %292 = less_equal(%128, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %293 = greater_equal(%130, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %294 = less_equal(%130, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %295 = nn.conv2d_transpose(%277, %v19_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %296 = abs(%295) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %297 = max(%296, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %298 = divide(%297, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %299 = divide(%295, %298) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %300 = multiply(%293, %294) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %301 = cast(%299, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %302 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %303 = where(%300, %301, %302) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %305 = reshape(%v18_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %306 = divide(%304, %305) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %307 = reshape(%v18_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %308 = multiply(%306, %307) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %309 = multiply(%291, %292) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %310 = cast(%308, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %311 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %312 = where(%309, %310, %311) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %313 = cast(%312, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %314 = greater_equal(%126, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %315 = less_equal(%126, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %316 = nn.conv2d_transpose(%312, %v18_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %317 = abs(%316) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %318 = max(%317, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %319 = divide(%318, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %320 = divide(%316, %319) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %321 = multiply(%314, %315) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %322 = cast(%320, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %323 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %324 = where(%321, %322, %323) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %325 = cast(%324, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %326 = greater_equal(%124, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %327 = less_equal(%124, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %328 = nn.conv2d_transpose(%324, %v18_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %329 = abs(%328) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %330 = max(%329, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %331 = divide(%330, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %332 = divide(%328, %331) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %333 = multiply(%326, %327) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %334 = cast(%332, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %335 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %336 = where(%333, %334, %335) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %337 = cast(%336, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %338 = strided_slice(%123, begin=[0, 0, 0, 0], end=[1, 8, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 8, 4, 4), int8] */;
  %339 = tile(%336, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 1536, 4, 4), int8] */;
  %340 = reshape(%338, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 4, 4), int8] */;
  %341 = reshape(%339, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 4, 4), int8] */;
  %342 = nn.conv2d(%340, %341, padding=[0, 0, 0, 0], groups=8, out_dtype="int32") /* ty=Tensor[(1, 1536, 1, 1), int32] */;
  %343 = reshape(%342, newshape=[1, 8, 192, 1, 1]) /* ty=Tensor[(1, 8, 192, 1, 1), int32] */;
  %344 = sum(%343, axis=[0]) /* ty=Tensor[(8, 192, 1, 1), int32] */;
  %345 = transpose(%344, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 8, 1, 1), int32] */;
  %346 = abs(%345) /* ty=Tensor[(192, 8, 1, 1), int32] */;
  %347 = max(%346, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %348 = divide(%347, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %349 = divide(%345, %348) /* ty=Tensor[(192, 8, 1, 1), int32] */;
  %350 = greater_equal(%120, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %351 = less_equal(%120, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %352 = greater_equal(%122, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %353 = less_equal(%122, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %354 = nn.conv2d_transpose(%336, %v18_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %355 = abs(%354) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %356 = max(%355, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %357 = divide(%356, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %358 = divide(%354, %357) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %359 = multiply(%352, %353) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %360 = cast(%358, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %361 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %362 = where(%359, %360, %361) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %363 = cast(%362, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %364 = reshape(%v17_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %365 = divide(%363, %364) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %366 = reshape(%v17_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %367 = multiply(%365, %366) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %368 = multiply(%350, %351) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %369 = cast(%367, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %370 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %371 = where(%368, %369, %370) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %372 = cast(%371, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %373 = greater_equal(%118, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %374 = less_equal(%118, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %375 = nn.conv2d_transpose(%371, %v17_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %376 = abs(%375) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %377 = max(%376, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %378 = divide(%377, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %379 = divide(%375, %378) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %380 = multiply(%373, %374) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %381 = cast(%379, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %382 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %383 = where(%380, %381, %382) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %384 = cast(%383, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %385 = greater_equal(%116, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %386 = less_equal(%116, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %387 = nn.conv2d_transpose(%383, %v17_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %388 = abs(%387) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %389 = max(%388, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %390 = divide(%389, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %391 = divide(%387, %390) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %392 = multiply(%385, %386) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %393 = cast(%391, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %394 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %395 = where(%392, %393, %394) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %396 = cast(%395, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %397 = greater_equal(%114, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %398 = less_equal(%114, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %399 = nn.conv2d_transpose(%395, %v17_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %400 = abs(%399) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %401 = max(%400, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %402 = divide(%401, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %403 = divide(%399, %402) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %404 = multiply(%397, %398) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %405 = cast(%403, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %406 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %407 = where(%404, %405, %406) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %408 = cast(%407, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %409 = greater_equal(%112, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %410 = less_equal(%112, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %411 = nn.conv2d_transpose(%407, %v16_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %412 = abs(%411) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %413 = max(%412, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %414 = divide(%413, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %415 = divide(%411, %414) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %416 = multiply(%409, %410) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %417 = cast(%415, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %418 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %419 = where(%416, %417, %418) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %420 = cast(%419, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %421 = greater_equal(%110, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %422 = less_equal(%110, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %423 = nn.conv2d_transpose(%419, %v16_conv_1_weight, channels=192, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %424 = abs(%423) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %425 = max(%424, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %426 = divide(%425, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %427 = divide(%423, %426) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %428 = multiply(%421, %422) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %429 = cast(%427, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %430 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %431 = where(%428, %429, %430) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %432 = cast(%431, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %433 = tile(%431, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %434 = reshape(%109, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %435 = reshape(%433, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %436 = nn.conv2d(%434, %435, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %437 = reshape(%436, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %438 = sum(%437, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %439 = transpose(%438, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %440 = abs(%439) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %441 = max(%440, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %442 = divide(%441, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %443 = divide(%439, %442) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %444 = greater_equal(%106, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %445 = less_equal(%106, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %446 = greater_equal(%108, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %447 = less_equal(%108, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %448 = nn.conv2d_transpose(%431, %v16_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %449 = abs(%448) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %450 = max(%449, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %451 = divide(%450, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %452 = divide(%448, %451) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %453 = multiply(%446, %447) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %454 = cast(%452, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %455 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %456 = where(%453, %454, %455) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %458 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %459 = divide(%457, %458) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %460 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %461 = multiply(%459, %460) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %462 = multiply(%444, %445) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %463 = cast(%461, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %464 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %465 = where(%462, %463, %464) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %466 = cast(%465, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %467 = greater_equal(%104, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %468 = less_equal(%104, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %469 = nn.conv2d_transpose(%465, %v15_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %470 = abs(%469) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %471 = max(%470, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %472 = divide(%471, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %473 = divide(%469, %472) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %474 = multiply(%467, %468) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %475 = cast(%473, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %476 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %477 = where(%474, %475, %476) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %478 = cast(%477, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %479 = greater_equal(%102, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %480 = less_equal(%102, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %481 = nn.conv2d_transpose(%477, %v15_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %482 = abs(%481) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %483 = max(%482, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %484 = divide(%483, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %485 = divide(%481, %484) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %486 = multiply(%479, %480) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %487 = cast(%485, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %488 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %489 = where(%486, %487, %488) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %490 = cast(%489, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %491 = tile(%489, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %492 = reshape(%101, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %493 = reshape(%491, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %494 = nn.conv2d(%492, %493, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %495 = reshape(%494, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %496 = sum(%495, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %497 = transpose(%496, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %498 = abs(%497) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %499 = max(%498, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %500 = divide(%499, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %501 = divide(%497, %500) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %502 = greater_equal(%98, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %503 = less_equal(%98, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %504 = greater_equal(%100, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %505 = less_equal(%100, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %506 = nn.conv2d_transpose(%489, %v15_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %507 = abs(%506) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %508 = max(%507, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %509 = divide(%508, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %510 = divide(%506, %509) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %511 = multiply(%504, %505) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %512 = cast(%510, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %513 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %514 = where(%511, %512, %513) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %516 = reshape(%v14_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %517 = divide(%515, %516) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %518 = reshape(%v14_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %519 = multiply(%517, %518) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %520 = multiply(%502, %503) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %521 = cast(%519, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %522 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %523 = where(%520, %521, %522) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %524 = cast(%523, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %525 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %526 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %527 = nn.conv2d_transpose(%523, %v14_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %528 = abs(%527) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %529 = max(%528, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %530 = divide(%529, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %531 = divide(%527, %530) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %532 = multiply(%525, %526) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %533 = cast(%531, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %534 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %535 = where(%532, %533, %534) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %536 = cast(%535, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %537 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %538 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %539 = nn.conv2d_transpose(%535, %v14_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %540 = abs(%539) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %541 = max(%540, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %542 = divide(%541, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %543 = divide(%539, %542) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %544 = multiply(%537, %538) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %545 = cast(%543, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %546 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %547 = where(%544, %545, %546) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %548 = cast(%547, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %549 = strided_slice(%93, begin=[0, 0, 0, 0], end=[1, 8, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 8, 8, 8), int8] */;
  %550 = tile(%547, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 768, 8, 8), int8] */;
  %551 = reshape(%549, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 8, 8), int8] */;
  %552 = reshape(%550, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 8, 8), int8] */;
  %553 = nn.conv2d(%551, %552, padding=[0, 0, 0, 0], groups=8, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %554 = reshape(%553, newshape=[1, 8, 96, 1, 1]) /* ty=Tensor[(1, 8, 96, 1, 1), int32] */;
  %555 = sum(%554, axis=[0]) /* ty=Tensor[(8, 96, 1, 1), int32] */;
  %556 = transpose(%555, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 8, 1, 1), int32] */;
  %557 = abs(%556) /* ty=Tensor[(96, 8, 1, 1), int32] */;
  %558 = max(%557, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %559 = divide(%558, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %560 = divide(%556, %559) /* ty=Tensor[(96, 8, 1, 1), int32] */;
  %561 = nn.cross_entropy_with_logits(%151, %label) /* ty=float32 */;
  %562 = sum(%165, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %563 = cast(%177, dtype="int8") /* ty=Tensor[(10, 96, 1, 1), int8] */;
  %564 = sum(%194, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %565 = sum(%207, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %566 = sum(%219, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %567 = cast(%231, dtype="int8") /* ty=Tensor[(384, 16, 1, 1), int8] */;
  %568 = sum(%254, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %569 = sum(%266, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %570 = sum(%278, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %571 = cast(%290, dtype="int8") /* ty=Tensor[(192, 16, 1, 1), int8] */;
  %572 = sum(%313, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %573 = sum(%325, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %574 = sum(%337, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %575 = cast(%349, dtype="int8") /* ty=Tensor[(192, 8, 1, 1), int8] */;
  %576 = sum(%372, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %577 = sum(%384, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %578 = sum(%396, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %579 = sum(%408, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %580 = sum(%420, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %581 = sum(%432, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %582 = cast(%443, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %583 = sum(%466, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %584 = sum(%478, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %585 = sum(%490, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %586 = cast(%501, dtype="int8") /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %587 = sum(%524, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %588 = sum(%536, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %589 = sum(%548, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %590 = cast(%560, dtype="int8") /* ty=Tensor[(96, 8, 1, 1), int8] */;
  (%561, %562, %563, %564, %565, %566, %567, %568, %569, %570, %571, %572, %573, %574, %575, %576, %577, %578, %579, %580, %581, %582, %583, %584, %585, %586, %587, %588, %589, %590)
}

