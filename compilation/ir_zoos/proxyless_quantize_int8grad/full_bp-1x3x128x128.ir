def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(24, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(24), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(24), float32], %v2_conv_1_weight: Tensor[(24, 1, 5, 5), int8], %v2_conv_1_bias: Tensor[(24), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(24), float32], %v2_conv_2_weight: Tensor[(16, 24, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(48), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(48), float32], %v5_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(48), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(48), float32], %v5_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(48), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(48), float32], %v6_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v6_conv_1_bias: Tensor[(48), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(48), float32], %v6_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(48), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(48), float32], %v7_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v7_conv_1_bias: Tensor[(48), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(48), float32], %v7_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v7_conv_2_bias: Tensor[(16), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(16), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v8_conv_0_bias: Tensor[(96), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(96), float32], %v8_conv_1_weight: Tensor[(96, 1, 7, 7), int8], %v8_conv_1_bias: Tensor[(96), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(96), float32], %v8_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v9_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(72), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(72), float32], %v9_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v9_conv_1_bias: Tensor[(72), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(72), float32], %v9_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(72), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(72), float32], %v10_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v10_conv_1_bias: Tensor[(72), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(72), float32], %v10_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(72), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(72), float32], %v11_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v11_conv_1_bias: Tensor[(72), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(72), float32], %v11_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v11_conv_2_bias: Tensor[(24), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(24), float32], %v11_qadd_zero_x1: Tensor[(1), int8], %v11_qadd_zero_x2: Tensor[(1), int8], %v11_qadd_scale_x1: Tensor[(1), float32], %v11_qadd_scale_x2: Tensor[(1), float32], %v11_qadd_zero_y: Tensor[(1), int8], %v11_qadd_scale_y: Tensor[(1), float32], %v12_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v12_conv_0_bias: Tensor[(144), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(144), float32], %v12_conv_1_weight: Tensor[(144, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(144), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(144), float32], %v12_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v13_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(96), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(96), float32], %v13_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(96), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(96), float32], %v13_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(96), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(96), float32], %v14_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v14_conv_1_bias: Tensor[(96), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(96), float32], %v14_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v14_conv_2_bias: Tensor[(32), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(32), float32], %v14_qadd_zero_x1: Tensor[(1), int8], %v14_qadd_zero_x2: Tensor[(1), int8], %v14_qadd_scale_x1: Tensor[(1), float32], %v14_qadd_scale_x2: Tensor[(1), float32], %v14_qadd_zero_y: Tensor[(1), int8], %v14_qadd_scale_y: Tensor[(1), float32], %v15_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v15_conv_0_bias: Tensor[(96), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(96), float32], %v15_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v15_conv_1_bias: Tensor[(96), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(96), float32], %v15_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v15_conv_2_bias: Tensor[(32), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(32), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v16_conv_0_bias: Tensor[(192), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(192), float32], %v16_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v16_conv_1_bias: Tensor[(192), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(192), float32], %v16_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v16_conv_2_bias: Tensor[(64), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(64), float32], %v17_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v17_conv_0_bias: Tensor[(384), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(384), float32], %v17_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v17_conv_1_bias: Tensor[(384), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(384), float32], %v17_conv_2_weight: Tensor[(64, 384, 1, 1), int8], %v17_conv_2_bias: Tensor[(64), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(64), float32], %v17_qadd_zero_x1: Tensor[(1), int8], %v17_qadd_zero_x2: Tensor[(1), int8], %v17_qadd_scale_x1: Tensor[(1), float32], %v17_qadd_scale_x2: Tensor[(1), float32], %v17_qadd_zero_y: Tensor[(1), int8], %v17_qadd_scale_y: Tensor[(1), float32], %v18_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v18_conv_0_bias: Tensor[(192), int32], %v18_conv_0_zero_x: Tensor[(1), int8], %v18_conv_0_zero_y: Tensor[(1), int8], %v18_conv_0_scale: Tensor[(192), float32], %v18_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v18_conv_1_bias: Tensor[(192), int32], %v18_conv_1_zero_x: Tensor[(1), int8], %v18_conv_1_zero_y: Tensor[(1), int8], %v18_conv_1_scale: Tensor[(192), float32], %v18_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v18_conv_2_bias: Tensor[(64), int32], %v18_conv_2_zero_x: Tensor[(1), int8], %v18_conv_2_zero_y: Tensor[(1), int8], %v18_conv_2_scale: Tensor[(64), float32], %v18_qadd_zero_x1: Tensor[(1), int8], %v18_qadd_zero_x2: Tensor[(1), int8], %v18_qadd_scale_x1: Tensor[(1), float32], %v18_qadd_scale_x2: Tensor[(1), float32], %v18_qadd_zero_y: Tensor[(1), int8], %v18_qadd_scale_y: Tensor[(1), float32], %v19_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v19_conv_0_bias: Tensor[(192), int32], %v19_conv_0_zero_x: Tensor[(1), int8], %v19_conv_0_zero_y: Tensor[(1), int8], %v19_conv_0_scale: Tensor[(192), float32], %v19_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v19_conv_1_bias: Tensor[(192), int32], %v19_conv_1_zero_x: Tensor[(1), int8], %v19_conv_1_zero_y: Tensor[(1), int8], %v19_conv_1_scale: Tensor[(192), float32], %v19_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v19_conv_2_bias: Tensor[(64), int32], %v19_conv_2_zero_x: Tensor[(1), int8], %v19_conv_2_zero_y: Tensor[(1), int8], %v19_conv_2_scale: Tensor[(64), float32], %v19_qadd_zero_x1: Tensor[(1), int8], %v19_qadd_zero_x2: Tensor[(1), int8], %v19_qadd_scale_x1: Tensor[(1), float32], %v19_qadd_scale_x2: Tensor[(1), float32], %v19_qadd_zero_y: Tensor[(1), int8], %v19_qadd_scale_y: Tensor[(1), float32], %v20_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v20_conv_0_bias: Tensor[(384), int32], %v20_conv_0_zero_x: Tensor[(1), int8], %v20_conv_0_zero_y: Tensor[(1), int8], %v20_conv_0_scale: Tensor[(384), float32], %v20_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v20_conv_1_bias: Tensor[(384), int32], %v20_conv_1_zero_x: Tensor[(1), int8], %v20_conv_1_zero_y: Tensor[(1), int8], %v20_conv_1_scale: Tensor[(384), float32], %v20_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v20_conv_2_bias: Tensor[(96), int32], %v20_conv_2_zero_x: Tensor[(1), int8], %v20_conv_2_zero_y: Tensor[(1), int8], %v20_conv_2_scale: Tensor[(96), float32], %v21_weight: Tensor[(10, 96, 1, 1), int8], %v21_bias: Tensor[(10), int32], %v21_zero_x: Tensor[(1), int8], %v21_zero_y: Tensor[(1), int8], %v21_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 384, 1, 1), int8], Tensor[(384), int32], Tensor[(384, 1, 7, 7), int8], Tensor[(384), int32], Tensor[(384, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(64, 192, 1, 1), int8], Tensor[(192), int32], Tensor[(192, 1, 7, 7), int8], Tensor[(192), int32], Tensor[(192, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(64, 192, 1, 1), int8], Tensor[(192), int32], Tensor[(192, 1, 7, 7), int8], Tensor[(192), int32], Tensor[(192, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(64, 384, 1, 1), int8], Tensor[(384), int32], Tensor[(384, 1, 7, 7), int8], Tensor[(384), int32], Tensor[(384, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(64, 192, 1, 1), int8], Tensor[(192), int32], Tensor[(192, 1, 7, 7), int8], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(32, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 1, 5, 5), int8], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(32, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 1, 5, 5), int8], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(32, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 1, 5, 5), int8], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(32, 144, 1, 1), int8], Tensor[(144), int32], Tensor[(144, 1, 5, 5), int8], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 72, 1, 1), int8], Tensor[(72), int32], Tensor[(72, 1, 5, 5), int8], Tensor[(72), int32], Tensor[(72, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 72, 1, 1), int8], Tensor[(72), int32], Tensor[(72, 1, 5, 5), int8], Tensor[(72), int32], Tensor[(72, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 72, 1, 1), int8], Tensor[(72), int32], Tensor[(72, 1, 5, 5), int8], Tensor[(72), int32], Tensor[(72, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 1, 7, 7), int8], Tensor[(96), int32], Tensor[(96, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 1, 5, 5), int8], Tensor[(48), int32], Tensor[(48, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 1, 5, 5), int8], Tensor[(48), int32], Tensor[(48, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 1, 3, 3), int8], Tensor[(48), int32], Tensor[(48, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 1, 7, 7), int8], Tensor[(48), int32], Tensor[(48, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 1, 3, 3), int8], Tensor[(48), int32], Tensor[(48, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 1, 5, 5), int8], Tensor[(24), int32], Tensor[(24, 8, 1, 1), int8], Tensor[(8), int32], Tensor[(8, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 1, 3, 3), int8], Tensor[(16), int32], Tensor[(16, 3, 3, 3), int8]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[2, 2, 2, 2], groups=24) /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %48 = nn.mcuadd(%41, %47, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %78 = nn.mcuadd(%71, %77, %v11_qadd_zero_x1, %v11_qadd_zero_x2, %v11_qadd_scale_x1, %v11_qadd_scale_x2, %v11_qadd_zero_y, %v11_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %84 = nn.mcuconv2d(%83, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %100 = nn.mcuadd(%93, %99, %v14_qadd_zero_x1, %v14_qadd_zero_x2, %v14_qadd_scale_x1, %v14_qadd_scale_x2, %v14_qadd_zero_y, %v14_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %106 = nn.mcuconv2d(%105, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %108 = nn.mcuadd(%101, %107, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %114 = nn.mcuconv2d(%113, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %122 = nn.mcuadd(%115, %121, %v17_qadd_zero_x1, %v17_qadd_zero_x2, %v17_qadd_scale_x1, %v17_qadd_scale_x2, %v17_qadd_zero_y, %v17_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %123 = nn.mcutruncate(%122) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %124 = nn.mcuconv2d(%123, %v18_conv_0_weight, %v18_conv_0_bias, %v18_conv_0_zero_x, %v18_conv_0_zero_y, %v18_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %125 = nn.mcutruncate(%124) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %126 = nn.mcuconv2d(%125, %v18_conv_1_weight, %v18_conv_1_bias, %v18_conv_1_zero_x, %v18_conv_1_zero_y, %v18_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %127 = nn.mcutruncate(%126) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %128 = nn.mcuconv2d(%127, %v18_conv_2_weight, %v18_conv_2_bias, %v18_conv_2_zero_x, %v18_conv_2_zero_y, %v18_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %129 = nn.mcutruncate(%128) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %130 = nn.mcuadd(%123, %129, %v18_qadd_zero_x1, %v18_qadd_zero_x2, %v18_qadd_scale_x1, %v18_qadd_scale_x2, %v18_qadd_zero_y, %v18_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %131 = nn.mcutruncate(%130) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %132 = nn.mcuconv2d(%131, %v19_conv_0_weight, %v19_conv_0_bias, %v19_conv_0_zero_x, %v19_conv_0_zero_y, %v19_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %133 = nn.mcutruncate(%132) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %134 = nn.mcuconv2d(%133, %v19_conv_1_weight, %v19_conv_1_bias, %v19_conv_1_zero_x, %v19_conv_1_zero_y, %v19_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %135 = nn.mcutruncate(%134) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %136 = nn.mcuconv2d(%135, %v19_conv_2_weight, %v19_conv_2_bias, %v19_conv_2_zero_x, %v19_conv_2_zero_y, %v19_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %137 = nn.mcutruncate(%136) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %138 = nn.mcuadd(%131, %137, %v19_qadd_zero_x1, %v19_qadd_zero_x2, %v19_qadd_scale_x1, %v19_qadd_scale_x2, %v19_qadd_zero_y, %v19_qadd_scale_y, axis=0) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %139 = nn.mcutruncate(%138) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %140 = nn.mcuconv2d(%139, %v20_conv_0_weight, %v20_conv_0_bias, %v20_conv_0_zero_x, %v20_conv_0_zero_y, %v20_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %141 = nn.mcutruncate(%140) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %142 = nn.mcuconv2d(%141, %v20_conv_1_weight, %v20_conv_1_bias, %v20_conv_1_zero_x, %v20_conv_1_zero_y, %v20_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %143 = nn.mcutruncate(%142) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %144 = nn.mcuconv2d(%143, %v20_conv_2_weight, %v20_conv_2_bias, %v20_conv_2_zero_x, %v20_conv_2_zero_y, %v20_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %145 = nn.mcutruncate(%144) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %146 = mcumean(%145, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %147 = nn.mcuconv2d(%146, %v21_weight, %v21_bias, %v21_zero_x, %v21_zero_y, %v21_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %148 = nn.mcutruncate(%147) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %149 = reshape(%148, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %151 = nn.log_softmax(%150) /* ty=Tensor[(1, 10), float32] */;
  %152 = greater_equal(%147, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %153 = less_equal(%147, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %154 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %155 = negative(%154) /* ty=float32 */;
  %156 = multiply(%155, %label) /* ty=Tensor[(1, 10), float32] */;
  %157 = sum(%156, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %158 = exp(%151) /* ty=Tensor[(1, 10), float32] */;
  %159 = multiply(%157, %158) /* ty=Tensor[(1, 10), float32] */;
  %160 = subtract(%156, %159) /* ty=Tensor[(1, 10), float32] */;
  %161 = multiply(%152, %153) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %162 = reshape(%160, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %163 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %164 = where(%161, %162, %163) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %165 = cast(%164, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %166 = reshape(%146, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %167 = tile(%164, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %168 = cast(%166, dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %169 = reshape(%167, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(960, 1, 1, 1), float32] */;
  %170 = nn.conv2d(%168, %169, padding=[0, 0, 0, 0], groups=96, out_dtype="float32") /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %171 = reshape(%170, newshape=[1, 96, 10, 1, 1]) /* ty=Tensor[(1, 96, 10, 1, 1), float32] */;
  %172 = sum(%171, axis=[0]) /* ty=Tensor[(96, 10, 1, 1), float32] */;
  %173 = transpose(%172, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %174 = abs(%173) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %175 = max(%174, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %176 = divide(%175, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %177 = divide(%173, %176) /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %178 = greater_equal(%144, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %179 = less_equal(%144, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %180 = cast(%v21_weight, dtype="float32") /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %181 = nn.conv2d_transpose(%164, %180, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %182 = abs(%181) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %183 = max(%182, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %184 = divide(%183, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %185 = divide(%181, %184) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %186 = cast(%185, dtype="int8") /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %188 = multiply(%187, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %189 = ones(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %190 = multiply(%178, %179) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %191 = multiply(%188, %189) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %192 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %193 = where(%190, %191, %192) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %194 = cast(%193, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %195 = reshape(%143, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %196 = tile(%193, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 36864, 4, 4), float32] */;
  %197 = cast(%195, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %198 = reshape(%196, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 4, 4), float32] */;
  %199 = nn.conv2d(%197, %198, padding=[0, 0, 0, 0], groups=384, out_dtype="float32") /* ty=Tensor[(1, 36864, 1, 1), float32] */;
  %200 = reshape(%199, newshape=[1, 384, 96, 1, 1]) /* ty=Tensor[(1, 384, 96, 1, 1), float32] */;
  %201 = sum(%200, axis=[0]) /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %202 = transpose(%201, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %203 = abs(%202) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %204 = max(%203, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), float32] */;
  %205 = divide(%204, 127f /* ty=float32 */) /* ty=Tensor[(96, 1, 1, 1), float32] */;
  %206 = divide(%202, %205) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %207 = greater_equal(%142, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %208 = less_equal(%142, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %209 = cast(%v20_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %210 = nn.conv2d_transpose(%193, %209, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %211 = abs(%210) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %212 = max(%211, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %213 = divide(%212, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %214 = divide(%210, %213) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %215 = multiply(%207, %208) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %216 = cast(%214, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %217 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %218 = where(%215, %216, %217) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %219 = cast(%218, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %220 = tile(%218, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %221 = reshape(%141, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %222 = reshape(%220, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 4, 4), int8] */;
  %223 = nn.conv2d(%221, %222, padding=[3, 3, 3, 3], groups=384, out_dtype="int32") /* ty=Tensor[(1, 384, 7, 7), int32] */;
  %224 = reshape(%223, newshape=[1, 1, 384, 7, 7]) /* ty=Tensor[(1, 1, 384, 7, 7), int32] */;
  %225 = sum(%224, axis=[0]) /* ty=Tensor[(1, 384, 7, 7), int32] */;
  %226 = transpose(%225, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 7, 7), int32] */;
  %227 = abs(%226) /* ty=Tensor[(384, 1, 7, 7), int32] */;
  %228 = max(%227, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 7, 7), int32] */;
  %229 = divide(%228, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 7, 7), int32] */;
  %230 = divide(%226, %229) /* ty=Tensor[(384, 1, 7, 7), int32] */;
  %231 = greater_equal(%140, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %232 = less_equal(%140, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %233 = nn.conv2d_transpose(%218, %v20_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %234 = abs(%233) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %235 = max(%234, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %236 = divide(%235, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %237 = divide(%233, %236) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %238 = multiply(%231, %232) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %239 = cast(%237, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %240 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %241 = where(%238, %239, %240) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %242 = cast(%241, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %243 = tile(%241, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 4, 4), int8] */;
  %244 = reshape(%139, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %245 = reshape(%243, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 4, 4), int8] */;
  %246 = nn.conv2d(%244, %245, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* ty=Tensor[(1, 24576, 1, 1), int32] */;
  %247 = reshape(%246, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), int32] */;
  %248 = sum(%247, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), int32] */;
  %249 = transpose(%248, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %250 = abs(%249) /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %251 = max(%250, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %252 = divide(%251, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %253 = divide(%249, %252) /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %254 = greater_equal(%136, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %255 = less_equal(%136, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %256 = greater_equal(%138, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %257 = less_equal(%138, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %258 = nn.conv2d_transpose(%241, %v20_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %259 = abs(%258) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %260 = max(%259, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %261 = divide(%260, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %262 = divide(%258, %261) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %263 = multiply(%256, %257) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %264 = cast(%262, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %265 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %266 = where(%263, %264, %265) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %267 = cast(%266, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %268 = reshape(%v19_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %269 = divide(%267, %268) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %270 = reshape(%v19_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %271 = multiply(%269, %270) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %272 = multiply(%254, %255) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %273 = cast(%271, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %274 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %275 = where(%272, %273, %274) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %276 = cast(%275, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %277 = tile(%275, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), int8] */;
  %278 = reshape(%135, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %279 = reshape(%277, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), int8] */;
  %280 = nn.conv2d(%278, %279, padding=[0, 0, 0, 0], groups=192, out_dtype="int32") /* ty=Tensor[(1, 12288, 1, 1), int32] */;
  %281 = reshape(%280, newshape=[1, 192, 64, 1, 1]) /* ty=Tensor[(1, 192, 64, 1, 1), int32] */;
  %282 = sum(%281, axis=[0]) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %283 = transpose(%282, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %284 = abs(%283) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %285 = max(%284, axis=[1], keepdims=True) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %286 = divide(%285, 127 /* ty=int32 */) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %287 = divide(%283, %286) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %288 = greater_equal(%134, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %289 = less_equal(%134, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %290 = nn.conv2d_transpose(%275, %v19_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %291 = abs(%290) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %292 = max(%291, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %293 = divide(%292, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %294 = divide(%290, %293) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %295 = multiply(%288, %289) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %296 = cast(%294, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %297 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %298 = where(%295, %296, %297) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %299 = cast(%298, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %300 = tile(%298, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %301 = reshape(%133, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %302 = reshape(%300, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 4, 4), int8] */;
  %303 = nn.conv2d(%301, %302, padding=[3, 3, 3, 3], groups=192, out_dtype="int32") /* ty=Tensor[(1, 192, 7, 7), int32] */;
  %304 = reshape(%303, newshape=[1, 1, 192, 7, 7]) /* ty=Tensor[(1, 1, 192, 7, 7), int32] */;
  %305 = sum(%304, axis=[0]) /* ty=Tensor[(1, 192, 7, 7), int32] */;
  %306 = transpose(%305, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %307 = abs(%306) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %308 = max(%307, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %309 = divide(%308, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %310 = divide(%306, %309) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %311 = greater_equal(%132, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %312 = less_equal(%132, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %313 = nn.conv2d_transpose(%298, %v19_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %314 = abs(%313) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %315 = max(%314, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %316 = divide(%315, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %317 = divide(%313, %316) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %318 = multiply(%311, %312) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %319 = cast(%317, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %320 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %321 = where(%318, %319, %320) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %322 = cast(%321, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %323 = tile(%321, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), int8] */;
  %324 = reshape(%131, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %325 = reshape(%323, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), int8] */;
  %326 = nn.conv2d(%324, %325, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* ty=Tensor[(1, 12288, 1, 1), int32] */;
  %327 = reshape(%326, newshape=[1, 64, 192, 1, 1]) /* ty=Tensor[(1, 64, 192, 1, 1), int32] */;
  %328 = sum(%327, axis=[0]) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %329 = transpose(%328, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %330 = abs(%329) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %331 = max(%330, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %332 = divide(%331, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %333 = divide(%329, %332) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %334 = greater_equal(%128, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %335 = less_equal(%128, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %336 = greater_equal(%130, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %337 = less_equal(%130, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %338 = nn.conv2d_transpose(%321, %v19_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %339 = abs(%338) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %340 = max(%339, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %341 = divide(%340, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %342 = divide(%338, %341) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %343 = multiply(%336, %337) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %344 = cast(%342, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %345 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %346 = where(%343, %344, %345) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %347 = cast(%346, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %348 = reshape(%v18_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %349 = divide(%347, %348) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %350 = reshape(%v18_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %351 = multiply(%349, %350) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %352 = multiply(%334, %335) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %353 = cast(%351, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %354 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %355 = where(%352, %353, %354) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %356 = cast(%355, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %357 = tile(%355, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), int8] */;
  %358 = reshape(%127, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %359 = reshape(%357, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), int8] */;
  %360 = nn.conv2d(%358, %359, padding=[0, 0, 0, 0], groups=192, out_dtype="int32") /* ty=Tensor[(1, 12288, 1, 1), int32] */;
  %361 = reshape(%360, newshape=[1, 192, 64, 1, 1]) /* ty=Tensor[(1, 192, 64, 1, 1), int32] */;
  %362 = sum(%361, axis=[0]) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %363 = transpose(%362, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %364 = abs(%363) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %365 = max(%364, axis=[1], keepdims=True) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %366 = divide(%365, 127 /* ty=int32 */) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %367 = divide(%363, %366) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %368 = greater_equal(%126, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %369 = less_equal(%126, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %370 = nn.conv2d_transpose(%355, %v18_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %371 = abs(%370) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %372 = max(%371, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %373 = divide(%372, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %374 = divide(%370, %373) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %375 = multiply(%368, %369) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %376 = cast(%374, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %377 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %378 = where(%375, %376, %377) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %379 = cast(%378, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %380 = tile(%378, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %381 = reshape(%125, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %382 = reshape(%380, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 4, 4), int8] */;
  %383 = nn.conv2d(%381, %382, padding=[3, 3, 3, 3], groups=192, out_dtype="int32") /* ty=Tensor[(1, 192, 7, 7), int32] */;
  %384 = reshape(%383, newshape=[1, 1, 192, 7, 7]) /* ty=Tensor[(1, 1, 192, 7, 7), int32] */;
  %385 = sum(%384, axis=[0]) /* ty=Tensor[(1, 192, 7, 7), int32] */;
  %386 = transpose(%385, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %387 = abs(%386) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %388 = max(%387, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %389 = divide(%388, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %390 = divide(%386, %389) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %391 = greater_equal(%124, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %392 = less_equal(%124, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %393 = nn.conv2d_transpose(%378, %v18_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %394 = abs(%393) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %395 = max(%394, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %396 = divide(%395, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %397 = divide(%393, %396) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %398 = multiply(%391, %392) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %399 = cast(%397, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %400 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %401 = where(%398, %399, %400) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %402 = cast(%401, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %403 = tile(%401, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), int8] */;
  %404 = reshape(%123, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %405 = reshape(%403, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), int8] */;
  %406 = nn.conv2d(%404, %405, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* ty=Tensor[(1, 12288, 1, 1), int32] */;
  %407 = reshape(%406, newshape=[1, 64, 192, 1, 1]) /* ty=Tensor[(1, 64, 192, 1, 1), int32] */;
  %408 = sum(%407, axis=[0]) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %409 = transpose(%408, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %410 = abs(%409) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %411 = max(%410, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %412 = divide(%411, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %413 = divide(%409, %412) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %414 = greater_equal(%120, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %415 = less_equal(%120, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %416 = greater_equal(%122, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %417 = less_equal(%122, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %418 = nn.conv2d_transpose(%401, %v18_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %419 = abs(%418) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %420 = max(%419, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %421 = divide(%420, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %422 = divide(%418, %421) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %423 = multiply(%416, %417) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %424 = cast(%422, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %425 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %426 = where(%423, %424, %425) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %427 = cast(%426, dtype="float32") /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %428 = reshape(%v17_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %429 = divide(%427, %428) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %430 = reshape(%v17_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %431 = multiply(%429, %430) /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %432 = multiply(%414, %415) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %433 = cast(%431, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %434 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %435 = where(%432, %433, %434) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %436 = cast(%435, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %437 = tile(%435, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 24576, 4, 4), int8] */;
  %438 = reshape(%119, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %439 = reshape(%437, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 4, 4), int8] */;
  %440 = nn.conv2d(%438, %439, padding=[0, 0, 0, 0], groups=384, out_dtype="int32") /* ty=Tensor[(1, 24576, 1, 1), int32] */;
  %441 = reshape(%440, newshape=[1, 384, 64, 1, 1]) /* ty=Tensor[(1, 384, 64, 1, 1), int32] */;
  %442 = sum(%441, axis=[0]) /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %443 = transpose(%442, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 384, 1, 1), int32] */;
  %444 = abs(%443) /* ty=Tensor[(64, 384, 1, 1), int32] */;
  %445 = max(%444, axis=[1], keepdims=True) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %446 = divide(%445, 127 /* ty=int32 */) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %447 = divide(%443, %446) /* ty=Tensor[(64, 384, 1, 1), int32] */;
  %448 = greater_equal(%118, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %449 = less_equal(%118, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %450 = nn.conv2d_transpose(%435, %v17_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %451 = abs(%450) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %452 = max(%451, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %453 = divide(%452, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %454 = divide(%450, %453) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %455 = multiply(%448, %449) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %456 = cast(%454, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %457 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %458 = where(%455, %456, %457) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %459 = cast(%458, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %460 = tile(%458, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %461 = reshape(%117, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %462 = reshape(%460, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 4, 4), int8] */;
  %463 = nn.conv2d(%461, %462, padding=[3, 3, 3, 3], groups=384, out_dtype="int32") /* ty=Tensor[(1, 384, 7, 7), int32] */;
  %464 = reshape(%463, newshape=[1, 1, 384, 7, 7]) /* ty=Tensor[(1, 1, 384, 7, 7), int32] */;
  %465 = sum(%464, axis=[0]) /* ty=Tensor[(1, 384, 7, 7), int32] */;
  %466 = transpose(%465, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 7, 7), int32] */;
  %467 = abs(%466) /* ty=Tensor[(384, 1, 7, 7), int32] */;
  %468 = max(%467, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 7, 7), int32] */;
  %469 = divide(%468, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 7, 7), int32] */;
  %470 = divide(%466, %469) /* ty=Tensor[(384, 1, 7, 7), int32] */;
  %471 = greater_equal(%116, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %472 = less_equal(%116, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %473 = nn.conv2d_transpose(%458, %v17_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %474 = abs(%473) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %475 = max(%474, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %476 = divide(%475, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %477 = divide(%473, %476) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %478 = multiply(%471, %472) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %479 = cast(%477, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %480 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %481 = where(%478, %479, %480) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %482 = cast(%481, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %483 = tile(%481, reps=[1, 64, 1, 1]) /* ty=Tensor[(1, 24576, 4, 4), int8] */;
  %484 = reshape(%115, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %485 = reshape(%483, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24576, 1, 4, 4), int8] */;
  %486 = nn.conv2d(%484, %485, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* ty=Tensor[(1, 24576, 1, 1), int32] */;
  %487 = reshape(%486, newshape=[1, 64, 384, 1, 1]) /* ty=Tensor[(1, 64, 384, 1, 1), int32] */;
  %488 = sum(%487, axis=[0]) /* ty=Tensor[(64, 384, 1, 1), int32] */;
  %489 = transpose(%488, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %490 = abs(%489) /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %491 = max(%490, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %492 = divide(%491, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %493 = divide(%489, %492) /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %494 = greater_equal(%114, -128 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %495 = less_equal(%114, 127 /* ty=int32 */) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %496 = nn.conv2d_transpose(%481, %v17_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %497 = abs(%496) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %498 = max(%497, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %499 = divide(%498, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %500 = divide(%496, %499) /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %501 = multiply(%494, %495) /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %502 = cast(%500, dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %503 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %504 = where(%501, %502, %503) /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %505 = cast(%504, dtype="int32") /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %506 = tile(%504, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 12288, 4, 4), int8] */;
  %507 = reshape(%113, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %508 = reshape(%506, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(12288, 1, 4, 4), int8] */;
  %509 = nn.conv2d(%507, %508, padding=[0, 0, 0, 0], groups=192, out_dtype="int32") /* ty=Tensor[(1, 12288, 1, 1), int32] */;
  %510 = reshape(%509, newshape=[1, 192, 64, 1, 1]) /* ty=Tensor[(1, 192, 64, 1, 1), int32] */;
  %511 = sum(%510, axis=[0]) /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %512 = transpose(%511, axes=[1, 0, 2, 3]) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %513 = abs(%512) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %514 = max(%513, axis=[1], keepdims=True) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %515 = divide(%514, 127 /* ty=int32 */) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %516 = divide(%512, %515) /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %517 = greater_equal(%112, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %518 = less_equal(%112, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %519 = nn.conv2d_transpose(%504, %v16_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %520 = abs(%519) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %521 = max(%520, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %522 = divide(%521, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %523 = divide(%519, %522) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %524 = multiply(%517, %518) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %525 = cast(%523, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %526 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %527 = where(%524, %525, %526) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %528 = cast(%527, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %529 = tile(%527, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %530 = reshape(%111, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %531 = reshape(%529, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 4, 4), int8] */;
  %532 = nn.conv2d(%530, %531, padding=[3, 3, 3, 3], dilation=[2, 2], groups=192, out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %533 = reshape(%532, newshape=[1, 1, 192, 8, 8]) /* ty=Tensor[(1, 1, 192, 8, 8), int32] */;
  %534 = sum(%533, axis=[0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %535 = transpose(%534, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 8, 8), int32] */;
  %536 = strided_slice(%535, begin=[0, 0, 0, 0], end=[192, 1, 7, 7], strides=[1], axes=None) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %537 = abs(%536) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %538 = max(%537, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %539 = divide(%538, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %540 = divide(%536, %539) /* ty=Tensor[(192, 1, 7, 7), int32] */;
  %541 = greater_equal(%110, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %542 = less_equal(%110, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %543 = nn.conv2d_transpose(%527, %v16_conv_1_weight, channels=192, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %544 = abs(%543) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %545 = max(%544, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %546 = divide(%545, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %547 = divide(%543, %546) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %548 = multiply(%541, %542) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %549 = cast(%547, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %550 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %551 = where(%548, %549, %550) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %552 = cast(%551, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %553 = tile(%551, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %554 = reshape(%109, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %555 = reshape(%553, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %556 = nn.conv2d(%554, %555, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %557 = reshape(%556, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %558 = sum(%557, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %559 = transpose(%558, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %560 = abs(%559) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %561 = max(%560, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %562 = divide(%561, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %563 = divide(%559, %562) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %564 = greater_equal(%106, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %565 = less_equal(%106, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %566 = greater_equal(%108, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %567 = less_equal(%108, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %568 = nn.conv2d_transpose(%551, %v16_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %569 = abs(%568) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %570 = max(%569, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %571 = divide(%570, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %572 = divide(%568, %571) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %573 = multiply(%566, %567) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %574 = cast(%572, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %575 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %576 = where(%573, %574, %575) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %578 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %579 = divide(%577, %578) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %580 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %581 = multiply(%579, %580) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %582 = multiply(%564, %565) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %583 = cast(%581, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %584 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %585 = where(%582, %583, %584) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %586 = cast(%585, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %587 = tile(%585, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %588 = reshape(%105, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %589 = reshape(%587, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %590 = nn.conv2d(%588, %589, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %591 = reshape(%590, newshape=[1, 96, 32, 1, 1]) /* ty=Tensor[(1, 96, 32, 1, 1), int32] */;
  %592 = sum(%591, axis=[0]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %593 = transpose(%592, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %594 = abs(%593) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %595 = max(%594, axis=[1], keepdims=True) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %596 = divide(%595, 127 /* ty=int32 */) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %597 = divide(%593, %596) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %598 = greater_equal(%104, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %599 = less_equal(%104, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %600 = nn.conv2d_transpose(%585, %v15_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %601 = abs(%600) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %602 = max(%601, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %603 = divide(%602, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %604 = divide(%600, %603) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %605 = multiply(%598, %599) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %606 = cast(%604, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %607 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %608 = where(%605, %606, %607) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %609 = cast(%608, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %610 = tile(%608, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %611 = reshape(%103, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %612 = reshape(%610, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 8, 8), int8] */;
  %613 = nn.conv2d(%611, %612, padding=[2, 2, 2, 2], groups=96, out_dtype="int32") /* ty=Tensor[(1, 96, 5, 5), int32] */;
  %614 = reshape(%613, newshape=[1, 1, 96, 5, 5]) /* ty=Tensor[(1, 1, 96, 5, 5), int32] */;
  %615 = sum(%614, axis=[0]) /* ty=Tensor[(1, 96, 5, 5), int32] */;
  %616 = transpose(%615, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %617 = abs(%616) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %618 = max(%617, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %619 = divide(%618, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %620 = divide(%616, %619) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %621 = greater_equal(%102, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %622 = less_equal(%102, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %623 = nn.conv2d_transpose(%608, %v15_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %624 = abs(%623) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %625 = max(%624, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %626 = divide(%625, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %627 = divide(%623, %626) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %628 = multiply(%621, %622) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %629 = cast(%627, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %630 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %631 = where(%628, %629, %630) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %632 = cast(%631, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %633 = tile(%631, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %634 = reshape(%101, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %635 = reshape(%633, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %636 = nn.conv2d(%634, %635, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %637 = reshape(%636, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %638 = sum(%637, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %639 = transpose(%638, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %640 = abs(%639) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %641 = max(%640, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %642 = divide(%641, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %643 = divide(%639, %642) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %644 = greater_equal(%98, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %645 = less_equal(%98, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %646 = greater_equal(%100, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %647 = less_equal(%100, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %648 = nn.conv2d_transpose(%631, %v15_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %649 = abs(%648) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %650 = max(%649, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %651 = divide(%650, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %652 = divide(%648, %651) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %653 = multiply(%646, %647) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %654 = cast(%652, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %655 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %656 = where(%653, %654, %655) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %658 = reshape(%v14_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %659 = divide(%657, %658) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %660 = reshape(%v14_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %661 = multiply(%659, %660) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %662 = multiply(%644, %645) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %663 = cast(%661, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %664 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %665 = where(%662, %663, %664) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %666 = cast(%665, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %667 = tile(%665, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %668 = reshape(%97, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %669 = reshape(%667, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %670 = nn.conv2d(%668, %669, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %671 = reshape(%670, newshape=[1, 96, 32, 1, 1]) /* ty=Tensor[(1, 96, 32, 1, 1), int32] */;
  %672 = sum(%671, axis=[0]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %673 = transpose(%672, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %674 = abs(%673) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %675 = max(%674, axis=[1], keepdims=True) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %676 = divide(%675, 127 /* ty=int32 */) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %677 = divide(%673, %676) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %678 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %679 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %680 = nn.conv2d_transpose(%665, %v14_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %681 = abs(%680) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %682 = max(%681, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %683 = divide(%682, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %684 = divide(%680, %683) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %685 = multiply(%678, %679) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %686 = cast(%684, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %687 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %688 = where(%685, %686, %687) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %689 = cast(%688, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %690 = tile(%688, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %691 = reshape(%95, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %692 = reshape(%690, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 8, 8), int8] */;
  %693 = nn.conv2d(%691, %692, padding=[2, 2, 2, 2], groups=96, out_dtype="int32") /* ty=Tensor[(1, 96, 5, 5), int32] */;
  %694 = reshape(%693, newshape=[1, 1, 96, 5, 5]) /* ty=Tensor[(1, 1, 96, 5, 5), int32] */;
  %695 = sum(%694, axis=[0]) /* ty=Tensor[(1, 96, 5, 5), int32] */;
  %696 = transpose(%695, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %697 = abs(%696) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %698 = max(%697, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %699 = divide(%698, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %700 = divide(%696, %699) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %701 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %702 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %703 = nn.conv2d_transpose(%688, %v14_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %704 = abs(%703) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %705 = max(%704, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %706 = divide(%705, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %707 = divide(%703, %706) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %708 = multiply(%701, %702) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %709 = cast(%707, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %710 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %711 = where(%708, %709, %710) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %712 = cast(%711, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %713 = tile(%711, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %714 = reshape(%93, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %715 = reshape(%713, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %716 = nn.conv2d(%714, %715, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %717 = reshape(%716, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %718 = sum(%717, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %719 = transpose(%718, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %720 = abs(%719) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %721 = max(%720, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %722 = divide(%721, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %723 = divide(%719, %722) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %724 = greater_equal(%90, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %725 = less_equal(%90, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %726 = greater_equal(%92, meta[relay.Constant][10] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %727 = less_equal(%92, meta[relay.Constant][11] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %728 = nn.conv2d_transpose(%711, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %729 = abs(%728) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %730 = max(%729, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %731 = divide(%730, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %732 = divide(%728, %731) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %733 = multiply(%726, %727) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %734 = cast(%732, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %735 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %736 = where(%733, %734, %735) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %737 = cast(%736, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %738 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %739 = divide(%737, %738) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %740 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %741 = multiply(%739, %740) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %742 = multiply(%724, %725) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %743 = cast(%741, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %744 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %745 = where(%742, %743, %744) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %746 = cast(%745, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %747 = tile(%745, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %748 = reshape(%89, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %749 = reshape(%747, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %750 = nn.conv2d(%748, %749, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %751 = reshape(%750, newshape=[1, 96, 32, 1, 1]) /* ty=Tensor[(1, 96, 32, 1, 1), int32] */;
  %752 = sum(%751, axis=[0]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %753 = transpose(%752, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %754 = abs(%753) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %755 = max(%754, axis=[1], keepdims=True) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %756 = divide(%755, 127 /* ty=int32 */) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %757 = divide(%753, %756) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %758 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %759 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %760 = nn.conv2d_transpose(%745, %v13_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %761 = abs(%760) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %762 = max(%761, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %763 = divide(%762, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %764 = divide(%760, %763) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %765 = multiply(%758, %759) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %766 = cast(%764, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %767 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %768 = where(%765, %766, %767) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %769 = cast(%768, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %770 = tile(%768, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %771 = reshape(%87, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %772 = reshape(%770, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 8, 8), int8] */;
  %773 = nn.conv2d(%771, %772, padding=[2, 2, 2, 2], groups=96, out_dtype="int32") /* ty=Tensor[(1, 96, 5, 5), int32] */;
  %774 = reshape(%773, newshape=[1, 1, 96, 5, 5]) /* ty=Tensor[(1, 1, 96, 5, 5), int32] */;
  %775 = sum(%774, axis=[0]) /* ty=Tensor[(1, 96, 5, 5), int32] */;
  %776 = transpose(%775, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %777 = abs(%776) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %778 = max(%777, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %779 = divide(%778, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %780 = divide(%776, %779) /* ty=Tensor[(96, 1, 5, 5), int32] */;
  %781 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %782 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %783 = nn.conv2d_transpose(%768, %v13_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %784 = abs(%783) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %785 = max(%784, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %786 = divide(%785, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %787 = divide(%783, %786) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %788 = multiply(%781, %782) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %789 = cast(%787, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %790 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %791 = where(%788, %789, %790) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %792 = cast(%791, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %793 = tile(%791, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %794 = reshape(%85, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %795 = reshape(%793, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %796 = nn.conv2d(%794, %795, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %797 = reshape(%796, newshape=[1, 32, 96, 1, 1]) /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %798 = sum(%797, axis=[0]) /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %799 = transpose(%798, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %800 = abs(%799) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %801 = max(%800, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %802 = divide(%801, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %803 = divide(%799, %802) /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %804 = greater_equal(%84, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %805 = less_equal(%84, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %806 = nn.conv2d_transpose(%791, %v13_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %807 = abs(%806) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %808 = max(%807, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %809 = divide(%808, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %810 = divide(%806, %809) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %811 = multiply(%804, %805) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %812 = cast(%810, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %813 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %814 = where(%811, %812, %813) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %815 = cast(%814, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %816 = tile(%814, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 4608, 8, 8), int8] */;
  %817 = reshape(%83, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %818 = reshape(%816, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4608, 1, 8, 8), int8] */;
  %819 = nn.conv2d(%817, %818, padding=[0, 0, 0, 0], groups=144, out_dtype="int32") /* ty=Tensor[(1, 4608, 1, 1), int32] */;
  %820 = reshape(%819, newshape=[1, 144, 32, 1, 1]) /* ty=Tensor[(1, 144, 32, 1, 1), int32] */;
  %821 = sum(%820, axis=[0]) /* ty=Tensor[(144, 32, 1, 1), int32] */;
  %822 = transpose(%821, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 144, 1, 1), int32] */;
  %823 = abs(%822) /* ty=Tensor[(32, 144, 1, 1), int32] */;
  %824 = max(%823, axis=[1], keepdims=True) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %825 = divide(%824, 127 /* ty=int32 */) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %826 = divide(%822, %825) /* ty=Tensor[(32, 144, 1, 1), int32] */;
  %827 = greater_equal(%82, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %828 = less_equal(%82, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %829 = nn.conv2d_transpose(%814, %v12_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %830 = abs(%829) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %831 = max(%830, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %832 = divide(%831, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %833 = divide(%829, %832) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %834 = multiply(%827, %828) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %835 = cast(%833, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %836 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %837 = where(%834, %835, %836) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %838 = cast(%837, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %839 = tile(%837, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %840 = reshape(%81, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %841 = reshape(%839, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), int8] */;
  %842 = nn.conv2d(%840, %841, padding=[2, 2, 2, 2], groups=144, out_dtype="int32") /* ty=Tensor[(1, 144, 5, 5), int32] */;
  %843 = reshape(%842, newshape=[1, 1, 144, 5, 5]) /* ty=Tensor[(1, 1, 144, 5, 5), int32] */;
  %844 = sum(%843, axis=[0]) /* ty=Tensor[(1, 144, 5, 5), int32] */;
  %845 = transpose(%844, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 5, 5), int32] */;
  %846 = abs(%845) /* ty=Tensor[(144, 1, 5, 5), int32] */;
  %847 = max(%846, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 5, 5), int32] */;
  %848 = divide(%847, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 5, 5), int32] */;
  %849 = divide(%845, %848) /* ty=Tensor[(144, 1, 5, 5), int32] */;
  %850 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %851 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %852 = nn.conv2d_transpose(%837, %v12_conv_1_weight, channels=144, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %853 = abs(%852) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %854 = max(%853, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %855 = divide(%854, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %856 = divide(%852, %855) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %857 = multiply(%850, %851) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %858 = cast(%856, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %859 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %860 = where(%857, %858, %859) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %861 = cast(%860, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %862 = tile(%860, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %863 = reshape(%79, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %864 = reshape(%862, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %865 = nn.conv2d(%863, %864, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %866 = reshape(%865, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %867 = sum(%866, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %868 = transpose(%867, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %869 = abs(%868) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %870 = max(%869, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %871 = divide(%870, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %872 = divide(%868, %871) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %873 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %874 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %875 = greater_equal(%78, meta[relay.Constant][12] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %876 = less_equal(%78, meta[relay.Constant][13] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %877 = nn.conv2d_transpose(%860, %v12_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %878 = abs(%877) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %879 = max(%878, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %880 = divide(%879, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %881 = divide(%877, %880) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %882 = multiply(%875, %876) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %883 = cast(%881, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %884 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %885 = where(%882, %883, %884) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %886 = cast(%885, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %887 = reshape(%v11_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %888 = divide(%886, %887) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %889 = reshape(%v11_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %890 = multiply(%888, %889) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %891 = multiply(%873, %874) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %892 = cast(%890, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %893 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %894 = where(%891, %892, %893) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %895 = cast(%894, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %896 = tile(%894, reps=[1, 72, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), int8] */;
  %897 = reshape(%75, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %898 = reshape(%896, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), int8] */;
  %899 = nn.conv2d(%897, %898, padding=[0, 0, 0, 0], groups=72, out_dtype="int32") /* ty=Tensor[(1, 1728, 1, 1), int32] */;
  %900 = reshape(%899, newshape=[1, 72, 24, 1, 1]) /* ty=Tensor[(1, 72, 24, 1, 1), int32] */;
  %901 = sum(%900, axis=[0]) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %902 = transpose(%901, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %903 = abs(%902) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %904 = max(%903, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %905 = divide(%904, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %906 = divide(%902, %905) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %907 = greater_equal(%74, -128 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %908 = less_equal(%74, 127 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %909 = nn.conv2d_transpose(%894, %v11_conv_2_weight, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %910 = abs(%909) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %911 = max(%910, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %912 = divide(%911, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %913 = divide(%909, %912) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %914 = multiply(%907, %908) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %915 = cast(%913, dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %916 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %917 = where(%914, %915, %916) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %918 = cast(%917, dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %919 = tile(%917, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %920 = reshape(%73, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %921 = reshape(%919, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(72, 1, 8, 8), int8] */;
  %922 = nn.conv2d(%920, %921, padding=[2, 2, 2, 2], groups=72, out_dtype="int32") /* ty=Tensor[(1, 72, 5, 5), int32] */;
  %923 = reshape(%922, newshape=[1, 1, 72, 5, 5]) /* ty=Tensor[(1, 1, 72, 5, 5), int32] */;
  %924 = sum(%923, axis=[0]) /* ty=Tensor[(1, 72, 5, 5), int32] */;
  %925 = transpose(%924, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %926 = abs(%925) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %927 = max(%926, axis=[1], keepdims=True) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %928 = divide(%927, 127 /* ty=int32 */) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %929 = divide(%925, %928) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %930 = greater_equal(%72, -128 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %931 = less_equal(%72, 127 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %932 = nn.conv2d_transpose(%917, %v11_conv_1_weight, channels=72, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=72, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %933 = abs(%932) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %934 = max(%933, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %935 = divide(%934, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %936 = divide(%932, %935) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %937 = multiply(%930, %931) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %938 = cast(%936, dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %939 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %940 = where(%937, %938, %939) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %941 = cast(%940, dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %942 = tile(%940, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), int8] */;
  %943 = reshape(%71, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %944 = reshape(%942, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), int8] */;
  %945 = nn.conv2d(%943, %944, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 1728, 1, 1), int32] */;
  %946 = reshape(%945, newshape=[1, 24, 72, 1, 1]) /* ty=Tensor[(1, 24, 72, 1, 1), int32] */;
  %947 = sum(%946, axis=[0]) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %948 = transpose(%947, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %949 = abs(%948) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %950 = max(%949, axis=[1], keepdims=True) /* ty=Tensor[(72, 1, 1, 1), int32] */;
  %951 = divide(%950, 127 /* ty=int32 */) /* ty=Tensor[(72, 1, 1, 1), int32] */;
  %952 = divide(%948, %951) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %953 = greater_equal(%68, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %954 = less_equal(%68, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %955 = greater_equal(%70, meta[relay.Constant][14] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %956 = less_equal(%70, meta[relay.Constant][15] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %957 = nn.conv2d_transpose(%940, %v11_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %958 = abs(%957) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %959 = max(%958, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %960 = divide(%959, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %961 = divide(%957, %960) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %962 = multiply(%955, %956) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %963 = cast(%961, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %964 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %965 = where(%962, %963, %964) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %966 = cast(%965, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %967 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %968 = divide(%966, %967) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %969 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %970 = multiply(%968, %969) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %971 = multiply(%953, %954) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %972 = cast(%970, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %973 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %974 = where(%971, %972, %973) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %975 = cast(%974, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %976 = tile(%974, reps=[1, 72, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), int8] */;
  %977 = reshape(%67, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %978 = reshape(%976, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), int8] */;
  %979 = nn.conv2d(%977, %978, padding=[0, 0, 0, 0], groups=72, out_dtype="int32") /* ty=Tensor[(1, 1728, 1, 1), int32] */;
  %980 = reshape(%979, newshape=[1, 72, 24, 1, 1]) /* ty=Tensor[(1, 72, 24, 1, 1), int32] */;
  %981 = sum(%980, axis=[0]) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %982 = transpose(%981, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %983 = abs(%982) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %984 = max(%983, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %985 = divide(%984, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %986 = divide(%982, %985) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %987 = greater_equal(%66, -128 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %988 = less_equal(%66, 127 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %989 = nn.conv2d_transpose(%974, %v10_conv_2_weight, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %990 = abs(%989) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %991 = max(%990, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %992 = divide(%991, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %993 = divide(%989, %992) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %994 = multiply(%987, %988) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %995 = cast(%993, dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %996 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %997 = where(%994, %995, %996) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %998 = cast(%997, dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %999 = tile(%997, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1000 = reshape(%65, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1001 = reshape(%999, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(72, 1, 8, 8), int8] */;
  %1002 = nn.conv2d(%1000, %1001, padding=[2, 2, 2, 2], groups=72, out_dtype="int32") /* ty=Tensor[(1, 72, 5, 5), int32] */;
  %1003 = reshape(%1002, newshape=[1, 1, 72, 5, 5]) /* ty=Tensor[(1, 1, 72, 5, 5), int32] */;
  %1004 = sum(%1003, axis=[0]) /* ty=Tensor[(1, 72, 5, 5), int32] */;
  %1005 = transpose(%1004, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %1006 = abs(%1005) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %1007 = max(%1006, axis=[1], keepdims=True) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %1008 = divide(%1007, 127 /* ty=int32 */) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %1009 = divide(%1005, %1008) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %1010 = greater_equal(%64, -128 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %1011 = less_equal(%64, 127 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %1012 = nn.conv2d_transpose(%997, %v10_conv_1_weight, channels=72, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=72, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1013 = abs(%1012) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1014 = max(%1013, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1015 = divide(%1014, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1016 = divide(%1012, %1015) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1017 = multiply(%1010, %1011) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %1018 = cast(%1016, dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1019 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1020 = where(%1017, %1018, %1019) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1021 = cast(%1020, dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1022 = tile(%1020, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), int8] */;
  %1023 = reshape(%63, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1024 = reshape(%1022, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), int8] */;
  %1025 = nn.conv2d(%1023, %1024, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 1728, 1, 1), int32] */;
  %1026 = reshape(%1025, newshape=[1, 24, 72, 1, 1]) /* ty=Tensor[(1, 24, 72, 1, 1), int32] */;
  %1027 = sum(%1026, axis=[0]) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %1028 = transpose(%1027, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %1029 = abs(%1028) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %1030 = max(%1029, axis=[1], keepdims=True) /* ty=Tensor[(72, 1, 1, 1), int32] */;
  %1031 = divide(%1030, 127 /* ty=int32 */) /* ty=Tensor[(72, 1, 1, 1), int32] */;
  %1032 = divide(%1028, %1031) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %1033 = greater_equal(%60, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %1034 = less_equal(%60, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %1035 = greater_equal(%62, meta[relay.Constant][16] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %1036 = less_equal(%62, meta[relay.Constant][17] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %1037 = nn.conv2d_transpose(%1020, %v10_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %1038 = abs(%1037) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %1039 = max(%1038, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1040 = divide(%1039, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1041 = divide(%1037, %1040) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %1042 = multiply(%1035, %1036) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %1043 = cast(%1041, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1044 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1045 = where(%1042, %1043, %1044) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1046 = cast(%1045, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %1047 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1048 = divide(%1046, %1047) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %1049 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1050 = multiply(%1048, %1049) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %1051 = multiply(%1033, %1034) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %1052 = cast(%1050, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1053 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1054 = where(%1051, %1052, %1053) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1055 = cast(%1054, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %1056 = tile(%1054, reps=[1, 72, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), int8] */;
  %1057 = reshape(%59, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1058 = reshape(%1056, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), int8] */;
  %1059 = nn.conv2d(%1057, %1058, padding=[0, 0, 0, 0], groups=72, out_dtype="int32") /* ty=Tensor[(1, 1728, 1, 1), int32] */;
  %1060 = reshape(%1059, newshape=[1, 72, 24, 1, 1]) /* ty=Tensor[(1, 72, 24, 1, 1), int32] */;
  %1061 = sum(%1060, axis=[0]) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %1062 = transpose(%1061, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %1063 = abs(%1062) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %1064 = max(%1063, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %1065 = divide(%1064, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %1066 = divide(%1062, %1065) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %1067 = greater_equal(%58, -128 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %1068 = less_equal(%58, 127 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %1069 = nn.conv2d_transpose(%1054, %v9_conv_2_weight, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1070 = abs(%1069) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1071 = max(%1070, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1072 = divide(%1071, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1073 = divide(%1069, %1072) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1074 = multiply(%1067, %1068) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %1075 = cast(%1073, dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1076 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1077 = where(%1074, %1075, %1076) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1078 = cast(%1077, dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1079 = tile(%1077, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1080 = reshape(%57, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1081 = reshape(%1079, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(72, 1, 8, 8), int8] */;
  %1082 = nn.conv2d(%1080, %1081, padding=[2, 2, 2, 2], groups=72, out_dtype="int32") /* ty=Tensor[(1, 72, 5, 5), int32] */;
  %1083 = reshape(%1082, newshape=[1, 1, 72, 5, 5]) /* ty=Tensor[(1, 1, 72, 5, 5), int32] */;
  %1084 = sum(%1083, axis=[0]) /* ty=Tensor[(1, 72, 5, 5), int32] */;
  %1085 = transpose(%1084, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %1086 = abs(%1085) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %1087 = max(%1086, axis=[1], keepdims=True) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %1088 = divide(%1087, 127 /* ty=int32 */) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %1089 = divide(%1085, %1088) /* ty=Tensor[(72, 1, 5, 5), int32] */;
  %1090 = greater_equal(%56, -128 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %1091 = less_equal(%56, 127 /* ty=int32 */) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %1092 = nn.conv2d_transpose(%1077, %v9_conv_1_weight, channels=72, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=72, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1093 = abs(%1092) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1094 = max(%1093, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1095 = divide(%1094, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1096 = divide(%1092, %1095) /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1097 = multiply(%1090, %1091) /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %1098 = cast(%1096, dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1099 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1100 = where(%1097, %1098, %1099) /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %1101 = cast(%1100, dtype="int32") /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %1102 = tile(%1100, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 1728, 8, 8), int8] */;
  %1103 = reshape(%55, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1104 = reshape(%1102, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1728, 1, 8, 8), int8] */;
  %1105 = nn.conv2d(%1103, %1104, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 1728, 1, 1), int32] */;
  %1106 = reshape(%1105, newshape=[1, 24, 72, 1, 1]) /* ty=Tensor[(1, 24, 72, 1, 1), int32] */;
  %1107 = sum(%1106, axis=[0]) /* ty=Tensor[(24, 72, 1, 1), int32] */;
  %1108 = transpose(%1107, axes=[1, 0, 2, 3]) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %1109 = abs(%1108) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %1110 = max(%1109, axis=[1], keepdims=True) /* ty=Tensor[(72, 1, 1, 1), int32] */;
  %1111 = divide(%1110, 127 /* ty=int32 */) /* ty=Tensor[(72, 1, 1, 1), int32] */;
  %1112 = divide(%1108, %1111) /* ty=Tensor[(72, 24, 1, 1), int32] */;
  %1113 = greater_equal(%54, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %1114 = less_equal(%54, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %1115 = nn.conv2d_transpose(%1100, %v9_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %1116 = abs(%1115) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %1117 = max(%1116, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1118 = divide(%1117, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1119 = divide(%1115, %1118) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %1120 = multiply(%1113, %1114) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %1121 = cast(%1119, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1122 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1123 = where(%1120, %1121, %1122) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %1124 = cast(%1123, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %1125 = tile(%1123, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 2304, 8, 8), int8] */;
  %1126 = reshape(%53, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %1127 = reshape(%1125, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2304, 1, 8, 8), int8] */;
  %1128 = nn.conv2d(%1126, %1127, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* ty=Tensor[(1, 2304, 1, 1), int32] */;
  %1129 = reshape(%1128, newshape=[1, 96, 24, 1, 1]) /* ty=Tensor[(1, 96, 24, 1, 1), int32] */;
  %1130 = sum(%1129, axis=[0]) /* ty=Tensor[(96, 24, 1, 1), int32] */;
  %1131 = transpose(%1130, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 96, 1, 1), int32] */;
  %1132 = abs(%1131) /* ty=Tensor[(24, 96, 1, 1), int32] */;
  %1133 = max(%1132, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %1134 = divide(%1133, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %1135 = divide(%1131, %1134) /* ty=Tensor[(24, 96, 1, 1), int32] */;
  %1136 = greater_equal(%52, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %1137 = less_equal(%52, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %1138 = nn.conv2d_transpose(%1123, %v8_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %1139 = abs(%1138) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %1140 = max(%1139, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1141 = divide(%1140, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %1142 = divide(%1138, %1141) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %1143 = multiply(%1136, %1137) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %1144 = cast(%1142, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %1145 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %1146 = where(%1143, %1144, %1145) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %1147 = cast(%1146, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %1148 = tile(%1146, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %1149 = reshape(%51, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1150 = reshape(%1148, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 8, 8), int8] */;
  %1151 = nn.conv2d(%1149, %1150, padding=[3, 3, 3, 3], dilation=[2, 2], groups=96, out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %1152 = reshape(%1151, newshape=[1, 1, 96, 8, 8]) /* ty=Tensor[(1, 1, 96, 8, 8), int32] */;
  %1153 = sum(%1152, axis=[0]) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %1154 = transpose(%1153, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 8, 8), int32] */;
  %1155 = strided_slice(%1154, begin=[0, 0, 0, 0], end=[96, 1, 7, 7], strides=[1], axes=None) /* ty=Tensor[(96, 1, 7, 7), int32] */;
  %1156 = abs(%1155) /* ty=Tensor[(96, 1, 7, 7), int32] */;
  %1157 = max(%1156, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 7, 7), int32] */;
  %1158 = divide(%1157, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 7, 7), int32] */;
  %1159 = divide(%1155, %1158) /* ty=Tensor[(96, 1, 7, 7), int32] */;
  %1160 = greater_equal(%50, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1161 = less_equal(%50, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1162 = nn.conv2d_transpose(%1146, %v8_conv_1_weight, channels=96, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1163 = abs(%1162) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1164 = max(%1163, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1165 = divide(%1164, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1166 = divide(%1162, %1165) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1167 = multiply(%1160, %1161) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1168 = cast(%1166, dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1169 = zeros(shape=[1, 96, 16, 16], dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1170 = where(%1167, %1168, %1169) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1171 = cast(%1170, dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1172 = tile(%1170, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), int8] */;
  %1173 = reshape(%49, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1174 = reshape(%1172, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), int8] */;
  %1175 = nn.conv2d(%1173, %1174, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 1536, 1, 1), int32] */;
  %1176 = reshape(%1175, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), int32] */;
  %1177 = sum(%1176, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), int32] */;
  %1178 = transpose(%1177, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1179 = abs(%1178) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1180 = max(%1179, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %1181 = divide(%1180, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %1182 = divide(%1178, %1181) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1183 = greater_equal(%46, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1184 = less_equal(%46, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1185 = greater_equal(%48, meta[relay.Constant][18] /* ty=int8 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1186 = less_equal(%48, meta[relay.Constant][19] /* ty=int8 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1187 = nn.conv2d_transpose(%1170, %v8_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1188 = abs(%1187) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1189 = max(%1188, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1190 = divide(%1189, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1191 = divide(%1187, %1190) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1192 = multiply(%1185, %1186) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1193 = cast(%1191, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1194 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1195 = where(%1192, %1193, %1194) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1196 = cast(%1195, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1197 = reshape(%v7_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1198 = divide(%1196, %1197) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1199 = reshape(%v7_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1200 = multiply(%1198, %1199) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1201 = multiply(%1183, %1184) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1202 = cast(%1200, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1203 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1204 = where(%1201, %1202, %1203) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1205 = cast(%1204, dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1206 = tile(%1204, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), int8] */;
  %1207 = reshape(%45, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1208 = reshape(%1206, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), int8] */;
  %1209 = nn.conv2d(%1207, %1208, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1210 = reshape(%1209, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), int32] */;
  %1211 = sum(%1210, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1212 = transpose(%1211, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1213 = abs(%1212) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1214 = max(%1213, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1215 = divide(%1214, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1216 = divide(%1212, %1215) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1217 = greater_equal(%44, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1218 = less_equal(%44, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1219 = nn.conv2d_transpose(%1204, %v7_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1220 = abs(%1219) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1221 = max(%1220, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1222 = divide(%1221, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1223 = divide(%1219, %1222) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1224 = multiply(%1217, %1218) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1225 = cast(%1223, dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1226 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1227 = where(%1224, %1225, %1226) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1228 = cast(%1227, dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1229 = tile(%1227, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1230 = reshape(%43, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1231 = reshape(%1229, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), int8] */;
  %1232 = nn.conv2d(%1230, %1231, padding=[2, 2, 2, 2], groups=48, out_dtype="int32") /* ty=Tensor[(1, 48, 5, 5), int32] */;
  %1233 = reshape(%1232, newshape=[1, 1, 48, 5, 5]) /* ty=Tensor[(1, 1, 48, 5, 5), int32] */;
  %1234 = sum(%1233, axis=[0]) /* ty=Tensor[(1, 48, 5, 5), int32] */;
  %1235 = transpose(%1234, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 5, 5), int32] */;
  %1236 = abs(%1235) /* ty=Tensor[(48, 1, 5, 5), int32] */;
  %1237 = max(%1236, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 5, 5), int32] */;
  %1238 = divide(%1237, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 5, 5), int32] */;
  %1239 = divide(%1235, %1238) /* ty=Tensor[(48, 1, 5, 5), int32] */;
  %1240 = greater_equal(%42, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1241 = less_equal(%42, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1242 = nn.conv2d_transpose(%1227, %v7_conv_1_weight, channels=48, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=48, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1243 = abs(%1242) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1244 = max(%1243, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1245 = divide(%1244, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1246 = divide(%1242, %1245) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1247 = multiply(%1240, %1241) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1248 = cast(%1246, dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1249 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1250 = where(%1247, %1248, %1249) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1251 = cast(%1250, dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1252 = tile(%1250, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), int8] */;
  %1253 = reshape(%41, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1254 = reshape(%1252, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), int8] */;
  %1255 = nn.conv2d(%1253, %1254, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1256 = reshape(%1255, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), int32] */;
  %1257 = sum(%1256, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1258 = transpose(%1257, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1259 = abs(%1258) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1260 = max(%1259, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1261 = divide(%1260, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1262 = divide(%1258, %1261) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1263 = greater_equal(%38, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1264 = less_equal(%38, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1265 = greater_equal(%40, meta[relay.Constant][20] /* ty=int8 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1266 = less_equal(%40, meta[relay.Constant][21] /* ty=int8 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1267 = nn.conv2d_transpose(%1250, %v7_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1268 = abs(%1267) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1269 = max(%1268, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1270 = divide(%1269, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1271 = divide(%1267, %1270) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1272 = multiply(%1265, %1266) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1273 = cast(%1271, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1274 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1275 = where(%1272, %1273, %1274) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1276 = cast(%1275, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1277 = reshape(%v6_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1278 = divide(%1276, %1277) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1279 = reshape(%v6_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1280 = multiply(%1278, %1279) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1281 = multiply(%1263, %1264) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1282 = cast(%1280, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1283 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1284 = where(%1281, %1282, %1283) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1285 = cast(%1284, dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1286 = tile(%1284, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), int8] */;
  %1287 = reshape(%37, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1288 = reshape(%1286, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), int8] */;
  %1289 = nn.conv2d(%1287, %1288, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1290 = reshape(%1289, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), int32] */;
  %1291 = sum(%1290, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1292 = transpose(%1291, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1293 = abs(%1292) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1294 = max(%1293, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1295 = divide(%1294, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1296 = divide(%1292, %1295) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1297 = greater_equal(%36, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1298 = less_equal(%36, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1299 = nn.conv2d_transpose(%1284, %v6_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1300 = abs(%1299) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1301 = max(%1300, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1302 = divide(%1301, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1303 = divide(%1299, %1302) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1304 = multiply(%1297, %1298) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1305 = cast(%1303, dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1306 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1307 = where(%1304, %1305, %1306) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1308 = cast(%1307, dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1309 = tile(%1307, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1310 = reshape(%35, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1311 = reshape(%1309, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), int8] */;
  %1312 = nn.conv2d(%1310, %1311, padding=[2, 2, 2, 2], groups=48, out_dtype="int32") /* ty=Tensor[(1, 48, 5, 5), int32] */;
  %1313 = reshape(%1312, newshape=[1, 1, 48, 5, 5]) /* ty=Tensor[(1, 1, 48, 5, 5), int32] */;
  %1314 = sum(%1313, axis=[0]) /* ty=Tensor[(1, 48, 5, 5), int32] */;
  %1315 = transpose(%1314, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 5, 5), int32] */;
  %1316 = abs(%1315) /* ty=Tensor[(48, 1, 5, 5), int32] */;
  %1317 = max(%1316, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 5, 5), int32] */;
  %1318 = divide(%1317, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 5, 5), int32] */;
  %1319 = divide(%1315, %1318) /* ty=Tensor[(48, 1, 5, 5), int32] */;
  %1320 = greater_equal(%34, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1321 = less_equal(%34, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1322 = nn.conv2d_transpose(%1307, %v6_conv_1_weight, channels=48, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=48, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1323 = abs(%1322) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1324 = max(%1323, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1325 = divide(%1324, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1326 = divide(%1322, %1325) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1327 = multiply(%1320, %1321) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1328 = cast(%1326, dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1329 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1330 = where(%1327, %1328, %1329) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1331 = cast(%1330, dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1332 = tile(%1330, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), int8] */;
  %1333 = reshape(%33, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1334 = reshape(%1332, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), int8] */;
  %1335 = nn.conv2d(%1333, %1334, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1336 = reshape(%1335, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), int32] */;
  %1337 = sum(%1336, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1338 = transpose(%1337, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1339 = abs(%1338) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1340 = max(%1339, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1341 = divide(%1340, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1342 = divide(%1338, %1341) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1343 = greater_equal(%30, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1344 = less_equal(%30, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1345 = greater_equal(%32, meta[relay.Constant][22] /* ty=int8 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1346 = less_equal(%32, meta[relay.Constant][23] /* ty=int8 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1347 = nn.conv2d_transpose(%1330, %v6_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1348 = abs(%1347) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1349 = max(%1348, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1350 = divide(%1349, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1351 = divide(%1347, %1350) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1352 = multiply(%1345, %1346) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1353 = cast(%1351, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1354 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1355 = where(%1352, %1353, %1354) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1356 = cast(%1355, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1357 = reshape(%v5_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1358 = divide(%1356, %1357) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1359 = reshape(%v5_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1360 = multiply(%1358, %1359) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1361 = multiply(%1343, %1344) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1362 = cast(%1360, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1363 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1364 = where(%1361, %1362, %1363) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1365 = cast(%1364, dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1366 = tile(%1364, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), int8] */;
  %1367 = reshape(%29, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1368 = reshape(%1366, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), int8] */;
  %1369 = nn.conv2d(%1367, %1368, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1370 = reshape(%1369, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), int32] */;
  %1371 = sum(%1370, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1372 = transpose(%1371, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1373 = abs(%1372) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1374 = max(%1373, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1375 = divide(%1374, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1376 = divide(%1372, %1375) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1377 = greater_equal(%28, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1378 = less_equal(%28, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1379 = nn.conv2d_transpose(%1364, %v5_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1380 = abs(%1379) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1381 = max(%1380, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1382 = divide(%1381, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1383 = divide(%1379, %1382) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1384 = multiply(%1377, %1378) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1385 = cast(%1383, dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1386 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1387 = where(%1384, %1385, %1386) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1388 = cast(%1387, dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1389 = tile(%1387, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1390 = reshape(%27, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1391 = reshape(%1389, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), int8] */;
  %1392 = nn.conv2d(%1390, %1391, padding=[1, 1, 1, 1], groups=48, out_dtype="int32") /* ty=Tensor[(1, 48, 3, 3), int32] */;
  %1393 = reshape(%1392, newshape=[1, 1, 48, 3, 3]) /* ty=Tensor[(1, 1, 48, 3, 3), int32] */;
  %1394 = sum(%1393, axis=[0]) /* ty=Tensor[(1, 48, 3, 3), int32] */;
  %1395 = transpose(%1394, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1396 = abs(%1395) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1397 = max(%1396, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1398 = divide(%1397, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1399 = divide(%1395, %1398) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1400 = greater_equal(%26, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1401 = less_equal(%26, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1402 = nn.conv2d_transpose(%1387, %v5_conv_1_weight, channels=48, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1403 = abs(%1402) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1404 = max(%1403, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1405 = divide(%1404, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1406 = divide(%1402, %1405) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1407 = multiply(%1400, %1401) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1408 = cast(%1406, dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1409 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1410 = where(%1407, %1408, %1409) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1411 = cast(%1410, dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1412 = tile(%1410, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), int8] */;
  %1413 = reshape(%25, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1414 = reshape(%1412, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), int8] */;
  %1415 = nn.conv2d(%1413, %1414, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1416 = reshape(%1415, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), int32] */;
  %1417 = sum(%1416, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1418 = transpose(%1417, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1419 = abs(%1418) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1420 = max(%1419, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1421 = divide(%1420, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1422 = divide(%1418, %1421) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1423 = greater_equal(%24, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1424 = less_equal(%24, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1425 = nn.conv2d_transpose(%1410, %v5_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1426 = abs(%1425) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1427 = max(%1426, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1428 = divide(%1427, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1429 = divide(%1425, %1428) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1430 = multiply(%1423, %1424) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1431 = cast(%1429, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1432 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1433 = where(%1430, %1431, %1432) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1434 = cast(%1433, dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1435 = tile(%1433, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), int8] */;
  %1436 = reshape(%23, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1437 = reshape(%1435, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), int8] */;
  %1438 = nn.conv2d(%1436, %1437, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1439 = reshape(%1438, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), int32] */;
  %1440 = sum(%1439, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1441 = transpose(%1440, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1442 = abs(%1441) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1443 = max(%1442, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1444 = divide(%1443, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1445 = divide(%1441, %1444) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1446 = greater_equal(%22, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1447 = less_equal(%22, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1448 = nn.conv2d_transpose(%1433, %v4_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1449 = abs(%1448) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1450 = max(%1449, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1451 = divide(%1450, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1452 = divide(%1448, %1451) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1453 = multiply(%1446, %1447) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1454 = cast(%1452, dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1455 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1456 = where(%1453, %1454, %1455) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1457 = cast(%1456, dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1458 = tile(%1456, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1459 = reshape(%21, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1460 = reshape(%1458, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), int8] */;
  %1461 = nn.conv2d(%1459, %1460, padding=[3, 3, 3, 3], dilation=[2, 2], groups=48, out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %1462 = reshape(%1461, newshape=[1, 1, 48, 8, 8]) /* ty=Tensor[(1, 1, 48, 8, 8), int32] */;
  %1463 = sum(%1462, axis=[0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %1464 = transpose(%1463, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 8, 8), int32] */;
  %1465 = strided_slice(%1464, begin=[0, 0, 0, 0], end=[48, 1, 7, 7], strides=[1], axes=None) /* ty=Tensor[(48, 1, 7, 7), int32] */;
  %1466 = abs(%1465) /* ty=Tensor[(48, 1, 7, 7), int32] */;
  %1467 = max(%1466, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 7, 7), int32] */;
  %1468 = divide(%1467, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 7, 7), int32] */;
  %1469 = divide(%1465, %1468) /* ty=Tensor[(48, 1, 7, 7), int32] */;
  %1470 = greater_equal(%20, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1471 = less_equal(%20, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1472 = nn.conv2d_transpose(%1456, %v4_conv_1_weight, channels=48, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=48, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1473 = abs(%1472) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1474 = max(%1473, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1475 = divide(%1474, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1476 = divide(%1472, %1475) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1477 = multiply(%1470, %1471) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1478 = cast(%1476, dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1479 = zeros(shape=[1, 48, 32, 32], dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1480 = where(%1477, %1478, %1479) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1481 = cast(%1480, dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1482 = tile(%1480, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), int8] */;
  %1483 = reshape(%19, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1484 = reshape(%1482, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), int8] */;
  %1485 = nn.conv2d(%1483, %1484, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1486 = reshape(%1485, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), int32] */;
  %1487 = sum(%1486, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1488 = transpose(%1487, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1489 = abs(%1488) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1490 = max(%1489, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1491 = divide(%1490, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1492 = divide(%1488, %1491) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1493 = greater_equal(%16, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1494 = less_equal(%16, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1495 = greater_equal(%18, meta[relay.Constant][24] /* ty=int8 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1496 = less_equal(%18, meta[relay.Constant][25] /* ty=int8 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1497 = nn.conv2d_transpose(%1480, %v4_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1498 = abs(%1497) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1499 = max(%1498, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1500 = divide(%1499, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1501 = divide(%1497, %1500) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1502 = multiply(%1495, %1496) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1503 = cast(%1501, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1504 = zeros(shape=[1, 16, 32, 32], dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1505 = where(%1502, %1503, %1504) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1506 = cast(%1505, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1507 = reshape(%v3_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1508 = divide(%1506, %1507) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1509 = reshape(%v3_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1510 = multiply(%1508, %1509) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %1511 = multiply(%1493, %1494) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1512 = cast(%1510, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1513 = zeros(shape=[1, 16, 32, 32], dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1514 = where(%1511, %1512, %1513) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1515 = cast(%1514, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1516 = tile(%1514, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), int8] */;
  %1517 = reshape(%15, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1518 = reshape(%1516, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), int8] */;
  %1519 = nn.conv2d(%1517, %1518, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1520 = reshape(%1519, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), int32] */;
  %1521 = sum(%1520, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1522 = transpose(%1521, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1523 = abs(%1522) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1524 = max(%1523, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1525 = divide(%1524, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1526 = divide(%1522, %1525) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1527 = greater_equal(%14, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1528 = less_equal(%14, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1529 = nn.conv2d_transpose(%1514, %v3_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1530 = abs(%1529) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1531 = max(%1530, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1532 = divide(%1531, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1533 = divide(%1529, %1532) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1534 = multiply(%1527, %1528) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1535 = cast(%1533, dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1536 = zeros(shape=[1, 48, 32, 32], dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1537 = where(%1534, %1535, %1536) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1538 = cast(%1537, dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1539 = tile(%1537, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1540 = reshape(%13, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1541 = reshape(%1539, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 32, 32), int8] */;
  %1542 = nn.conv2d(%1540, %1541, padding=[1, 1, 1, 1], groups=48, out_dtype="int32") /* ty=Tensor[(1, 48, 3, 3), int32] */;
  %1543 = reshape(%1542, newshape=[1, 1, 48, 3, 3]) /* ty=Tensor[(1, 1, 48, 3, 3), int32] */;
  %1544 = sum(%1543, axis=[0]) /* ty=Tensor[(1, 48, 3, 3), int32] */;
  %1545 = transpose(%1544, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1546 = abs(%1545) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1547 = max(%1546, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1548 = divide(%1547, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1549 = divide(%1545, %1548) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1550 = greater_equal(%12, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1551 = less_equal(%12, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1552 = nn.conv2d_transpose(%1537, %v3_conv_1_weight, channels=48, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1553 = abs(%1552) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1554 = max(%1553, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1555 = divide(%1554, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1556 = divide(%1552, %1555) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1557 = multiply(%1550, %1551) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1558 = cast(%1556, dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1559 = zeros(shape=[1, 48, 32, 32], dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1560 = where(%1557, %1558, %1559) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1561 = cast(%1560, dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1562 = tile(%1560, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), int8] */;
  %1563 = reshape(%11, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1564 = reshape(%1562, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), int8] */;
  %1565 = nn.conv2d(%1563, %1564, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1566 = reshape(%1565, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), int32] */;
  %1567 = sum(%1566, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1568 = transpose(%1567, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1569 = abs(%1568) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1570 = max(%1569, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1571 = divide(%1570, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1572 = divide(%1568, %1571) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1573 = greater_equal(%10, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1574 = less_equal(%10, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1575 = nn.conv2d_transpose(%1560, %v3_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1576 = abs(%1575) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1577 = max(%1576, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1578 = divide(%1577, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1579 = divide(%1575, %1578) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1580 = multiply(%1573, %1574) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %1581 = cast(%1579, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1582 = zeros(shape=[1, 16, 32, 32], dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1583 = where(%1580, %1581, %1582) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %1584 = cast(%1583, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %1585 = tile(%1583, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 384, 32, 32), int8] */;
  %1586 = reshape(%9, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %1587 = reshape(%1585, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 32, 32), int8] */;
  %1588 = nn.conv2d(%1586, %1587, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 384, 1, 1), int32] */;
  %1589 = reshape(%1588, newshape=[1, 24, 16, 1, 1]) /* ty=Tensor[(1, 24, 16, 1, 1), int32] */;
  %1590 = sum(%1589, axis=[0]) /* ty=Tensor[(24, 16, 1, 1), int32] */;
  %1591 = transpose(%1590, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 24, 1, 1), int32] */;
  %1592 = abs(%1591) /* ty=Tensor[(16, 24, 1, 1), int32] */;
  %1593 = max(%1592, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1594 = divide(%1593, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1595 = divide(%1591, %1594) /* ty=Tensor[(16, 24, 1, 1), int32] */;
  %1596 = greater_equal(%8, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 32, 32), bool] */;
  %1597 = less_equal(%8, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 32, 32), bool] */;
  %1598 = nn.conv2d_transpose(%1583, %v2_conv_2_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %1599 = abs(%1598) /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %1600 = max(%1599, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1601 = divide(%1600, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1602 = divide(%1598, %1601) /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %1603 = multiply(%1596, %1597) /* ty=Tensor[(1, 24, 32, 32), bool] */;
  %1604 = cast(%1602, dtype="int8") /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %1605 = zeros(shape=[1, 24, 32, 32], dtype="int8") /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %1606 = where(%1603, %1604, %1605) /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %1607 = cast(%1606, dtype="int32") /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %1608 = tile(%1606, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %1609 = reshape(%7, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %1610 = reshape(%1608, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(24, 1, 32, 32), int8] */;
  %1611 = nn.conv2d(%1609, %1610, padding=[2, 2, 2, 2], dilation=[2, 2], groups=24, out_dtype="int32") /* ty=Tensor[(1, 24, 6, 6), int32] */;
  %1612 = reshape(%1611, newshape=[1, 1, 24, 6, 6]) /* ty=Tensor[(1, 1, 24, 6, 6), int32] */;
  %1613 = sum(%1612, axis=[0]) /* ty=Tensor[(1, 24, 6, 6), int32] */;
  %1614 = transpose(%1613, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 1, 6, 6), int32] */;
  %1615 = strided_slice(%1614, begin=[0, 0, 0, 0], end=[24, 1, 5, 5], strides=[1], axes=None) /* ty=Tensor[(24, 1, 5, 5), int32] */;
  %1616 = abs(%1615) /* ty=Tensor[(24, 1, 5, 5), int32] */;
  %1617 = max(%1616, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 5, 5), int32] */;
  %1618 = divide(%1617, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 5, 5), int32] */;
  %1619 = divide(%1615, %1618) /* ty=Tensor[(24, 1, 5, 5), int32] */;
  %1620 = greater_equal(%6, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 64, 64), bool] */;
  %1621 = less_equal(%6, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 64, 64), bool] */;
  %1622 = nn.conv2d_transpose(%1606, %v2_conv_1_weight, channels=24, kernel_size=[5, 5], strides=[2, 2], output_padding=[1, 1], padding=[2, 2, 2, 2], groups=24, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %1623 = abs(%1622) /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %1624 = max(%1623, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1625 = divide(%1624, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1626 = divide(%1622, %1625) /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %1627 = multiply(%1620, %1621) /* ty=Tensor[(1, 24, 64, 64), bool] */;
  %1628 = cast(%1626, dtype="int8") /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %1629 = zeros(shape=[1, 24, 64, 64], dtype="int8") /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %1630 = where(%1627, %1628, %1629) /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %1631 = cast(%1630, dtype="int32") /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %1632 = tile(%1630, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 192, 64, 64), int8] */;
  %1633 = reshape(%5, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1634 = reshape(%1632, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 64, 64), int8] */;
  %1635 = nn.conv2d(%1633, %1634, padding=[0, 0, 0, 0], groups=8, out_dtype="int32") /* ty=Tensor[(1, 192, 1, 1), int32] */;
  %1636 = reshape(%1635, newshape=[1, 8, 24, 1, 1]) /* ty=Tensor[(1, 8, 24, 1, 1), int32] */;
  %1637 = sum(%1636, axis=[0]) /* ty=Tensor[(8, 24, 1, 1), int32] */;
  %1638 = transpose(%1637, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 8, 1, 1), int32] */;
  %1639 = abs(%1638) /* ty=Tensor[(24, 8, 1, 1), int32] */;
  %1640 = max(%1639, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %1641 = divide(%1640, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %1642 = divide(%1638, %1641) /* ty=Tensor[(24, 8, 1, 1), int32] */;
  %1643 = greater_equal(%4, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1644 = less_equal(%4, 127 /* ty=int32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1645 = nn.conv2d_transpose(%1630, %v2_conv_0_weight, channels=8, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1646 = abs(%1645) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1647 = max(%1646, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1648 = divide(%1647, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1649 = divide(%1645, %1648) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1650 = multiply(%1643, %1644) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1651 = cast(%1649, dtype="int8") /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1652 = zeros(shape=[1, 8, 64, 64], dtype="int8") /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1653 = where(%1650, %1651, %1652) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1654 = cast(%1653, dtype="int32") /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1655 = tile(%1653, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 128, 64, 64), int8] */;
  %1656 = reshape(%3, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1657 = reshape(%1655, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(128, 1, 64, 64), int8] */;
  %1658 = nn.conv2d(%1656, %1657, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 128, 1, 1), int32] */;
  %1659 = reshape(%1658, newshape=[1, 16, 8, 1, 1]) /* ty=Tensor[(1, 16, 8, 1, 1), int32] */;
  %1660 = sum(%1659, axis=[0]) /* ty=Tensor[(16, 8, 1, 1), int32] */;
  %1661 = transpose(%1660, axes=[1, 0, 2, 3]) /* ty=Tensor[(8, 16, 1, 1), int32] */;
  %1662 = abs(%1661) /* ty=Tensor[(8, 16, 1, 1), int32] */;
  %1663 = max(%1662, axis=[1], keepdims=True) /* ty=Tensor[(8, 1, 1, 1), int32] */;
  %1664 = divide(%1663, 127 /* ty=int32 */) /* ty=Tensor[(8, 1, 1, 1), int32] */;
  %1665 = divide(%1661, %1664) /* ty=Tensor[(8, 16, 1, 1), int32] */;
  %1666 = greater_equal(%2, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1667 = less_equal(%2, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1668 = nn.conv2d_transpose(%1653, %v1_conv_1_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1669 = abs(%1668) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1670 = max(%1669, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1671 = divide(%1670, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1672 = divide(%1668, %1671) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1673 = multiply(%1666, %1667) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1674 = cast(%1672, dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1675 = zeros(shape=[1, 16, 64, 64], dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1676 = where(%1673, %1674, %1675) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1677 = cast(%1676, dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1678 = tile(%1676, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1679 = reshape(%1, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1680 = reshape(%1678, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(16, 1, 64, 64), int8] */;
  %1681 = nn.conv2d(%1679, %1680, padding=[1, 1, 1, 1], groups=16, out_dtype="int32") /* ty=Tensor[(1, 16, 3, 3), int32] */;
  %1682 = reshape(%1681, newshape=[1, 1, 16, 3, 3]) /* ty=Tensor[(1, 1, 16, 3, 3), int32] */;
  %1683 = sum(%1682, axis=[0]) /* ty=Tensor[(1, 16, 3, 3), int32] */;
  %1684 = transpose(%1683, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1685 = abs(%1684) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1686 = max(%1685, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1687 = divide(%1686, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1688 = divide(%1684, %1687) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1689 = greater_equal(%0, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1690 = less_equal(%0, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1691 = nn.conv2d_transpose(%1676, %v1_conv_0_weight, channels=16, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=16, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1692 = abs(%1691) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1693 = max(%1692, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1694 = divide(%1693, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1695 = divide(%1691, %1694) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1696 = multiply(%1689, %1690) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1697 = cast(%1695, dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1698 = zeros(shape=[1, 16, 64, 64], dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1699 = where(%1696, %1697, %1698) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1700 = cast(%1699, dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1701 = tile(%1699, reps=[1, 3, 1, 1]) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %1702 = reshape(%input, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 3, 128, 128), int8] */;
  %1703 = reshape(%1701, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 64, 64), int8] */;
  %1704 = nn.conv2d(%1702, %1703, padding=[1, 1, 1, 1], dilation=[2, 2], groups=3, out_dtype="int32") /* ty=Tensor[(1, 48, 4, 4), int32] */;
  %1705 = reshape(%1704, newshape=[1, 3, 16, 4, 4]) /* ty=Tensor[(1, 3, 16, 4, 4), int32] */;
  %1706 = sum(%1705, axis=[0]) /* ty=Tensor[(3, 16, 4, 4), int32] */;
  %1707 = transpose(%1706, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 3, 4, 4), int32] */;
  %1708 = strided_slice(%1707, begin=[0, 0, 0, 0], end=[16, 3, 3, 3], strides=[1], axes=None) /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %1709 = abs(%1708) /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %1710 = max(%1709, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1711 = divide(%1710, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1712 = divide(%1708, %1711) /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %1713 = nn.cross_entropy_with_logits(%151, %label) /* ty=float32 */;
  %1714 = sum(%165, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %1715 = cast(%177, dtype="int8") /* ty=Tensor[(10, 96, 1, 1), int8] */;
  %1716 = sum(%194, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1717 = cast(%206, dtype="int8") /* ty=Tensor[(96, 384, 1, 1), int8] */;
  %1718 = sum(%219, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %1719 = cast(%230, dtype="int8") /* ty=Tensor[(384, 1, 7, 7), int8] */;
  %1720 = sum(%242, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %1721 = cast(%253, dtype="int8") /* ty=Tensor[(384, 64, 1, 1), int8] */;
  %1722 = sum(%276, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %1723 = cast(%287, dtype="int8") /* ty=Tensor[(64, 192, 1, 1), int8] */;
  %1724 = sum(%299, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1725 = cast(%310, dtype="int8") /* ty=Tensor[(192, 1, 7, 7), int8] */;
  %1726 = sum(%322, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1727 = cast(%333, dtype="int8") /* ty=Tensor[(192, 64, 1, 1), int8] */;
  %1728 = sum(%356, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %1729 = cast(%367, dtype="int8") /* ty=Tensor[(64, 192, 1, 1), int8] */;
  %1730 = sum(%379, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1731 = cast(%390, dtype="int8") /* ty=Tensor[(192, 1, 7, 7), int8] */;
  %1732 = sum(%402, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1733 = cast(%413, dtype="int8") /* ty=Tensor[(192, 64, 1, 1), int8] */;
  %1734 = sum(%436, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %1735 = cast(%447, dtype="int8") /* ty=Tensor[(64, 384, 1, 1), int8] */;
  %1736 = sum(%459, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %1737 = cast(%470, dtype="int8") /* ty=Tensor[(384, 1, 7, 7), int8] */;
  %1738 = sum(%482, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %1739 = cast(%493, dtype="int8") /* ty=Tensor[(384, 64, 1, 1), int8] */;
  %1740 = sum(%505, axis=[1], exclude=True) /* ty=Tensor[(64), int32] */;
  %1741 = cast(%516, dtype="int8") /* ty=Tensor[(64, 192, 1, 1), int8] */;
  %1742 = sum(%528, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1743 = cast(%540, dtype="int8") /* ty=Tensor[(192, 1, 7, 7), int8] */;
  %1744 = sum(%552, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1745 = cast(%563, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %1746 = sum(%586, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %1747 = cast(%597, dtype="int8") /* ty=Tensor[(32, 96, 1, 1), int8] */;
  %1748 = sum(%609, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1749 = cast(%620, dtype="int8") /* ty=Tensor[(96, 1, 5, 5), int8] */;
  %1750 = sum(%632, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1751 = cast(%643, dtype="int8") /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %1752 = sum(%666, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %1753 = cast(%677, dtype="int8") /* ty=Tensor[(32, 96, 1, 1), int8] */;
  %1754 = sum(%689, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1755 = cast(%700, dtype="int8") /* ty=Tensor[(96, 1, 5, 5), int8] */;
  %1756 = sum(%712, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1757 = cast(%723, dtype="int8") /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %1758 = sum(%746, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %1759 = cast(%757, dtype="int8") /* ty=Tensor[(32, 96, 1, 1), int8] */;
  %1760 = sum(%769, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1761 = cast(%780, dtype="int8") /* ty=Tensor[(96, 1, 5, 5), int8] */;
  %1762 = sum(%792, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1763 = cast(%803, dtype="int8") /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %1764 = sum(%815, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %1765 = cast(%826, dtype="int8") /* ty=Tensor[(32, 144, 1, 1), int8] */;
  %1766 = sum(%838, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1767 = cast(%849, dtype="int8") /* ty=Tensor[(144, 1, 5, 5), int8] */;
  %1768 = sum(%861, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1769 = cast(%872, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %1770 = sum(%895, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1771 = cast(%906, dtype="int8") /* ty=Tensor[(24, 72, 1, 1), int8] */;
  %1772 = sum(%918, axis=[1], exclude=True) /* ty=Tensor[(72), int32] */;
  %1773 = cast(%929, dtype="int8") /* ty=Tensor[(72, 1, 5, 5), int8] */;
  %1774 = sum(%941, axis=[1], exclude=True) /* ty=Tensor[(72), int32] */;
  %1775 = cast(%952, dtype="int8") /* ty=Tensor[(72, 24, 1, 1), int8] */;
  %1776 = sum(%975, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1777 = cast(%986, dtype="int8") /* ty=Tensor[(24, 72, 1, 1), int8] */;
  %1778 = sum(%998, axis=[1], exclude=True) /* ty=Tensor[(72), int32] */;
  %1779 = cast(%1009, dtype="int8") /* ty=Tensor[(72, 1, 5, 5), int8] */;
  %1780 = sum(%1021, axis=[1], exclude=True) /* ty=Tensor[(72), int32] */;
  %1781 = cast(%1032, dtype="int8") /* ty=Tensor[(72, 24, 1, 1), int8] */;
  %1782 = sum(%1055, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1783 = cast(%1066, dtype="int8") /* ty=Tensor[(24, 72, 1, 1), int8] */;
  %1784 = sum(%1078, axis=[1], exclude=True) /* ty=Tensor[(72), int32] */;
  %1785 = cast(%1089, dtype="int8") /* ty=Tensor[(72, 1, 5, 5), int8] */;
  %1786 = sum(%1101, axis=[1], exclude=True) /* ty=Tensor[(72), int32] */;
  %1787 = cast(%1112, dtype="int8") /* ty=Tensor[(72, 24, 1, 1), int8] */;
  %1788 = sum(%1124, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1789 = cast(%1135, dtype="int8") /* ty=Tensor[(24, 96, 1, 1), int8] */;
  %1790 = sum(%1147, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1791 = cast(%1159, dtype="int8") /* ty=Tensor[(96, 1, 7, 7), int8] */;
  %1792 = sum(%1171, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1793 = cast(%1182, dtype="int8") /* ty=Tensor[(96, 16, 1, 1), int8] */;
  %1794 = sum(%1205, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1795 = cast(%1216, dtype="int8") /* ty=Tensor[(16, 48, 1, 1), int8] */;
  %1796 = sum(%1228, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1797 = cast(%1239, dtype="int8") /* ty=Tensor[(48, 1, 5, 5), int8] */;
  %1798 = sum(%1251, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1799 = cast(%1262, dtype="int8") /* ty=Tensor[(48, 16, 1, 1), int8] */;
  %1800 = sum(%1285, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1801 = cast(%1296, dtype="int8") /* ty=Tensor[(16, 48, 1, 1), int8] */;
  %1802 = sum(%1308, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1803 = cast(%1319, dtype="int8") /* ty=Tensor[(48, 1, 5, 5), int8] */;
  %1804 = sum(%1331, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1805 = cast(%1342, dtype="int8") /* ty=Tensor[(48, 16, 1, 1), int8] */;
  %1806 = sum(%1365, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1807 = cast(%1376, dtype="int8") /* ty=Tensor[(16, 48, 1, 1), int8] */;
  %1808 = sum(%1388, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1809 = cast(%1399, dtype="int8") /* ty=Tensor[(48, 1, 3, 3), int8] */;
  %1810 = sum(%1411, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1811 = cast(%1422, dtype="int8") /* ty=Tensor[(48, 16, 1, 1), int8] */;
  %1812 = sum(%1434, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1813 = cast(%1445, dtype="int8") /* ty=Tensor[(16, 48, 1, 1), int8] */;
  %1814 = sum(%1457, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1815 = cast(%1469, dtype="int8") /* ty=Tensor[(48, 1, 7, 7), int8] */;
  %1816 = sum(%1481, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1817 = cast(%1492, dtype="int8") /* ty=Tensor[(48, 16, 1, 1), int8] */;
  %1818 = sum(%1515, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1819 = cast(%1526, dtype="int8") /* ty=Tensor[(16, 48, 1, 1), int8] */;
  %1820 = sum(%1538, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1821 = cast(%1549, dtype="int8") /* ty=Tensor[(48, 1, 3, 3), int8] */;
  %1822 = sum(%1561, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1823 = cast(%1572, dtype="int8") /* ty=Tensor[(48, 16, 1, 1), int8] */;
  %1824 = sum(%1584, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1825 = cast(%1595, dtype="int8") /* ty=Tensor[(16, 24, 1, 1), int8] */;
  %1826 = sum(%1607, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1827 = cast(%1619, dtype="int8") /* ty=Tensor[(24, 1, 5, 5), int8] */;
  %1828 = sum(%1631, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1829 = cast(%1642, dtype="int8") /* ty=Tensor[(24, 8, 1, 1), int8] */;
  %1830 = sum(%1654, axis=[1], exclude=True) /* ty=Tensor[(8), int32] */;
  %1831 = cast(%1665, dtype="int8") /* ty=Tensor[(8, 16, 1, 1), int8] */;
  %1832 = sum(%1677, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1833 = cast(%1688, dtype="int8") /* ty=Tensor[(16, 1, 3, 3), int8] */;
  %1834 = sum(%1700, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1835 = cast(%1712, dtype="int8") /* ty=Tensor[(16, 3, 3, 3), int8] */;
  (%1713, %1714, %1715, %1716, %1717, %1718, %1719, %1720, %1721, %1722, %1723, %1724, %1725, %1726, %1727, %1728, %1729, %1730, %1731, %1732, %1733, %1734, %1735, %1736, %1737, %1738, %1739, %1740, %1741, %1742, %1743, %1744, %1745, %1746, %1747, %1748, %1749, %1750, %1751, %1752, %1753, %1754, %1755, %1756, %1757, %1758, %1759, %1760, %1761, %1762, %1763, %1764, %1765, %1766, %1767, %1768, %1769, %1770, %1771, %1772, %1773, %1774, %1775, %1776, %1777, %1778, %1779, %1780, %1781, %1782, %1783, %1784, %1785, %1786, %1787, %1788, %1789, %1790, %1791, %1792, %1793, %1794, %1795, %1796, %1797, %1798, %1799, %1800, %1801, %1802, %1803, %1804, %1805, %1806, %1807, %1808, %1809, %1810, %1811, %1812, %1813, %1814, %1815, %1816, %1817, %1818, %1819, %1820, %1821, %1822, %1823, %1824, %1825, %1826, %1827, %1828, %1829, %1830, %1831, %1832, %1833, %1834, %1835)
}

