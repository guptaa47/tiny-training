def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(32, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(32), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(32), float32], %v2_conv_1_weight: Tensor[(32, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(32), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(32), float32], %v2_conv_2_weight: Tensor[(16, 32, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(24, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(24), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(24), float32], %v5_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v5_conv_0_bias: Tensor[(120), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(120), float32], %v5_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(120), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(120), float32], %v5_conv_2_weight: Tensor[(24, 120, 1, 1), int8], %v5_conv_2_bias: Tensor[(24), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(24), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v6_conv_0_bias: Tensor[(120), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(120), float32], %v6_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(120), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(120), float32], %v6_conv_2_weight: Tensor[(40, 120, 1, 1), int8], %v6_conv_2_bias: Tensor[(40), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(40), float32], %v7_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v7_conv_0_bias: Tensor[(160), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(160), float32], %v7_conv_1_weight: Tensor[(160, 1, 7, 7), int8], %v7_conv_1_bias: Tensor[(160), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(160), float32], %v7_conv_2_weight: Tensor[(40, 160, 1, 1), int8], %v7_conv_2_bias: Tensor[(40), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(40), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v8_conv_0_bias: Tensor[(160), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(160), float32], %v8_conv_1_weight: Tensor[(160, 1, 5, 5), int8], %v8_conv_1_bias: Tensor[(160), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(160), float32], %v8_conv_2_weight: Tensor[(48, 160, 1, 1), int8], %v8_conv_2_bias: Tensor[(48), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(48), float32], %v9_conv_0_weight: Tensor[(144, 48, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(48, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(48), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(48), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(192, 48, 1, 1), int8], %v10_conv_0_bias: Tensor[(192), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(192), float32], %v10_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(192), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(192), float32], %v10_conv_2_weight: Tensor[(48, 192, 1, 1), int8], %v10_conv_2_bias: Tensor[(48), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(48), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(240, 48, 1, 1), int8], %v11_conv_0_bias: Tensor[(240), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(240), float32], %v11_conv_1_weight: Tensor[(240, 1, 7, 7), int8], %v11_conv_1_bias: Tensor[(240), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(240), float32], %v11_conv_2_weight: Tensor[(96, 240, 1, 1), int8], %v11_conv_2_bias: Tensor[(96), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(96), float32], %v12_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v12_conv_0_bias: Tensor[(384), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(384), float32], %v12_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(384), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(384), float32], %v12_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v12_conv_2_bias: Tensor[(96), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(96), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v13_conv_0_bias: Tensor[(384), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(384), float32], %v13_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(384), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(384), float32], %v13_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v13_conv_2_bias: Tensor[(96), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(96), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(576, 96, 1, 1), int8], %v14_conv_0_bias: Tensor[(576), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(576), float32], %v14_conv_1_weight: Tensor[(576, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(576), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(576), float32], %v14_conv_2_weight: Tensor[(160, 576, 1, 1), int8], %v14_conv_2_bias: Tensor[(160), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(160), float32], %v15_weight: Tensor[(10, 160, 1, 1), int8], %v15_bias: Tensor[(10), int32], %v15_zero_x: Tensor[(1), int8], %v15_zero_y: Tensor[(1), int8], %v15_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 160, 1, 1), int8], Tensor[(160), int32], Tensor[(576), int32], Tensor[(576), int32], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(96), int32], Tensor[(240), int32], Tensor[(240), int32], Tensor[(240, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(192), int32], Tensor[(192), float32], Tensor[(192, 24, 1, 1), float32], Tensor[(48), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(160), int32], Tensor[(160), int32], Tensor[(160, 40, 1, 1), int8]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=32) /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %40 = nn.mcuconv2d(%39, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[3, 3, 3, 3], groups=160) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %46 = nn.mcuadd(%39, %45, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[2, 2, 2, 2], groups=160) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %60 = nn.mcuadd(%53, %59, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %62 = nn.mcuconv2d(%61, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %68 = nn.mcuadd(%61, %67, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %70 = nn.mcuconv2d(%69, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=240) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %76 = nn.mcuconv2d(%75, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %82 = nn.mcuadd(%75, %81, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %84 = nn.mcuconv2d(%83, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %90 = nn.mcuadd(%83, %89, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %92 = nn.mcuconv2d(%91, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[1, 1, 1, 1], groups=576) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 160, 4, 4), int8] */;
  %98 = mcumean(%97, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %99 = nn.mcuconv2d(%98, %v15_weight, %v15_bias, %v15_zero_x, %v15_zero_y, %v15_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %100 = nn.mcutruncate(%99) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %101 = reshape(%100, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %103 = nn.log_softmax(%102) /* ty=Tensor[(1, 10), float32] */;
  %104 = greater_equal(%99, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %105 = less_equal(%99, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %106 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %107 = negative(%106) /* ty=float32 */;
  %108 = multiply(%107, %label) /* ty=Tensor[(1, 10), float32] */;
  %109 = sum(%108, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %110 = exp(%103) /* ty=Tensor[(1, 10), float32] */;
  %111 = multiply(%109, %110) /* ty=Tensor[(1, 10), float32] */;
  %112 = subtract(%108, %111) /* ty=Tensor[(1, 10), float32] */;
  %113 = multiply(%104, %105) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %114 = reshape(%112, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %115 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %116 = where(%113, %114, %115) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %117 = cast(%116, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %118 = reshape(%98, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %119 = tile(%116, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %120 = cast(%118, dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %121 = reshape(%119, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1600, 1, 1, 1), float32] */;
  %122 = nn.conv2d(%120, %121, padding=[0, 0, 0, 0], groups=160, out_dtype="float32") /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %123 = reshape(%122, newshape=[1, 160, 10, 1, 1]) /* ty=Tensor[(1, 160, 10, 1, 1), float32] */;
  %124 = sum(%123, axis=[0]) /* ty=Tensor[(160, 10, 1, 1), float32] */;
  %125 = transpose(%124, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %126 = abs(%125) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %127 = max(%126, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %128 = divide(%127, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %129 = divide(%125, %128) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %130 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %131 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %132 = cast(%v15_weight, dtype="float32") /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %133 = nn.conv2d_transpose(%116, %132, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %134 = abs(%133) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %135 = max(%134, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %136 = divide(%135, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %137 = divide(%133, %136) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %138 = cast(%137, dtype="int8") /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %140 = multiply(%139, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %141 = ones(shape=[1, 160, 4, 4], dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %142 = multiply(%130, %131) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %143 = multiply(%140, %141) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %144 = zeros(shape=[1, 160, 4, 4], dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %145 = where(%142, %143, %144) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %146 = cast(%145, dtype="int32") /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %147 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %148 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %149 = cast(%v14_conv_2_weight, dtype="float32") /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %150 = nn.conv2d_transpose(%145, %149, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %151 = abs(%150) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %152 = max(%151, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %153 = divide(%152, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %154 = divide(%150, %153) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %155 = multiply(%147, %148) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %156 = cast(%154, dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %157 = zeros(shape=[1, 576, 4, 4], dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %158 = where(%155, %156, %157) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %159 = cast(%158, dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %160 = greater_equal(%92, -128 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %161 = less_equal(%92, 127 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %162 = nn.conv2d_transpose(%158, %v14_conv_1_weight, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %163 = abs(%162) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %164 = max(%163, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %165 = divide(%164, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %166 = divide(%162, %165) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %167 = multiply(%160, %161) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %168 = cast(%166, dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %169 = zeros(shape=[1, 576, 4, 4], dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %170 = where(%167, %168, %169) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %171 = cast(%170, dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %172 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %173 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %174 = greater_equal(%90, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %175 = less_equal(%90, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %176 = nn.conv2d_transpose(%170, %v14_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %177 = abs(%176) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %178 = max(%177, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %179 = divide(%178, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %180 = divide(%176, %179) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %181 = multiply(%174, %175) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %182 = cast(%180, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %183 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %184 = where(%181, %182, %183) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %185 = cast(%184, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %186 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %187 = divide(%185, %186) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %188 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %189 = multiply(%187, %188) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %190 = multiply(%172, %173) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %191 = cast(%189, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %192 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %193 = where(%190, %191, %192) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %194 = cast(%193, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %195 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %196 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %197 = nn.conv2d_transpose(%193, %v13_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %198 = abs(%197) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %199 = max(%198, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %200 = divide(%199, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %201 = divide(%197, %200) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %202 = multiply(%195, %196) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %203 = cast(%201, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %204 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %205 = where(%202, %203, %204) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %206 = cast(%205, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %207 = greater_equal(%84, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %208 = less_equal(%84, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %209 = nn.conv2d_transpose(%205, %v13_conv_1_weight, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %210 = abs(%209) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %211 = max(%210, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %212 = divide(%211, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %213 = divide(%209, %212) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %214 = multiply(%207, %208) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %215 = cast(%213, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %216 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %217 = where(%214, %215, %216) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %218 = cast(%217, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %219 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %220 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %221 = greater_equal(%82, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %222 = less_equal(%82, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %223 = nn.conv2d_transpose(%217, %v13_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %224 = abs(%223) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %225 = max(%224, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %226 = divide(%225, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %227 = divide(%223, %226) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %228 = multiply(%221, %222) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %229 = cast(%227, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %230 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %231 = where(%228, %229, %230) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %232 = cast(%231, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %233 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %234 = divide(%232, %233) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %235 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %236 = multiply(%234, %235) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %237 = multiply(%219, %220) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %238 = cast(%236, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %239 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %240 = where(%237, %238, %239) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %241 = cast(%240, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %242 = greater_equal(%78, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %243 = less_equal(%78, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %244 = nn.conv2d_transpose(%240, %v12_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %245 = abs(%244) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %246 = max(%245, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %247 = divide(%246, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %248 = divide(%244, %247) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %249 = multiply(%242, %243) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %250 = cast(%248, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %251 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %252 = where(%249, %250, %251) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %253 = cast(%252, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %254 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %255 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %256 = nn.conv2d_transpose(%252, %v12_conv_1_weight, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %257 = abs(%256) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %258 = max(%257, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %259 = divide(%258, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %260 = divide(%256, %259) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %261 = multiply(%254, %255) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %262 = cast(%260, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %263 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %264 = where(%261, %262, %263) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %265 = cast(%264, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %266 = greater_equal(%74, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %267 = less_equal(%74, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %268 = nn.conv2d_transpose(%264, %v12_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %269 = abs(%268) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %270 = max(%269, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %271 = divide(%270, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %272 = divide(%268, %271) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %273 = multiply(%266, %267) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %274 = cast(%272, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %275 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %276 = where(%273, %274, %275) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %277 = cast(%276, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %278 = greater_equal(%72, -128 /* ty=int32 */) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %279 = less_equal(%72, 127 /* ty=int32 */) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %280 = nn.conv2d_transpose(%276, %v11_conv_2_weight, channels=240, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %281 = abs(%280) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %282 = max(%281, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %283 = divide(%282, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %284 = divide(%280, %283) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %285 = multiply(%278, %279) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %286 = cast(%284, dtype="int8") /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %287 = zeros(shape=[1, 240, 4, 4], dtype="int8") /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %288 = where(%285, %286, %287) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %289 = cast(%288, dtype="int32") /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %290 = greater_equal(%70, -128 /* ty=int32 */) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %291 = less_equal(%70, 127 /* ty=int32 */) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %292 = nn.conv2d_transpose(%288, %v11_conv_1_weight, channels=240, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=240, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %293 = abs(%292) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %294 = max(%293, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %295 = divide(%294, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %296 = divide(%292, %295) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %297 = multiply(%290, %291) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %298 = cast(%296, dtype="int8") /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %299 = zeros(shape=[1, 240, 8, 8], dtype="int8") /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %300 = where(%297, %298, %299) /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %301 = cast(%300, dtype="int32") /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %302 = tile(%300, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 11520, 8, 8), int8] */;
  %303 = reshape(%69, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %304 = reshape(%302, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(11520, 1, 8, 8), int8] */;
  %305 = nn.conv2d(%303, %304, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 11520, 1, 1), int32] */;
  %306 = reshape(%305, newshape=[1, 48, 240, 1, 1]) /* ty=Tensor[(1, 48, 240, 1, 1), int32] */;
  %307 = sum(%306, axis=[0]) /* ty=Tensor[(48, 240, 1, 1), int32] */;
  %308 = transpose(%307, axes=[1, 0, 2, 3]) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %309 = abs(%308) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %310 = max(%309, axis=[1], keepdims=True) /* ty=Tensor[(240, 1, 1, 1), int32] */;
  %311 = divide(%310, 127 /* ty=int32 */) /* ty=Tensor[(240, 1, 1, 1), int32] */;
  %312 = divide(%308, %311) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %313 = greater_equal(%66, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %314 = less_equal(%66, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %315 = greater_equal(%68, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %316 = less_equal(%68, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %317 = nn.conv2d_transpose(%300, %v11_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %318 = abs(%317) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %319 = max(%318, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %320 = divide(%319, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %321 = divide(%317, %320) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %322 = multiply(%315, %316) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %323 = cast(%321, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %324 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %325 = where(%322, %323, %324) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %327 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %328 = divide(%326, %327) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %329 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %330 = multiply(%328, %329) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %331 = multiply(%313, %314) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %332 = cast(%330, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %333 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %334 = where(%331, %332, %333) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %335 = cast(%334, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %336 = greater_equal(%64, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %337 = less_equal(%64, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %338 = nn.conv2d_transpose(%334, %v10_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %339 = abs(%338) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %340 = max(%339, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %341 = divide(%340, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %342 = divide(%338, %341) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %343 = multiply(%336, %337) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %344 = cast(%342, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %345 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %346 = where(%343, %344, %345) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %347 = cast(%346, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %348 = greater_equal(%62, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %349 = less_equal(%62, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %350 = nn.conv2d_transpose(%346, %v10_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %351 = abs(%350) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %352 = max(%351, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %353 = divide(%352, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %354 = divide(%350, %353) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %355 = multiply(%348, %349) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %356 = cast(%354, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %357 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %358 = where(%355, %356, %357) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %359 = cast(%358, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %360 = reshape(%v10_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %361 = multiply(%359, %360) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %362 = cast(%61, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %363 = strided_slice(%362, begin=[0, 0, 0, 0], end=[1, 24, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %364 = tile(%361, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 4608, 8, 8), float32] */;
  %365 = reshape(%363, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %366 = reshape(%364, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4608, 1, 8, 8), float32] */;
  %367 = nn.conv2d(%365, %366, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 4608, 1, 1), float32] */;
  %368 = reshape(%367, newshape=[1, 24, 192, 1, 1]) /* ty=Tensor[(1, 24, 192, 1, 1), float32] */;
  %369 = sum(%368, axis=[0]) /* ty=Tensor[(24, 192, 1, 1), float32] */;
  %370 = greater_equal(%58, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %371 = less_equal(%58, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %372 = greater_equal(%60, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %373 = less_equal(%60, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %374 = cast(%v10_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 48, 1, 1), float32] */;
  %375 = multiply(%372, %373) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %376 = nn.conv2d_transpose(%361, %374, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %377 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %378 = where(%375, %376, %377) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %379 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %380 = divide(%378, %379) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %381 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %382 = multiply(%370, %371) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %383 = multiply(%380, %381) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %384 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %385 = where(%382, %383, %384) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %386 = cast(%385, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %387 = greater_equal(%56, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %388 = less_equal(%56, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %389 = cast(%v9_conv_2_weight, dtype="float32") /* ty=Tensor[(48, 144, 1, 1), float32] */;
  %390 = nn.conv2d_transpose(%385, %389, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %391 = abs(%390) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %392 = max(%391, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %393 = divide(%392, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 8, 8), float32] */;
  %394 = divide(%390, %393) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %395 = multiply(%387, %388) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %396 = cast(%394, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %397 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %398 = where(%395, %396, %397) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %399 = cast(%398, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %400 = greater_equal(%54, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %401 = less_equal(%54, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %402 = nn.conv2d_transpose(%398, %v9_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %403 = abs(%402) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %404 = max(%403, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %405 = divide(%404, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %406 = divide(%402, %405) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %407 = multiply(%400, %401) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %408 = cast(%406, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %409 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %410 = where(%407, %408, %409) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %411 = cast(%410, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %412 = tile(%410, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 6912, 8, 8), int8] */;
  %413 = reshape(%53, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %414 = reshape(%412, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6912, 1, 8, 8), int8] */;
  %415 = nn.conv2d(%413, %414, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 6912, 1, 1), int32] */;
  %416 = reshape(%415, newshape=[1, 48, 144, 1, 1]) /* ty=Tensor[(1, 48, 144, 1, 1), int32] */;
  %417 = sum(%416, axis=[0]) /* ty=Tensor[(48, 144, 1, 1), int32] */;
  %418 = transpose(%417, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %419 = abs(%418) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %420 = max(%419, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %421 = divide(%420, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %422 = divide(%418, %421) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %423 = greater_equal(%52, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %424 = less_equal(%52, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %425 = nn.conv2d_transpose(%410, %v9_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %426 = abs(%425) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %427 = max(%426, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %428 = divide(%427, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %429 = divide(%425, %428) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %430 = multiply(%423, %424) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %431 = cast(%429, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %432 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %433 = where(%430, %431, %432) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %434 = cast(%433, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %435 = greater_equal(%50, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %436 = less_equal(%50, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %437 = nn.conv2d_transpose(%433, %v8_conv_2_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %438 = abs(%437) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %439 = max(%438, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %440 = divide(%439, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %441 = divide(%437, %440) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %442 = multiply(%435, %436) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %443 = cast(%441, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %444 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %445 = where(%442, %443, %444) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %446 = cast(%445, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %447 = greater_equal(%48, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %448 = less_equal(%48, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %449 = nn.conv2d_transpose(%445, %v8_conv_1_weight, channels=160, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=160, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %450 = abs(%449) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %451 = max(%450, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %452 = divide(%451, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %453 = divide(%449, %452) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %454 = multiply(%447, %448) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %455 = cast(%453, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %456 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %457 = where(%454, %455, %456) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %458 = cast(%457, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %459 = tile(%457, reps=[1, 40, 1, 1]) /* ty=Tensor[(1, 6400, 8, 8), int8] */;
  %460 = reshape(%47, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %461 = reshape(%459, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6400, 1, 8, 8), int8] */;
  %462 = nn.conv2d(%460, %461, padding=[0, 0, 0, 0], groups=40, out_dtype="int32") /* ty=Tensor[(1, 6400, 1, 1), int32] */;
  %463 = reshape(%462, newshape=[1, 40, 160, 1, 1]) /* ty=Tensor[(1, 40, 160, 1, 1), int32] */;
  %464 = sum(%463, axis=[0]) /* ty=Tensor[(40, 160, 1, 1), int32] */;
  %465 = transpose(%464, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %466 = abs(%465) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %467 = max(%466, axis=[1], keepdims=True) /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %468 = divide(%467, 127 /* ty=int32 */) /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %469 = divide(%465, %468) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %470 = nn.cross_entropy_with_logits(%103, %label) /* ty=float32 */;
  %471 = sum(%117, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %472 = cast(%129, dtype="int8") /* ty=Tensor[(10, 160, 1, 1), int8] */;
  %473 = sum(%146, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %474 = sum(%159, axis=[1], exclude=True) /* ty=Tensor[(576), int32] */;
  %475 = sum(%171, axis=[1], exclude=True) /* ty=Tensor[(576), int32] */;
  %476 = sum(%194, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %477 = sum(%206, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %478 = sum(%218, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %479 = sum(%241, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %480 = sum(%253, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %481 = sum(%265, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %482 = sum(%277, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %483 = sum(%289, axis=[1], exclude=True) /* ty=Tensor[(240), int32] */;
  %484 = sum(%301, axis=[1], exclude=True) /* ty=Tensor[(240), int32] */;
  %485 = cast(%312, dtype="int8") /* ty=Tensor[(240, 48, 1, 1), int8] */;
  %486 = sum(%335, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %487 = sum(%347, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %488 = sum(%361, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %489 = transpose(%369, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 24, 1, 1), float32] */;
  %490 = sum(%386, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %491 = sum(%399, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %492 = sum(%411, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %493 = cast(%422, dtype="int8") /* ty=Tensor[(144, 48, 1, 1), int8] */;
  %494 = sum(%434, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %495 = sum(%446, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %496 = sum(%458, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %497 = cast(%469, dtype="int8") /* ty=Tensor[(160, 40, 1, 1), int8] */;
  (%470, %471, %472, %473, %474, %475, %476, %477, %478, %479, %480, %481, %482, %483, %484, %485, %486, %487, %488, %489, %490, %491, %492, %493, %494, %495, %496, %497)
}

