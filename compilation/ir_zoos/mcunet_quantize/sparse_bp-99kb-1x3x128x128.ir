def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(32, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(32), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(32), float32], %v2_conv_1_weight: Tensor[(32, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(32), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(32), float32], %v2_conv_2_weight: Tensor[(16, 32, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(24, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(24), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(24), float32], %v5_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v5_conv_0_bias: Tensor[(120), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(120), float32], %v5_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(120), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(120), float32], %v5_conv_2_weight: Tensor[(24, 120, 1, 1), int8], %v5_conv_2_bias: Tensor[(24), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(24), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v6_conv_0_bias: Tensor[(120), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(120), float32], %v6_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(120), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(120), float32], %v6_conv_2_weight: Tensor[(40, 120, 1, 1), int8], %v6_conv_2_bias: Tensor[(40), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(40), float32], %v7_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v7_conv_0_bias: Tensor[(160), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(160), float32], %v7_conv_1_weight: Tensor[(160, 1, 7, 7), int8], %v7_conv_1_bias: Tensor[(160), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(160), float32], %v7_conv_2_weight: Tensor[(40, 160, 1, 1), int8], %v7_conv_2_bias: Tensor[(40), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(40), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v8_conv_0_bias: Tensor[(160), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(160), float32], %v8_conv_1_weight: Tensor[(160, 1, 5, 5), int8], %v8_conv_1_bias: Tensor[(160), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(160), float32], %v8_conv_2_weight: Tensor[(48, 160, 1, 1), int8], %v8_conv_2_bias: Tensor[(48), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(48), float32], %v9_conv_0_weight: Tensor[(144, 48, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(48, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(48), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(48), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(192, 48, 1, 1), int8], %v10_conv_0_bias: Tensor[(192), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(192), float32], %v10_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(192), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(192), float32], %v10_conv_2_weight: Tensor[(48, 192, 1, 1), int8], %v10_conv_2_bias: Tensor[(48), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(48), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(240, 48, 1, 1), int8], %v11_conv_0_bias: Tensor[(240), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(240), float32], %v11_conv_1_weight: Tensor[(240, 1, 7, 7), int8], %v11_conv_1_bias: Tensor[(240), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(240), float32], %v11_conv_2_weight: Tensor[(96, 240, 1, 1), int8], %v11_conv_2_bias: Tensor[(96), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(96), float32], %v12_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v12_conv_0_bias: Tensor[(384), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(384), float32], %v12_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(384), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(384), float32], %v12_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v12_conv_2_bias: Tensor[(96), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(96), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v13_conv_0_bias: Tensor[(384), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(384), float32], %v13_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(384), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(384), float32], %v13_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v13_conv_2_bias: Tensor[(96), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(96), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(576, 96, 1, 1), int8], %v14_conv_0_bias: Tensor[(576), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(576), float32], %v14_conv_1_weight: Tensor[(576, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(576), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(576), float32], %v14_conv_2_weight: Tensor[(160, 576, 1, 1), int8], %v14_conv_2_bias: Tensor[(160), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(160), float32], %v15_weight: Tensor[(10, 160, 1, 1), int8], %v15_bias: Tensor[(10), int32], %v15_zero_x: Tensor[(1), int8], %v15_zero_y: Tensor[(1), int8], %v15_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 160, 1, 1), int8], Tensor[(160), int32], Tensor[(576), int32], Tensor[(576), float32], Tensor[(576, 24, 1, 1), float32], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), float32], Tensor[(384, 12, 1, 1), float32], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(96), int32], Tensor[(240), int32], Tensor[(240), int32], Tensor[(240, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(160), int32], Tensor[(160), int32], Tensor[(160, 40, 1, 1), int8], Tensor[(40), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=32) /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %40 = nn.mcuconv2d(%39, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[3, 3, 3, 3], groups=160) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %46 = nn.mcuadd(%39, %45, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[2, 2, 2, 2], groups=160) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %60 = nn.mcuadd(%53, %59, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %62 = nn.mcuconv2d(%61, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %68 = nn.mcuadd(%61, %67, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %70 = nn.mcuconv2d(%69, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=240) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %76 = nn.mcuconv2d(%75, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %82 = nn.mcuadd(%75, %81, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %84 = nn.mcuconv2d(%83, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %90 = nn.mcuadd(%83, %89, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %92 = nn.mcuconv2d(%91, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[1, 1, 1, 1], groups=576) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 160, 4, 4), int8] */;
  %98 = mcumean(%97, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %99 = nn.mcuconv2d(%98, %v15_weight, %v15_bias, %v15_zero_x, %v15_zero_y, %v15_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %100 = nn.mcutruncate(%99) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %101 = reshape(%100, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %103 = nn.log_softmax(%102) /* ty=Tensor[(1, 10), float32] */;
  %104 = greater_equal(%99, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %105 = less_equal(%99, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %106 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %107 = negative(%106) /* ty=float32 */;
  %108 = multiply(%107, %label) /* ty=Tensor[(1, 10), float32] */;
  %109 = sum(%108, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %110 = exp(%103) /* ty=Tensor[(1, 10), float32] */;
  %111 = multiply(%109, %110) /* ty=Tensor[(1, 10), float32] */;
  %112 = subtract(%108, %111) /* ty=Tensor[(1, 10), float32] */;
  %113 = multiply(%104, %105) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %114 = reshape(%112, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %115 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %116 = where(%113, %114, %115) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %117 = cast(%116, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %118 = reshape(%98, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %119 = tile(%116, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %120 = cast(%118, dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %121 = reshape(%119, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1600, 1, 1, 1), float32] */;
  %122 = nn.conv2d(%120, %121, padding=[0, 0, 0, 0], groups=160, out_dtype="float32") /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %123 = reshape(%122, newshape=[1, 160, 10, 1, 1]) /* ty=Tensor[(1, 160, 10, 1, 1), float32] */;
  %124 = sum(%123, axis=[0]) /* ty=Tensor[(160, 10, 1, 1), float32] */;
  %125 = transpose(%124, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %126 = abs(%125) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %127 = max(%126, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %128 = divide(%127, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %129 = divide(%125, %128) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %130 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %131 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %132 = cast(%v15_weight, dtype="float32") /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %133 = nn.conv2d_transpose(%116, %132, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %134 = abs(%133) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %135 = max(%134, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %136 = divide(%135, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %137 = divide(%133, %136) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %138 = cast(%137, dtype="int8") /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %140 = multiply(%139, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %141 = ones(shape=[1, 160, 4, 4], dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %142 = multiply(%130, %131) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %143 = multiply(%140, %141) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %144 = zeros(shape=[1, 160, 4, 4], dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %145 = where(%142, %143, %144) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %146 = cast(%145, dtype="int32") /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %147 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %148 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %149 = cast(%v14_conv_2_weight, dtype="float32") /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %150 = nn.conv2d_transpose(%145, %149, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %151 = abs(%150) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %152 = max(%151, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %153 = divide(%152, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %154 = divide(%150, %153) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %155 = multiply(%147, %148) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %156 = cast(%154, dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %157 = zeros(shape=[1, 576, 4, 4], dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %158 = where(%155, %156, %157) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %159 = cast(%158, dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %160 = greater_equal(%92, -128 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %161 = less_equal(%92, 127 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %162 = nn.conv2d_transpose(%158, %v14_conv_1_weight, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %163 = abs(%162) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %164 = max(%163, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %165 = divide(%164, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %166 = divide(%162, %165) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %167 = multiply(%160, %161) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %168 = cast(%166, dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %169 = zeros(shape=[1, 576, 4, 4], dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %170 = where(%167, %168, %169) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %172 = reshape(%v14_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 576, 1, 1), float32] */;
  %173 = multiply(%171, %172) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %174 = cast(%91, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %175 = strided_slice(%174, begin=[0, 0, 0, 0], end=[1, 24, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 24, 4, 4), float32] */;
  %176 = tile(%173, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 13824, 4, 4), float32] */;
  %177 = reshape(%175, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 4, 4), float32] */;
  %178 = reshape(%176, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(13824, 1, 4, 4), float32] */;
  %179 = nn.conv2d(%177, %178, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 13824, 1, 1), float32] */;
  %180 = reshape(%179, newshape=[1, 24, 576, 1, 1]) /* ty=Tensor[(1, 24, 576, 1, 1), float32] */;
  %181 = sum(%180, axis=[0]) /* ty=Tensor[(24, 576, 1, 1), float32] */;
  %182 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %183 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %184 = greater_equal(%90, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %185 = less_equal(%90, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %186 = cast(%v14_conv_0_weight, dtype="float32") /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %187 = multiply(%184, %185) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %188 = nn.conv2d_transpose(%173, %186, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %189 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %190 = where(%187, %188, %189) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %191 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %192 = divide(%190, %191) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %193 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %194 = multiply(%182, %183) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %195 = multiply(%192, %193) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %196 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %197 = where(%194, %195, %196) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %198 = cast(%197, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %199 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %200 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %201 = cast(%v13_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %202 = nn.conv2d_transpose(%197, %201, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %203 = abs(%202) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %204 = max(%203, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %205 = divide(%204, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %206 = divide(%202, %205) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %207 = multiply(%199, %200) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %208 = cast(%206, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %209 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %210 = where(%207, %208, %209) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %211 = cast(%210, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %212 = greater_equal(%84, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %213 = less_equal(%84, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %214 = nn.conv2d_transpose(%210, %v13_conv_1_weight, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %215 = abs(%214) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %216 = max(%215, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %217 = divide(%216, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %218 = divide(%214, %217) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %219 = multiply(%212, %213) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %220 = cast(%218, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %221 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %222 = where(%219, %220, %221) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %223 = cast(%222, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %224 = reshape(%v13_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %225 = multiply(%223, %224) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %226 = cast(%83, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %227 = strided_slice(%226, begin=[0, 0, 0, 0], end=[1, 12, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 12, 4, 4), float32] */;
  %228 = tile(%225, reps=[1, 12, 1, 1]) /* ty=Tensor[(1, 4608, 4, 4), float32] */;
  %229 = reshape(%227, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 12, 4, 4), float32] */;
  %230 = reshape(%228, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4608, 1, 4, 4), float32] */;
  %231 = nn.conv2d(%229, %230, padding=[0, 0, 0, 0], groups=12) /* ty=Tensor[(1, 4608, 1, 1), float32] */;
  %232 = reshape(%231, newshape=[1, 12, 384, 1, 1]) /* ty=Tensor[(1, 12, 384, 1, 1), float32] */;
  %233 = sum(%232, axis=[0]) /* ty=Tensor[(12, 384, 1, 1), float32] */;
  %234 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %235 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %236 = greater_equal(%82, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %237 = less_equal(%82, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %238 = cast(%v13_conv_0_weight, dtype="float32") /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %239 = multiply(%236, %237) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %240 = nn.conv2d_transpose(%225, %238, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %241 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %242 = where(%239, %240, %241) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %243 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %244 = divide(%242, %243) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %245 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %246 = multiply(%234, %235) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %247 = multiply(%244, %245) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %248 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %249 = where(%246, %247, %248) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %250 = cast(%249, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %251 = greater_equal(%78, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %252 = less_equal(%78, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %253 = cast(%v12_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %254 = nn.conv2d_transpose(%249, %253, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %255 = abs(%254) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %256 = max(%255, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %257 = divide(%256, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %258 = divide(%254, %257) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %259 = multiply(%251, %252) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %260 = cast(%258, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %261 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %262 = where(%259, %260, %261) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %263 = cast(%262, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %264 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %265 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %266 = nn.conv2d_transpose(%262, %v12_conv_1_weight, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %267 = abs(%266) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %268 = max(%267, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %269 = divide(%268, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %270 = divide(%266, %269) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %271 = multiply(%264, %265) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %272 = cast(%270, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %273 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %274 = where(%271, %272, %273) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %275 = cast(%274, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %276 = greater_equal(%74, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %277 = less_equal(%74, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %278 = nn.conv2d_transpose(%274, %v12_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %279 = abs(%278) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %280 = max(%279, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %281 = divide(%280, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %282 = divide(%278, %281) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %283 = multiply(%276, %277) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %284 = cast(%282, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %285 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %286 = where(%283, %284, %285) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %287 = cast(%286, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %288 = greater_equal(%72, -128 /* ty=int32 */) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %289 = less_equal(%72, 127 /* ty=int32 */) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %290 = nn.conv2d_transpose(%286, %v11_conv_2_weight, channels=240, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %291 = abs(%290) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %292 = max(%291, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %293 = divide(%292, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %294 = divide(%290, %293) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %295 = multiply(%288, %289) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %296 = cast(%294, dtype="int8") /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %297 = zeros(shape=[1, 240, 4, 4], dtype="int8") /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %298 = where(%295, %296, %297) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %299 = cast(%298, dtype="int32") /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %300 = greater_equal(%70, -128 /* ty=int32 */) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %301 = less_equal(%70, 127 /* ty=int32 */) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %302 = nn.conv2d_transpose(%298, %v11_conv_1_weight, channels=240, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=240, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %303 = abs(%302) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %304 = max(%303, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %305 = divide(%304, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %306 = divide(%302, %305) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %307 = multiply(%300, %301) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %308 = cast(%306, dtype="int8") /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %309 = zeros(shape=[1, 240, 8, 8], dtype="int8") /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %310 = where(%307, %308, %309) /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %311 = cast(%310, dtype="int32") /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %312 = tile(%310, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 11520, 8, 8), int8] */;
  %313 = reshape(%69, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %314 = reshape(%312, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(11520, 1, 8, 8), int8] */;
  %315 = nn.conv2d(%313, %314, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 11520, 1, 1), int32] */;
  %316 = reshape(%315, newshape=[1, 48, 240, 1, 1]) /* ty=Tensor[(1, 48, 240, 1, 1), int32] */;
  %317 = sum(%316, axis=[0]) /* ty=Tensor[(48, 240, 1, 1), int32] */;
  %318 = transpose(%317, axes=[1, 0, 2, 3]) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %319 = abs(%318) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %320 = max(%319, axis=[1], keepdims=True) /* ty=Tensor[(240, 1, 1, 1), int32] */;
  %321 = divide(%320, 127 /* ty=int32 */) /* ty=Tensor[(240, 1, 1, 1), int32] */;
  %322 = divide(%318, %321) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %323 = greater_equal(%66, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %324 = less_equal(%66, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %325 = greater_equal(%68, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %326 = less_equal(%68, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %327 = nn.conv2d_transpose(%310, %v11_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %328 = abs(%327) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %329 = max(%328, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %330 = divide(%329, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %331 = divide(%327, %330) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %332 = multiply(%325, %326) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %333 = cast(%331, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %334 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %335 = where(%332, %333, %334) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %337 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %338 = divide(%336, %337) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %339 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %340 = multiply(%338, %339) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %341 = multiply(%323, %324) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %342 = cast(%340, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %343 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %344 = where(%341, %342, %343) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %345 = cast(%344, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %346 = greater_equal(%64, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %347 = less_equal(%64, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %348 = nn.conv2d_transpose(%344, %v10_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %349 = abs(%348) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %350 = max(%349, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %351 = divide(%350, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %352 = divide(%348, %351) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %353 = multiply(%346, %347) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %354 = cast(%352, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %355 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %356 = where(%353, %354, %355) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %357 = cast(%356, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %358 = greater_equal(%62, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %359 = less_equal(%62, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %360 = nn.conv2d_transpose(%356, %v10_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %361 = abs(%360) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %362 = max(%361, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %363 = divide(%362, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %364 = divide(%360, %363) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %365 = multiply(%358, %359) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %366 = cast(%364, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %367 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %368 = where(%365, %366, %367) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %369 = cast(%368, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %370 = tile(%368, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 9216, 8, 8), int8] */;
  %371 = reshape(%61, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %372 = reshape(%370, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(9216, 1, 8, 8), int8] */;
  %373 = nn.conv2d(%371, %372, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 9216, 1, 1), int32] */;
  %374 = reshape(%373, newshape=[1, 48, 192, 1, 1]) /* ty=Tensor[(1, 48, 192, 1, 1), int32] */;
  %375 = sum(%374, axis=[0]) /* ty=Tensor[(48, 192, 1, 1), int32] */;
  %376 = transpose(%375, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %377 = abs(%376) /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %378 = max(%377, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %379 = divide(%378, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %380 = divide(%376, %379) /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %381 = greater_equal(%58, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %382 = less_equal(%58, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %383 = greater_equal(%60, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %384 = less_equal(%60, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %385 = nn.conv2d_transpose(%368, %v10_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %386 = abs(%385) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %387 = max(%386, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %388 = divide(%387, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %389 = divide(%385, %388) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %390 = multiply(%383, %384) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %391 = cast(%389, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %392 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %393 = where(%390, %391, %392) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %395 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %396 = divide(%394, %395) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %397 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %398 = multiply(%396, %397) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %399 = multiply(%381, %382) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %400 = cast(%398, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %401 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %402 = where(%399, %400, %401) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %403 = cast(%402, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %404 = greater_equal(%56, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %405 = less_equal(%56, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %406 = nn.conv2d_transpose(%402, %v9_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %407 = abs(%406) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %408 = max(%407, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %409 = divide(%408, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %410 = divide(%406, %409) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %411 = multiply(%404, %405) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %412 = cast(%410, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %413 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %414 = where(%411, %412, %413) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %415 = cast(%414, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %416 = greater_equal(%54, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %417 = less_equal(%54, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %418 = nn.conv2d_transpose(%414, %v9_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %419 = abs(%418) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %420 = max(%419, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %421 = divide(%420, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %422 = divide(%418, %421) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %423 = multiply(%416, %417) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %424 = cast(%422, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %425 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %426 = where(%423, %424, %425) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %427 = cast(%426, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %428 = tile(%426, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 6912, 8, 8), int8] */;
  %429 = reshape(%53, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %430 = reshape(%428, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6912, 1, 8, 8), int8] */;
  %431 = nn.conv2d(%429, %430, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 6912, 1, 1), int32] */;
  %432 = reshape(%431, newshape=[1, 48, 144, 1, 1]) /* ty=Tensor[(1, 48, 144, 1, 1), int32] */;
  %433 = sum(%432, axis=[0]) /* ty=Tensor[(48, 144, 1, 1), int32] */;
  %434 = transpose(%433, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %435 = abs(%434) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %436 = max(%435, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %437 = divide(%436, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %438 = divide(%434, %437) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %439 = greater_equal(%52, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %440 = less_equal(%52, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %441 = nn.conv2d_transpose(%426, %v9_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %442 = abs(%441) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %443 = max(%442, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %444 = divide(%443, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %445 = divide(%441, %444) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %446 = multiply(%439, %440) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %447 = cast(%445, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %448 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %449 = where(%446, %447, %448) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %450 = cast(%449, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %451 = greater_equal(%50, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %452 = less_equal(%50, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %453 = nn.conv2d_transpose(%449, %v8_conv_2_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %454 = abs(%453) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %455 = max(%454, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %456 = divide(%455, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %457 = divide(%453, %456) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %458 = multiply(%451, %452) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %459 = cast(%457, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %460 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %461 = where(%458, %459, %460) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %462 = cast(%461, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %463 = greater_equal(%48, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %464 = less_equal(%48, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %465 = nn.conv2d_transpose(%461, %v8_conv_1_weight, channels=160, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=160, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %466 = abs(%465) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %467 = max(%466, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %468 = divide(%467, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %469 = divide(%465, %468) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %470 = multiply(%463, %464) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %471 = cast(%469, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %472 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %473 = where(%470, %471, %472) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %474 = cast(%473, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %475 = tile(%473, reps=[1, 40, 1, 1]) /* ty=Tensor[(1, 6400, 8, 8), int8] */;
  %476 = reshape(%47, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %477 = reshape(%475, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6400, 1, 8, 8), int8] */;
  %478 = nn.conv2d(%476, %477, padding=[0, 0, 0, 0], groups=40, out_dtype="int32") /* ty=Tensor[(1, 6400, 1, 1), int32] */;
  %479 = reshape(%478, newshape=[1, 40, 160, 1, 1]) /* ty=Tensor[(1, 40, 160, 1, 1), int32] */;
  %480 = sum(%479, axis=[0]) /* ty=Tensor[(40, 160, 1, 1), int32] */;
  %481 = transpose(%480, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %482 = abs(%481) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %483 = max(%482, axis=[1], keepdims=True) /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %484 = divide(%483, 127 /* ty=int32 */) /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %485 = divide(%481, %484) /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %486 = greater_equal(%44, -128 /* ty=int32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %487 = less_equal(%44, 127 /* ty=int32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %488 = greater_equal(%46, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %489 = less_equal(%46, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %490 = nn.conv2d_transpose(%473, %v8_conv_0_weight, channels=40, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %491 = abs(%490) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %492 = max(%491, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %493 = divide(%492, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %494 = divide(%490, %493) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %495 = multiply(%488, %489) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %496 = cast(%494, dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %497 = zeros(shape=[1, 40, 8, 8], dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %498 = where(%495, %496, %497) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %500 = reshape(%v7_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %501 = divide(%499, %500) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %502 = reshape(%v7_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %503 = multiply(%501, %502) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %504 = multiply(%486, %487) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %505 = cast(%503, dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %506 = zeros(shape=[1, 40, 8, 8], dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %507 = where(%504, %505, %506) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %508 = cast(%507, dtype="int32") /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %509 = nn.cross_entropy_with_logits(%103, %label) /* ty=float32 */;
  %510 = sum(%117, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %511 = cast(%129, dtype="int8") /* ty=Tensor[(10, 160, 1, 1), int8] */;
  %512 = sum(%146, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %513 = sum(%159, axis=[1], exclude=True) /* ty=Tensor[(576), int32] */;
  %514 = sum(%173, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %515 = transpose(%181, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 24, 1, 1), float32] */;
  %516 = sum(%198, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %517 = sum(%211, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %518 = sum(%225, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %519 = transpose(%233, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 12, 1, 1), float32] */;
  %520 = sum(%250, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %521 = sum(%263, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %522 = sum(%275, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %523 = sum(%287, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %524 = sum(%299, axis=[1], exclude=True) /* ty=Tensor[(240), int32] */;
  %525 = sum(%311, axis=[1], exclude=True) /* ty=Tensor[(240), int32] */;
  %526 = cast(%322, dtype="int8") /* ty=Tensor[(240, 48, 1, 1), int8] */;
  %527 = sum(%345, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %528 = sum(%357, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %529 = sum(%369, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %530 = cast(%380, dtype="int8") /* ty=Tensor[(192, 48, 1, 1), int8] */;
  %531 = sum(%403, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %532 = sum(%415, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %533 = sum(%427, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %534 = cast(%438, dtype="int8") /* ty=Tensor[(144, 48, 1, 1), int8] */;
  %535 = sum(%450, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %536 = sum(%462, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %537 = sum(%474, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %538 = cast(%485, dtype="int8") /* ty=Tensor[(160, 40, 1, 1), int8] */;
  %539 = sum(%508, axis=[1], exclude=True) /* ty=Tensor[(40), int32] */;
  (%509, %510, %511, %512, %513, %514, %515, %516, %517, %518, %519, %520, %521, %522, %523, %524, %525, %526, %527, %528, %529, %530, %531, %532, %533, %534, %535, %536, %537, %538, %539)
}

