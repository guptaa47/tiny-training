def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(32, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(32), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(32), float32], %v2_conv_1_weight: Tensor[(32, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(32), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(32), float32], %v2_conv_2_weight: Tensor[(16, 32, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(24, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(24), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(24), float32], %v5_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v5_conv_0_bias: Tensor[(120), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(120), float32], %v5_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(120), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(120), float32], %v5_conv_2_weight: Tensor[(24, 120, 1, 1), int8], %v5_conv_2_bias: Tensor[(24), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(24), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v6_conv_0_bias: Tensor[(120), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(120), float32], %v6_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(120), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(120), float32], %v6_conv_2_weight: Tensor[(40, 120, 1, 1), int8], %v6_conv_2_bias: Tensor[(40), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(40), float32], %v7_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v7_conv_0_bias: Tensor[(160), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(160), float32], %v7_conv_1_weight: Tensor[(160, 1, 7, 7), int8], %v7_conv_1_bias: Tensor[(160), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(160), float32], %v7_conv_2_weight: Tensor[(40, 160, 1, 1), int8], %v7_conv_2_bias: Tensor[(40), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(40), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v8_conv_0_bias: Tensor[(160), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(160), float32], %v8_conv_1_weight: Tensor[(160, 1, 5, 5), int8], %v8_conv_1_bias: Tensor[(160), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(160), float32], %v8_conv_2_weight: Tensor[(48, 160, 1, 1), int8], %v8_conv_2_bias: Tensor[(48), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(48), float32], %v9_conv_0_weight: Tensor[(144, 48, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(48, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(48), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(48), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(192, 48, 1, 1), int8], %v10_conv_0_bias: Tensor[(192), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(192), float32], %v10_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(192), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(192), float32], %v10_conv_2_weight: Tensor[(48, 192, 1, 1), int8], %v10_conv_2_bias: Tensor[(48), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(48), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(240, 48, 1, 1), int8], %v11_conv_0_bias: Tensor[(240), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(240), float32], %v11_conv_1_weight: Tensor[(240, 1, 7, 7), int8], %v11_conv_1_bias: Tensor[(240), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(240), float32], %v11_conv_2_weight: Tensor[(96, 240, 1, 1), int8], %v11_conv_2_bias: Tensor[(96), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(96), float32], %v12_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v12_conv_0_bias: Tensor[(384), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(384), float32], %v12_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(384), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(384), float32], %v12_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v12_conv_2_bias: Tensor[(96), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(96), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v13_conv_0_bias: Tensor[(384), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(384), float32], %v13_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(384), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(384), float32], %v13_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v13_conv_2_bias: Tensor[(96), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(96), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(576, 96, 1, 1), int8], %v14_conv_0_bias: Tensor[(576), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(576), float32], %v14_conv_1_weight: Tensor[(576, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(576), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(576), float32], %v14_conv_2_weight: Tensor[(160, 576, 1, 1), int8], %v14_conv_2_bias: Tensor[(160), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(160), float32], %v15_weight: Tensor[(10, 160, 1, 1), int8], %v15_bias: Tensor[(10), int32], %v15_zero_x: Tensor[(1), int8], %v15_zero_y: Tensor[(1), int8], %v15_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 576, 1, 1), float32], Tensor[(576), float32], Tensor[(576, 1, 3, 3), float32], Tensor[(576), float32], Tensor[(576, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 5, 5), float32], Tensor[(384), float32], Tensor[(384, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 384, 1, 1), float32], Tensor[(384), float32], Tensor[(384, 1, 5, 5), float32], Tensor[(384), float32], Tensor[(384, 96, 1, 1), float32], Tensor[(96), float32], Tensor[(96, 240, 1, 1), float32], Tensor[(240), float32], Tensor[(240, 1, 7, 7), float32], Tensor[(240), float32], Tensor[(240, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 192, 1, 1), float32], Tensor[(192), float32], Tensor[(192, 1, 3, 3), float32], Tensor[(192), float32], Tensor[(192, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 144, 1, 1), float32], Tensor[(144), float32], Tensor[(144, 1, 3, 3), float32], Tensor[(144), float32], Tensor[(144, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 1, 5, 5), float32], Tensor[(160), float32], Tensor[(160, 40, 1, 1), float32], Tensor[(40), float32], Tensor[(40, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(160, 1, 7, 7), float32], Tensor[(160), float32], Tensor[(160, 40, 1, 1), float32], Tensor[(40), float32], Tensor[(40, 120, 1, 1), float32], Tensor[(120), float32], Tensor[(120, 1, 3, 3), float32], Tensor[(120), float32], Tensor[(120, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 120, 1, 1), float32], Tensor[(120), float32], Tensor[(120, 1, 3, 3), float32], Tensor[(120), float32], Tensor[(120, 24, 1, 1), float32], Tensor[(24), float32], Tensor[(24, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 1, 7, 7), float32], Tensor[(48), float32], Tensor[(48, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 48, 1, 1), float32], Tensor[(48), float32], Tensor[(48, 1, 3, 3), float32], Tensor[(48), float32], Tensor[(48, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 32, 1, 1), float32], Tensor[(32), float32], Tensor[(32, 1, 3, 3), float32], Tensor[(32), float32], Tensor[(32, 8, 1, 1), float32], Tensor[(8), float32], Tensor[(8, 16, 1, 1), float32], Tensor[(16), float32], Tensor[(16, 1, 3, 3), float32], Tensor[(16), float32], Tensor[(16, 3, 3, 3), float32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=32) /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %40 = nn.mcuconv2d(%39, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[3, 3, 3, 3], groups=160) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %46 = nn.mcuadd(%39, %45, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[2, 2, 2, 2], groups=160) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %60 = nn.mcuadd(%53, %59, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %62 = nn.mcuconv2d(%61, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %68 = nn.mcuadd(%61, %67, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %70 = nn.mcuconv2d(%69, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=240) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %76 = nn.mcuconv2d(%75, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %82 = nn.mcuadd(%75, %81, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %84 = nn.mcuconv2d(%83, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %90 = nn.mcuadd(%83, %89, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %92 = nn.mcuconv2d(%91, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[1, 1, 1, 1], groups=576) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 160, 4, 4), int8] */;
  %98 = mcumean(%97, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %99 = nn.mcuconv2d(%98, %v15_weight, %v15_bias, %v15_zero_x, %v15_zero_y, %v15_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %100 = nn.mcutruncate(%99) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %101 = reshape(%100, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %103 = nn.log_softmax(%102) /* ty=Tensor[(1, 10), float32] */;
  %104 = cast(%99, dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %105 = greater_equal(%104, -128f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %106 = less_equal(%104, 127f /* ty=float32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %107 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %108 = negative(%107) /* ty=float32 */;
  %109 = multiply(%108, %label) /* ty=Tensor[(1, 10), float32] */;
  %110 = sum(%109, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %111 = exp(%103) /* ty=Tensor[(1, 10), float32] */;
  %112 = multiply(%110, %111) /* ty=Tensor[(1, 10), float32] */;
  %113 = subtract(%109, %112) /* ty=Tensor[(1, 10), float32] */;
  %114 = multiply(%105, %106) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %115 = reshape(%113, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %116 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %117 = where(%114, %115, %116) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %118 = reshape(%v15_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %119 = multiply(%117, %118) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %120 = cast(%98, dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %121 = tile(%119, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %122 = reshape(%120, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %123 = reshape(%121, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1600, 1, 1, 1), float32] */;
  %124 = nn.conv2d(%122, %123, padding=[0, 0, 0, 0], groups=160) /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %125 = reshape(%124, newshape=[1, 160, 10, 1, 1]) /* ty=Tensor[(1, 160, 10, 1, 1), float32] */;
  %126 = sum(%125, axis=[0]) /* ty=Tensor[(160, 10, 1, 1), float32] */;
  %127 = cast(%96, dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %128 = greater_equal(%127, -128f /* ty=float32 */) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %129 = less_equal(%127, 127f /* ty=float32 */) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %130 = cast(%v15_weight, dtype="float32") /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %131 = nn.conv2d_transpose(%119, %130, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %132 = multiply(%131, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %133 = ones(shape=[1, 160, 4, 4], dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %134 = multiply(%128, %129) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %135 = multiply(%132, %133) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %136 = zeros(shape=[1, 160, 4, 4], dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %137 = where(%134, %135, %136) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %138 = reshape(%v14_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %139 = multiply(%137, %138) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %140 = cast(%95, dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %141 = tile(%139, reps=[1, 576, 1, 1]) /* ty=Tensor[(1, 92160, 4, 4), float32] */;
  %142 = reshape(%140, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %143 = reshape(%141, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(92160, 1, 4, 4), float32] */;
  %144 = nn.conv2d(%142, %143, padding=[0, 0, 0, 0], groups=576) /* ty=Tensor[(1, 92160, 1, 1), float32] */;
  %145 = reshape(%144, newshape=[1, 576, 160, 1, 1]) /* ty=Tensor[(1, 576, 160, 1, 1), float32] */;
  %146 = sum(%145, axis=[0]) /* ty=Tensor[(576, 160, 1, 1), float32] */;
  %147 = cast(%94, dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %148 = greater_equal(%147, -128f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %149 = less_equal(%147, 127f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %150 = cast(%v14_conv_2_weight, dtype="float32") /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %151 = multiply(%148, %149) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %152 = nn.conv2d_transpose(%139, %150, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %153 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %154 = where(%151, %152, %153) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %155 = reshape(%v14_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 576, 1, 1), float32] */;
  %156 = multiply(%154, %155) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %157 = cast(%93, dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %158 = tile(%156, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %159 = reshape(%157, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %160 = reshape(%158, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(576, 1, 4, 4), float32] */;
  %161 = nn.conv2d(%159, %160, padding=[1, 1, 1, 1], groups=576) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %162 = reshape(%161, newshape=[1, 1, 576, 3, 3]) /* ty=Tensor[(1, 1, 576, 3, 3), float32] */;
  %163 = sum(%162, axis=[0]) /* ty=Tensor[(1, 576, 3, 3), float32] */;
  %164 = cast(%92, dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %165 = greater_equal(%164, -128f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %166 = less_equal(%164, 127f /* ty=float32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %167 = cast(%v14_conv_1_weight, dtype="float32") /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %168 = multiply(%165, %166) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %169 = nn.conv2d_transpose(%156, %167, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %170 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %171 = where(%168, %169, %170) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %172 = reshape(%v14_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 576, 1, 1), float32] */;
  %173 = multiply(%171, %172) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %174 = cast(%91, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %175 = tile(%173, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 55296, 4, 4), float32] */;
  %176 = reshape(%174, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %177 = reshape(%175, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(55296, 1, 4, 4), float32] */;
  %178 = nn.conv2d(%176, %177, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 55296, 1, 1), float32] */;
  %179 = reshape(%178, newshape=[1, 96, 576, 1, 1]) /* ty=Tensor[(1, 96, 576, 1, 1), float32] */;
  %180 = sum(%179, axis=[0]) /* ty=Tensor[(96, 576, 1, 1), float32] */;
  %181 = cast(%88, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %182 = greater_equal(%181, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %183 = less_equal(%181, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %184 = cast(%90, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %185 = greater_equal(%184, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %186 = less_equal(%184, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %187 = cast(%v14_conv_0_weight, dtype="float32") /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %188 = multiply(%185, %186) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %189 = nn.conv2d_transpose(%173, %187, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %190 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %191 = where(%188, %189, %190) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %192 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %193 = divide(%191, %192) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %194 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %195 = multiply(%182, %183) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %196 = multiply(%193, %194) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %197 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %198 = where(%195, %196, %197) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %199 = reshape(%v13_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %200 = multiply(%198, %199) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %201 = cast(%87, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %202 = tile(%200, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 36864, 4, 4), float32] */;
  %203 = reshape(%201, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %204 = reshape(%202, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 4, 4), float32] */;
  %205 = nn.conv2d(%203, %204, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 36864, 1, 1), float32] */;
  %206 = reshape(%205, newshape=[1, 384, 96, 1, 1]) /* ty=Tensor[(1, 384, 96, 1, 1), float32] */;
  %207 = sum(%206, axis=[0]) /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %208 = cast(%86, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %209 = greater_equal(%208, -128f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %210 = less_equal(%208, 127f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %211 = cast(%v13_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %212 = multiply(%209, %210) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %213 = nn.conv2d_transpose(%200, %211, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %214 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %215 = where(%212, %213, %214) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %216 = reshape(%v13_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %217 = multiply(%215, %216) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %218 = cast(%85, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %219 = tile(%217, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %220 = reshape(%218, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %221 = reshape(%219, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 4, 4), float32] */;
  %222 = nn.conv2d(%220, %221, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 5, 5), float32] */;
  %223 = reshape(%222, newshape=[1, 1, 384, 5, 5]) /* ty=Tensor[(1, 1, 384, 5, 5), float32] */;
  %224 = sum(%223, axis=[0]) /* ty=Tensor[(1, 384, 5, 5), float32] */;
  %225 = cast(%84, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %226 = greater_equal(%225, -128f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %227 = less_equal(%225, 127f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %228 = cast(%v13_conv_1_weight, dtype="float32") /* ty=Tensor[(384, 1, 5, 5), float32] */;
  %229 = multiply(%226, %227) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %230 = nn.conv2d_transpose(%217, %228, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %231 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %232 = where(%229, %230, %231) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %233 = reshape(%v13_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %234 = multiply(%232, %233) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %235 = cast(%83, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %236 = tile(%234, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 36864, 4, 4), float32] */;
  %237 = reshape(%235, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %238 = reshape(%236, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 4, 4), float32] */;
  %239 = nn.conv2d(%237, %238, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 36864, 1, 1), float32] */;
  %240 = reshape(%239, newshape=[1, 96, 384, 1, 1]) /* ty=Tensor[(1, 96, 384, 1, 1), float32] */;
  %241 = sum(%240, axis=[0]) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %242 = cast(%80, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %243 = greater_equal(%242, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %244 = less_equal(%242, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %245 = cast(%82, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %246 = greater_equal(%245, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %247 = less_equal(%245, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %248 = cast(%v13_conv_0_weight, dtype="float32") /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %249 = multiply(%246, %247) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %250 = nn.conv2d_transpose(%234, %248, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %251 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %252 = where(%249, %250, %251) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %253 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %254 = divide(%252, %253) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %255 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %256 = multiply(%243, %244) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %257 = multiply(%254, %255) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %258 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %259 = where(%256, %257, %258) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %260 = reshape(%v12_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %261 = multiply(%259, %260) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %262 = cast(%79, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %263 = tile(%261, reps=[1, 384, 1, 1]) /* ty=Tensor[(1, 36864, 4, 4), float32] */;
  %264 = reshape(%262, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %265 = reshape(%263, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 4, 4), float32] */;
  %266 = nn.conv2d(%264, %265, padding=[0, 0, 0, 0], groups=384) /* ty=Tensor[(1, 36864, 1, 1), float32] */;
  %267 = reshape(%266, newshape=[1, 384, 96, 1, 1]) /* ty=Tensor[(1, 384, 96, 1, 1), float32] */;
  %268 = sum(%267, axis=[0]) /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %269 = cast(%78, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %270 = greater_equal(%269, -128f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %271 = less_equal(%269, 127f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %272 = cast(%v12_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %273 = multiply(%270, %271) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %274 = nn.conv2d_transpose(%261, %272, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %275 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %276 = where(%273, %274, %275) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %277 = reshape(%v12_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %278 = multiply(%276, %277) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %279 = cast(%77, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %280 = tile(%278, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %281 = reshape(%279, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %282 = reshape(%280, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 4, 4), float32] */;
  %283 = nn.conv2d(%281, %282, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 5, 5), float32] */;
  %284 = reshape(%283, newshape=[1, 1, 384, 5, 5]) /* ty=Tensor[(1, 1, 384, 5, 5), float32] */;
  %285 = sum(%284, axis=[0]) /* ty=Tensor[(1, 384, 5, 5), float32] */;
  %286 = cast(%76, dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %287 = greater_equal(%286, -128f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %288 = less_equal(%286, 127f /* ty=float32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %289 = cast(%v12_conv_1_weight, dtype="float32") /* ty=Tensor[(384, 1, 5, 5), float32] */;
  %290 = multiply(%287, %288) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %291 = nn.conv2d_transpose(%278, %289, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %292 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %293 = where(%290, %291, %292) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %294 = reshape(%v12_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %295 = multiply(%293, %294) /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %296 = cast(%75, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %297 = tile(%295, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 36864, 4, 4), float32] */;
  %298 = reshape(%296, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %299 = reshape(%297, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(36864, 1, 4, 4), float32] */;
  %300 = nn.conv2d(%298, %299, padding=[0, 0, 0, 0], groups=96) /* ty=Tensor[(1, 36864, 1, 1), float32] */;
  %301 = reshape(%300, newshape=[1, 96, 384, 1, 1]) /* ty=Tensor[(1, 96, 384, 1, 1), float32] */;
  %302 = sum(%301, axis=[0]) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %303 = cast(%74, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %304 = greater_equal(%303, -128f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %305 = less_equal(%303, 127f /* ty=float32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %306 = cast(%v12_conv_0_weight, dtype="float32") /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %307 = multiply(%304, %305) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %308 = nn.conv2d_transpose(%295, %306, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %309 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %310 = where(%307, %308, %309) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %311 = reshape(%v11_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %312 = multiply(%310, %311) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %313 = cast(%73, dtype="float32") /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %314 = tile(%312, reps=[1, 240, 1, 1]) /* ty=Tensor[(1, 23040, 4, 4), float32] */;
  %315 = reshape(%313, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %316 = reshape(%314, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(23040, 1, 4, 4), float32] */;
  %317 = nn.conv2d(%315, %316, padding=[0, 0, 0, 0], groups=240) /* ty=Tensor[(1, 23040, 1, 1), float32] */;
  %318 = reshape(%317, newshape=[1, 240, 96, 1, 1]) /* ty=Tensor[(1, 240, 96, 1, 1), float32] */;
  %319 = sum(%318, axis=[0]) /* ty=Tensor[(240, 96, 1, 1), float32] */;
  %320 = cast(%72, dtype="float32") /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %321 = greater_equal(%320, -128f /* ty=float32 */) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %322 = less_equal(%320, 127f /* ty=float32 */) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %323 = cast(%v11_conv_2_weight, dtype="float32") /* ty=Tensor[(96, 240, 1, 1), float32] */;
  %324 = multiply(%321, %322) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %325 = nn.conv2d_transpose(%312, %323, channels=240, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %326 = zeros(shape=[1, 240, 4, 4], dtype="float32") /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %327 = where(%324, %325, %326) /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %328 = reshape(%v11_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 240, 1, 1), float32] */;
  %329 = multiply(%327, %328) /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %330 = cast(%71, dtype="float32") /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %331 = tile(%329, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %332 = reshape(%330, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %333 = reshape(%331, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(240, 1, 4, 4), float32] */;
  %334 = nn.conv2d(%332, %333, padding=[3, 3, 3, 3], dilation=[2, 2], groups=240) /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %335 = reshape(%334, newshape=[1, 1, 240, 8, 8]) /* ty=Tensor[(1, 1, 240, 8, 8), float32] */;
  %336 = sum(%335, axis=[0]) /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %337 = transpose(%336, axes=[1, 0, 2, 3]) /* ty=Tensor[(240, 1, 8, 8), float32] */;
  %338 = cast(%70, dtype="float32") /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %339 = greater_equal(%338, -128f /* ty=float32 */) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %340 = less_equal(%338, 127f /* ty=float32 */) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %341 = cast(%v11_conv_1_weight, dtype="float32") /* ty=Tensor[(240, 1, 7, 7), float32] */;
  %342 = multiply(%339, %340) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %343 = nn.conv2d_transpose(%329, %341, channels=240, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=240, kernel_layout="IOHW") /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %344 = zeros(shape=[1, 240, 8, 8], dtype="float32") /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %345 = where(%342, %343, %344) /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %346 = reshape(%v11_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 240, 1, 1), float32] */;
  %347 = multiply(%345, %346) /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %348 = cast(%69, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %349 = tile(%347, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 11520, 8, 8), float32] */;
  %350 = reshape(%348, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %351 = reshape(%349, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(11520, 1, 8, 8), float32] */;
  %352 = nn.conv2d(%350, %351, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 11520, 1, 1), float32] */;
  %353 = reshape(%352, newshape=[1, 48, 240, 1, 1]) /* ty=Tensor[(1, 48, 240, 1, 1), float32] */;
  %354 = sum(%353, axis=[0]) /* ty=Tensor[(48, 240, 1, 1), float32] */;
  %355 = cast(%66, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %356 = greater_equal(%355, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %357 = less_equal(%355, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %358 = cast(%68, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %359 = greater_equal(%358, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %360 = less_equal(%358, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %361 = cast(%v11_conv_0_weight, dtype="float32") /* ty=Tensor[(240, 48, 1, 1), float32] */;
  %362 = multiply(%359, %360) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %363 = nn.conv2d_transpose(%347, %361, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %364 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %365 = where(%362, %363, %364) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %366 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %367 = divide(%365, %366) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %368 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %369 = multiply(%356, %357) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %370 = multiply(%367, %368) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %371 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %372 = where(%369, %370, %371) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %373 = reshape(%v10_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %374 = multiply(%372, %373) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %375 = cast(%65, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %376 = tile(%374, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 9216, 8, 8), float32] */;
  %377 = reshape(%375, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %378 = reshape(%376, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(9216, 1, 8, 8), float32] */;
  %379 = nn.conv2d(%377, %378, padding=[0, 0, 0, 0], groups=192) /* ty=Tensor[(1, 9216, 1, 1), float32] */;
  %380 = reshape(%379, newshape=[1, 192, 48, 1, 1]) /* ty=Tensor[(1, 192, 48, 1, 1), float32] */;
  %381 = sum(%380, axis=[0]) /* ty=Tensor[(192, 48, 1, 1), float32] */;
  %382 = cast(%64, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %383 = greater_equal(%382, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %384 = less_equal(%382, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %385 = cast(%v10_conv_2_weight, dtype="float32") /* ty=Tensor[(48, 192, 1, 1), float32] */;
  %386 = multiply(%383, %384) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %387 = nn.conv2d_transpose(%374, %385, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %388 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %389 = where(%386, %387, %388) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %390 = reshape(%v10_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %391 = multiply(%389, %390) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %392 = cast(%63, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %393 = tile(%391, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %394 = reshape(%392, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %395 = reshape(%393, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 8, 8), float32] */;
  %396 = nn.conv2d(%394, %395, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %397 = reshape(%396, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), float32] */;
  %398 = sum(%397, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), float32] */;
  %399 = cast(%62, dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %400 = greater_equal(%399, -128f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %401 = less_equal(%399, 127f /* ty=float32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %402 = cast(%v10_conv_1_weight, dtype="float32") /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %403 = multiply(%400, %401) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %404 = nn.conv2d_transpose(%391, %402, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %405 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %406 = where(%403, %404, %405) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %407 = reshape(%v10_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %408 = multiply(%406, %407) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %409 = cast(%61, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %410 = tile(%408, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 9216, 8, 8), float32] */;
  %411 = reshape(%409, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %412 = reshape(%410, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(9216, 1, 8, 8), float32] */;
  %413 = nn.conv2d(%411, %412, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 9216, 1, 1), float32] */;
  %414 = reshape(%413, newshape=[1, 48, 192, 1, 1]) /* ty=Tensor[(1, 48, 192, 1, 1), float32] */;
  %415 = sum(%414, axis=[0]) /* ty=Tensor[(48, 192, 1, 1), float32] */;
  %416 = cast(%58, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %417 = greater_equal(%416, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %418 = less_equal(%416, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %419 = cast(%60, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %420 = greater_equal(%419, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %421 = less_equal(%419, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %422 = cast(%v10_conv_0_weight, dtype="float32") /* ty=Tensor[(192, 48, 1, 1), float32] */;
  %423 = multiply(%420, %421) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %424 = nn.conv2d_transpose(%408, %422, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %425 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %426 = where(%423, %424, %425) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %427 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %428 = divide(%426, %427) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %429 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %430 = multiply(%417, %418) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %431 = multiply(%428, %429) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %432 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %433 = where(%430, %431, %432) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %434 = reshape(%v9_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %435 = multiply(%433, %434) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %436 = cast(%57, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %437 = tile(%435, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 6912, 8, 8), float32] */;
  %438 = reshape(%436, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %439 = reshape(%437, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6912, 1, 8, 8), float32] */;
  %440 = nn.conv2d(%438, %439, padding=[0, 0, 0, 0], groups=144) /* ty=Tensor[(1, 6912, 1, 1), float32] */;
  %441 = reshape(%440, newshape=[1, 144, 48, 1, 1]) /* ty=Tensor[(1, 144, 48, 1, 1), float32] */;
  %442 = sum(%441, axis=[0]) /* ty=Tensor[(144, 48, 1, 1), float32] */;
  %443 = cast(%56, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %444 = greater_equal(%443, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %445 = less_equal(%443, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %446 = cast(%v9_conv_2_weight, dtype="float32") /* ty=Tensor[(48, 144, 1, 1), float32] */;
  %447 = multiply(%444, %445) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %448 = nn.conv2d_transpose(%435, %446, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %449 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %450 = where(%447, %448, %449) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %451 = reshape(%v9_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %452 = multiply(%450, %451) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %453 = cast(%55, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %454 = tile(%452, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %455 = reshape(%453, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %456 = reshape(%454, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), float32] */;
  %457 = nn.conv2d(%455, %456, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %458 = reshape(%457, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), float32] */;
  %459 = sum(%458, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), float32] */;
  %460 = cast(%54, dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %461 = greater_equal(%460, -128f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %462 = less_equal(%460, 127f /* ty=float32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %463 = cast(%v9_conv_1_weight, dtype="float32") /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %464 = multiply(%461, %462) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %465 = nn.conv2d_transpose(%452, %463, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %466 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %467 = where(%464, %465, %466) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %468 = reshape(%v9_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %469 = multiply(%467, %468) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %470 = cast(%53, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %471 = tile(%469, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 6912, 8, 8), float32] */;
  %472 = reshape(%470, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %473 = reshape(%471, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6912, 1, 8, 8), float32] */;
  %474 = nn.conv2d(%472, %473, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 6912, 1, 1), float32] */;
  %475 = reshape(%474, newshape=[1, 48, 144, 1, 1]) /* ty=Tensor[(1, 48, 144, 1, 1), float32] */;
  %476 = sum(%475, axis=[0]) /* ty=Tensor[(48, 144, 1, 1), float32] */;
  %477 = cast(%52, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %478 = greater_equal(%477, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %479 = less_equal(%477, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %480 = cast(%v9_conv_0_weight, dtype="float32") /* ty=Tensor[(144, 48, 1, 1), float32] */;
  %481 = multiply(%478, %479) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %482 = nn.conv2d_transpose(%469, %480, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %483 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %484 = where(%481, %482, %483) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %485 = reshape(%v8_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %486 = multiply(%484, %485) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %487 = cast(%51, dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %488 = tile(%486, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 7680, 8, 8), float32] */;
  %489 = reshape(%487, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %490 = reshape(%488, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(7680, 1, 8, 8), float32] */;
  %491 = nn.conv2d(%489, %490, padding=[0, 0, 0, 0], groups=160) /* ty=Tensor[(1, 7680, 1, 1), float32] */;
  %492 = reshape(%491, newshape=[1, 160, 48, 1, 1]) /* ty=Tensor[(1, 160, 48, 1, 1), float32] */;
  %493 = sum(%492, axis=[0]) /* ty=Tensor[(160, 48, 1, 1), float32] */;
  %494 = cast(%50, dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %495 = greater_equal(%494, -128f /* ty=float32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %496 = less_equal(%494, 127f /* ty=float32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %497 = cast(%v8_conv_2_weight, dtype="float32") /* ty=Tensor[(48, 160, 1, 1), float32] */;
  %498 = multiply(%495, %496) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %499 = nn.conv2d_transpose(%486, %497, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %500 = zeros(shape=[1, 160, 8, 8], dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %501 = where(%498, %499, %500) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %502 = reshape(%v8_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %503 = multiply(%501, %502) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %504 = cast(%49, dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %505 = tile(%503, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %506 = reshape(%504, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %507 = reshape(%505, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(160, 1, 8, 8), float32] */;
  %508 = nn.conv2d(%506, %507, padding=[2, 2, 2, 2], groups=160) /* ty=Tensor[(1, 160, 5, 5), float32] */;
  %509 = reshape(%508, newshape=[1, 1, 160, 5, 5]) /* ty=Tensor[(1, 1, 160, 5, 5), float32] */;
  %510 = sum(%509, axis=[0]) /* ty=Tensor[(1, 160, 5, 5), float32] */;
  %511 = cast(%48, dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %512 = greater_equal(%511, -128f /* ty=float32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %513 = less_equal(%511, 127f /* ty=float32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %514 = cast(%v8_conv_1_weight, dtype="float32") /* ty=Tensor[(160, 1, 5, 5), float32] */;
  %515 = multiply(%512, %513) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %516 = nn.conv2d_transpose(%503, %514, channels=160, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=160, kernel_layout="IOHW") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %517 = zeros(shape=[1, 160, 8, 8], dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %518 = where(%515, %516, %517) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %519 = reshape(%v8_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %520 = multiply(%518, %519) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %521 = cast(%47, dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %522 = tile(%520, reps=[1, 40, 1, 1]) /* ty=Tensor[(1, 6400, 8, 8), float32] */;
  %523 = reshape(%521, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %524 = reshape(%522, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6400, 1, 8, 8), float32] */;
  %525 = nn.conv2d(%523, %524, padding=[0, 0, 0, 0], groups=40) /* ty=Tensor[(1, 6400, 1, 1), float32] */;
  %526 = reshape(%525, newshape=[1, 40, 160, 1, 1]) /* ty=Tensor[(1, 40, 160, 1, 1), float32] */;
  %527 = sum(%526, axis=[0]) /* ty=Tensor[(40, 160, 1, 1), float32] */;
  %528 = cast(%44, dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %529 = greater_equal(%528, -128f /* ty=float32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %530 = less_equal(%528, 127f /* ty=float32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %531 = cast(%46, dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %532 = greater_equal(%531, -128f /* ty=float32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %533 = less_equal(%531, 127f /* ty=float32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %534 = cast(%v8_conv_0_weight, dtype="float32") /* ty=Tensor[(160, 40, 1, 1), float32] */;
  %535 = multiply(%532, %533) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %536 = nn.conv2d_transpose(%520, %534, channels=40, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %537 = zeros(shape=[1, 40, 8, 8], dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %538 = where(%535, %536, %537) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %539 = reshape(%v7_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %540 = divide(%538, %539) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %541 = reshape(%v7_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %542 = multiply(%529, %530) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %543 = multiply(%540, %541) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %544 = zeros(shape=[1, 40, 8, 8], dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %545 = where(%542, %543, %544) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %546 = reshape(%v7_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 40, 1, 1), float32] */;
  %547 = multiply(%545, %546) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %548 = cast(%43, dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %549 = tile(%547, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 6400, 8, 8), float32] */;
  %550 = reshape(%548, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %551 = reshape(%549, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6400, 1, 8, 8), float32] */;
  %552 = nn.conv2d(%550, %551, padding=[0, 0, 0, 0], groups=160) /* ty=Tensor[(1, 6400, 1, 1), float32] */;
  %553 = reshape(%552, newshape=[1, 160, 40, 1, 1]) /* ty=Tensor[(1, 160, 40, 1, 1), float32] */;
  %554 = sum(%553, axis=[0]) /* ty=Tensor[(160, 40, 1, 1), float32] */;
  %555 = cast(%42, dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %556 = greater_equal(%555, -128f /* ty=float32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %557 = less_equal(%555, 127f /* ty=float32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %558 = cast(%v7_conv_2_weight, dtype="float32") /* ty=Tensor[(40, 160, 1, 1), float32] */;
  %559 = multiply(%556, %557) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %560 = nn.conv2d_transpose(%547, %558, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %561 = zeros(shape=[1, 160, 8, 8], dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %562 = where(%559, %560, %561) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %563 = reshape(%v7_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %564 = multiply(%562, %563) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %565 = cast(%41, dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %566 = tile(%564, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %567 = reshape(%565, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %568 = reshape(%566, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(160, 1, 8, 8), float32] */;
  %569 = nn.conv2d(%567, %568, padding=[3, 3, 3, 3], groups=160) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %570 = reshape(%569, newshape=[1, 1, 160, 7, 7]) /* ty=Tensor[(1, 1, 160, 7, 7), float32] */;
  %571 = sum(%570, axis=[0]) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %572 = cast(%40, dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %573 = greater_equal(%572, -128f /* ty=float32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %574 = less_equal(%572, 127f /* ty=float32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %575 = cast(%v7_conv_1_weight, dtype="float32") /* ty=Tensor[(160, 1, 7, 7), float32] */;
  %576 = multiply(%573, %574) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %577 = nn.conv2d_transpose(%564, %575, channels=160, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=160, kernel_layout="IOHW") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %578 = zeros(shape=[1, 160, 8, 8], dtype="float32") /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %579 = where(%576, %577, %578) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %580 = reshape(%v7_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %581 = multiply(%579, %580) /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %582 = cast(%39, dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %583 = tile(%581, reps=[1, 40, 1, 1]) /* ty=Tensor[(1, 6400, 8, 8), float32] */;
  %584 = reshape(%582, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %585 = reshape(%583, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6400, 1, 8, 8), float32] */;
  %586 = nn.conv2d(%584, %585, padding=[0, 0, 0, 0], groups=40) /* ty=Tensor[(1, 6400, 1, 1), float32] */;
  %587 = reshape(%586, newshape=[1, 40, 160, 1, 1]) /* ty=Tensor[(1, 40, 160, 1, 1), float32] */;
  %588 = sum(%587, axis=[0]) /* ty=Tensor[(40, 160, 1, 1), float32] */;
  %589 = cast(%38, dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %590 = greater_equal(%589, -128f /* ty=float32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %591 = less_equal(%589, 127f /* ty=float32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %592 = cast(%v7_conv_0_weight, dtype="float32") /* ty=Tensor[(160, 40, 1, 1), float32] */;
  %593 = multiply(%590, %591) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %594 = nn.conv2d_transpose(%581, %592, channels=40, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %595 = zeros(shape=[1, 40, 8, 8], dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %596 = where(%593, %594, %595) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %597 = reshape(%v6_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 40, 1, 1), float32] */;
  %598 = multiply(%596, %597) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %599 = cast(%37, dtype="float32") /* ty=Tensor[(1, 120, 8, 8), float32] */;
  %600 = tile(%598, reps=[1, 120, 1, 1]) /* ty=Tensor[(1, 4800, 8, 8), float32] */;
  %601 = reshape(%599, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 120, 8, 8), float32] */;
  %602 = reshape(%600, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4800, 1, 8, 8), float32] */;
  %603 = nn.conv2d(%601, %602, padding=[0, 0, 0, 0], groups=120) /* ty=Tensor[(1, 4800, 1, 1), float32] */;
  %604 = reshape(%603, newshape=[1, 120, 40, 1, 1]) /* ty=Tensor[(1, 120, 40, 1, 1), float32] */;
  %605 = sum(%604, axis=[0]) /* ty=Tensor[(120, 40, 1, 1), float32] */;
  %606 = cast(%36, dtype="float32") /* ty=Tensor[(1, 120, 8, 8), float32] */;
  %607 = greater_equal(%606, -128f /* ty=float32 */) /* ty=Tensor[(1, 120, 8, 8), bool] */;
  %608 = less_equal(%606, 127f /* ty=float32 */) /* ty=Tensor[(1, 120, 8, 8), bool] */;
  %609 = cast(%v6_conv_2_weight, dtype="float32") /* ty=Tensor[(40, 120, 1, 1), float32] */;
  %610 = multiply(%607, %608) /* ty=Tensor[(1, 120, 8, 8), bool] */;
  %611 = nn.conv2d_transpose(%598, %609, channels=120, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 120, 8, 8), float32] */;
  %612 = zeros(shape=[1, 120, 8, 8], dtype="float32") /* ty=Tensor[(1, 120, 8, 8), float32] */;
  %613 = where(%610, %611, %612) /* ty=Tensor[(1, 120, 8, 8), float32] */;
  %614 = reshape(%v6_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 120, 1, 1), float32] */;
  %615 = multiply(%613, %614) /* ty=Tensor[(1, 120, 8, 8), float32] */;
  %616 = cast(%35, dtype="float32") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %617 = tile(%615, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 120, 8, 8), float32] */;
  %618 = reshape(%616, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %619 = reshape(%617, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(120, 1, 8, 8), float32] */;
  %620 = nn.conv2d(%618, %619, padding=[1, 1, 1, 1], dilation=[2, 2], groups=120) /* ty=Tensor[(1, 120, 4, 4), float32] */;
  %621 = reshape(%620, newshape=[1, 1, 120, 4, 4]) /* ty=Tensor[(1, 1, 120, 4, 4), float32] */;
  %622 = sum(%621, axis=[0]) /* ty=Tensor[(1, 120, 4, 4), float32] */;
  %623 = transpose(%622, axes=[1, 0, 2, 3]) /* ty=Tensor[(120, 1, 4, 4), float32] */;
  %624 = cast(%34, dtype="float32") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %625 = greater_equal(%624, -128f /* ty=float32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %626 = less_equal(%624, 127f /* ty=float32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %627 = cast(%v6_conv_1_weight, dtype="float32") /* ty=Tensor[(120, 1, 3, 3), float32] */;
  %628 = multiply(%625, %626) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %629 = nn.conv2d_transpose(%615, %627, channels=120, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=120, kernel_layout="IOHW") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %630 = zeros(shape=[1, 120, 16, 16], dtype="float32") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %631 = where(%628, %629, %630) /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %632 = reshape(%v6_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 120, 1, 1), float32] */;
  %633 = multiply(%631, %632) /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %634 = cast(%33, dtype="float32") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %635 = tile(%633, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 2880, 16, 16), float32] */;
  %636 = reshape(%634, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %637 = reshape(%635, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2880, 1, 16, 16), float32] */;
  %638 = nn.conv2d(%636, %637, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 2880, 1, 1), float32] */;
  %639 = reshape(%638, newshape=[1, 24, 120, 1, 1]) /* ty=Tensor[(1, 24, 120, 1, 1), float32] */;
  %640 = sum(%639, axis=[0]) /* ty=Tensor[(24, 120, 1, 1), float32] */;
  %641 = cast(%30, dtype="float32") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %642 = greater_equal(%641, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %643 = less_equal(%641, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %644 = cast(%32, dtype="float32") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %645 = greater_equal(%644, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %646 = less_equal(%644, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %647 = cast(%v6_conv_0_weight, dtype="float32") /* ty=Tensor[(120, 24, 1, 1), float32] */;
  %648 = multiply(%645, %646) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %649 = nn.conv2d_transpose(%633, %647, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %650 = zeros(shape=[1, 24, 16, 16], dtype="float32") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %651 = where(%648, %649, %650) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %652 = reshape(%v5_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %653 = divide(%651, %652) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %654 = reshape(%v5_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %655 = multiply(%642, %643) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %656 = multiply(%653, %654) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %657 = zeros(shape=[1, 24, 16, 16], dtype="float32") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %658 = where(%655, %656, %657) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %659 = reshape(%v5_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %660 = multiply(%658, %659) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %661 = cast(%29, dtype="float32") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %662 = tile(%660, reps=[1, 120, 1, 1]) /* ty=Tensor[(1, 2880, 16, 16), float32] */;
  %663 = reshape(%661, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %664 = reshape(%662, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2880, 1, 16, 16), float32] */;
  %665 = nn.conv2d(%663, %664, padding=[0, 0, 0, 0], groups=120) /* ty=Tensor[(1, 2880, 1, 1), float32] */;
  %666 = reshape(%665, newshape=[1, 120, 24, 1, 1]) /* ty=Tensor[(1, 120, 24, 1, 1), float32] */;
  %667 = sum(%666, axis=[0]) /* ty=Tensor[(120, 24, 1, 1), float32] */;
  %668 = cast(%28, dtype="float32") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %669 = greater_equal(%668, -128f /* ty=float32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %670 = less_equal(%668, 127f /* ty=float32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %671 = cast(%v5_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 120, 1, 1), float32] */;
  %672 = multiply(%669, %670) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %673 = nn.conv2d_transpose(%660, %671, channels=120, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %674 = zeros(shape=[1, 120, 16, 16], dtype="float32") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %675 = where(%672, %673, %674) /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %676 = reshape(%v5_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 120, 1, 1), float32] */;
  %677 = multiply(%675, %676) /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %678 = cast(%27, dtype="float32") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %679 = tile(%677, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %680 = reshape(%678, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %681 = reshape(%679, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(120, 1, 16, 16), float32] */;
  %682 = nn.conv2d(%680, %681, padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 3, 3), float32] */;
  %683 = reshape(%682, newshape=[1, 1, 120, 3, 3]) /* ty=Tensor[(1, 1, 120, 3, 3), float32] */;
  %684 = sum(%683, axis=[0]) /* ty=Tensor[(1, 120, 3, 3), float32] */;
  %685 = cast(%26, dtype="float32") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %686 = greater_equal(%685, -128f /* ty=float32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %687 = less_equal(%685, 127f /* ty=float32 */) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %688 = cast(%v5_conv_1_weight, dtype="float32") /* ty=Tensor[(120, 1, 3, 3), float32] */;
  %689 = multiply(%686, %687) /* ty=Tensor[(1, 120, 16, 16), bool] */;
  %690 = nn.conv2d_transpose(%677, %688, channels=120, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=120, kernel_layout="IOHW") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %691 = zeros(shape=[1, 120, 16, 16], dtype="float32") /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %692 = where(%689, %690, %691) /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %693 = reshape(%v5_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 120, 1, 1), float32] */;
  %694 = multiply(%692, %693) /* ty=Tensor[(1, 120, 16, 16), float32] */;
  %695 = cast(%25, dtype="float32") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %696 = tile(%694, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 2880, 16, 16), float32] */;
  %697 = reshape(%695, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %698 = reshape(%696, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2880, 1, 16, 16), float32] */;
  %699 = nn.conv2d(%697, %698, padding=[0, 0, 0, 0], groups=24) /* ty=Tensor[(1, 2880, 1, 1), float32] */;
  %700 = reshape(%699, newshape=[1, 24, 120, 1, 1]) /* ty=Tensor[(1, 24, 120, 1, 1), float32] */;
  %701 = sum(%700, axis=[0]) /* ty=Tensor[(24, 120, 1, 1), float32] */;
  %702 = cast(%24, dtype="float32") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %703 = greater_equal(%702, -128f /* ty=float32 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %704 = less_equal(%702, 127f /* ty=float32 */) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %705 = cast(%v5_conv_0_weight, dtype="float32") /* ty=Tensor[(120, 24, 1, 1), float32] */;
  %706 = multiply(%703, %704) /* ty=Tensor[(1, 24, 16, 16), bool] */;
  %707 = nn.conv2d_transpose(%694, %705, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %708 = zeros(shape=[1, 24, 16, 16], dtype="float32") /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %709 = where(%706, %707, %708) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %710 = reshape(%v4_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 24, 1, 1), float32] */;
  %711 = multiply(%709, %710) /* ty=Tensor[(1, 24, 16, 16), float32] */;
  %712 = cast(%23, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %713 = tile(%711, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 1152, 16, 16), float32] */;
  %714 = reshape(%712, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %715 = reshape(%713, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1152, 1, 16, 16), float32] */;
  %716 = nn.conv2d(%714, %715, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 1152, 1, 1), float32] */;
  %717 = reshape(%716, newshape=[1, 48, 24, 1, 1]) /* ty=Tensor[(1, 48, 24, 1, 1), float32] */;
  %718 = sum(%717, axis=[0]) /* ty=Tensor[(48, 24, 1, 1), float32] */;
  %719 = cast(%22, dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %720 = greater_equal(%719, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %721 = less_equal(%719, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %722 = cast(%v4_conv_2_weight, dtype="float32") /* ty=Tensor[(24, 48, 1, 1), float32] */;
  %723 = multiply(%720, %721) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %724 = nn.conv2d_transpose(%711, %722, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %725 = zeros(shape=[1, 48, 16, 16], dtype="float32") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %726 = where(%723, %724, %725) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %727 = reshape(%v4_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %728 = multiply(%726, %727) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %729 = cast(%21, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %730 = tile(%728, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %731 = reshape(%729, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %732 = reshape(%730, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), float32] */;
  %733 = nn.conv2d(%731, %732, padding=[3, 3, 3, 3], dilation=[2, 2], groups=48) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %734 = reshape(%733, newshape=[1, 1, 48, 8, 8]) /* ty=Tensor[(1, 1, 48, 8, 8), float32] */;
  %735 = sum(%734, axis=[0]) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %736 = transpose(%735, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 8, 8), float32] */;
  %737 = cast(%20, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %738 = greater_equal(%737, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %739 = less_equal(%737, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %740 = cast(%v4_conv_1_weight, dtype="float32") /* ty=Tensor[(48, 1, 7, 7), float32] */;
  %741 = multiply(%738, %739) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %742 = nn.conv2d_transpose(%728, %740, channels=48, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=48, kernel_layout="IOHW") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %743 = zeros(shape=[1, 48, 32, 32], dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %744 = where(%741, %742, %743) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %745 = reshape(%v4_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %746 = multiply(%744, %745) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %747 = cast(%19, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %748 = tile(%746, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), float32] */;
  %749 = reshape(%747, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %750 = reshape(%748, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), float32] */;
  %751 = nn.conv2d(%749, %750, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %752 = reshape(%751, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), float32] */;
  %753 = sum(%752, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %754 = cast(%16, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %755 = greater_equal(%754, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %756 = less_equal(%754, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %757 = cast(%18, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %758 = greater_equal(%757, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %759 = less_equal(%757, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %760 = cast(%v4_conv_0_weight, dtype="float32") /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %761 = multiply(%758, %759) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %762 = nn.conv2d_transpose(%746, %760, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %763 = zeros(shape=[1, 16, 32, 32], dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %764 = where(%761, %762, %763) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %765 = reshape(%v3_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %766 = divide(%764, %765) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %767 = reshape(%v3_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %768 = multiply(%755, %756) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %769 = multiply(%766, %767) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %770 = zeros(shape=[1, 16, 32, 32], dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %771 = where(%768, %769, %770) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %772 = reshape(%v3_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %773 = multiply(%771, %772) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %774 = cast(%15, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %775 = tile(%773, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), float32] */;
  %776 = reshape(%774, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %777 = reshape(%775, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), float32] */;
  %778 = nn.conv2d(%776, %777, padding=[0, 0, 0, 0], groups=48) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %779 = reshape(%778, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), float32] */;
  %780 = sum(%779, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %781 = cast(%14, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %782 = greater_equal(%781, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %783 = less_equal(%781, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %784 = cast(%v3_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %785 = multiply(%782, %783) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %786 = nn.conv2d_transpose(%773, %784, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %787 = zeros(shape=[1, 48, 32, 32], dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %788 = where(%785, %786, %787) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %789 = reshape(%v3_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %790 = multiply(%788, %789) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %791 = cast(%13, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %792 = tile(%790, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %793 = reshape(%791, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %794 = reshape(%792, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 32, 32), float32] */;
  %795 = nn.conv2d(%793, %794, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 3, 3), float32] */;
  %796 = reshape(%795, newshape=[1, 1, 48, 3, 3]) /* ty=Tensor[(1, 1, 48, 3, 3), float32] */;
  %797 = sum(%796, axis=[0]) /* ty=Tensor[(1, 48, 3, 3), float32] */;
  %798 = cast(%12, dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %799 = greater_equal(%798, -128f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %800 = less_equal(%798, 127f /* ty=float32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %801 = cast(%v3_conv_1_weight, dtype="float32") /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %802 = multiply(%799, %800) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %803 = nn.conv2d_transpose(%790, %801, channels=48, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %804 = zeros(shape=[1, 48, 32, 32], dtype="float32") /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %805 = where(%802, %803, %804) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %806 = reshape(%v3_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %807 = multiply(%805, %806) /* ty=Tensor[(1, 48, 32, 32), float32] */;
  %808 = cast(%11, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %809 = tile(%807, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 768, 32, 32), float32] */;
  %810 = reshape(%808, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %811 = reshape(%809, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 32, 32), float32] */;
  %812 = nn.conv2d(%810, %811, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 768, 1, 1), float32] */;
  %813 = reshape(%812, newshape=[1, 16, 48, 1, 1]) /* ty=Tensor[(1, 16, 48, 1, 1), float32] */;
  %814 = sum(%813, axis=[0]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %815 = cast(%10, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %816 = greater_equal(%815, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %817 = less_equal(%815, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %818 = cast(%v3_conv_0_weight, dtype="float32") /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %819 = multiply(%816, %817) /* ty=Tensor[(1, 16, 32, 32), bool] */;
  %820 = nn.conv2d_transpose(%807, %818, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %821 = zeros(shape=[1, 16, 32, 32], dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %822 = where(%819, %820, %821) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %823 = reshape(%v2_conv_2_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %824 = multiply(%822, %823) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %825 = cast(%9, dtype="float32") /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %826 = tile(%824, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 512, 32, 32), float32] */;
  %827 = reshape(%825, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %828 = reshape(%826, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(512, 1, 32, 32), float32] */;
  %829 = nn.conv2d(%827, %828, padding=[0, 0, 0, 0], groups=32) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %830 = reshape(%829, newshape=[1, 32, 16, 1, 1]) /* ty=Tensor[(1, 32, 16, 1, 1), float32] */;
  %831 = sum(%830, axis=[0]) /* ty=Tensor[(32, 16, 1, 1), float32] */;
  %832 = cast(%8, dtype="float32") /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %833 = greater_equal(%832, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 32, 32), bool] */;
  %834 = less_equal(%832, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 32, 32), bool] */;
  %835 = cast(%v2_conv_2_weight, dtype="float32") /* ty=Tensor[(16, 32, 1, 1), float32] */;
  %836 = multiply(%833, %834) /* ty=Tensor[(1, 32, 32, 32), bool] */;
  %837 = nn.conv2d_transpose(%824, %835, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %838 = zeros(shape=[1, 32, 32, 32], dtype="float32") /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %839 = where(%836, %837, %838) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %840 = reshape(%v2_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %841 = multiply(%839, %840) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %842 = cast(%7, dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %843 = tile(%841, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %844 = reshape(%842, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %845 = reshape(%843, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(32, 1, 32, 32), float32] */;
  %846 = nn.conv2d(%844, %845, padding=[1, 1, 1, 1], dilation=[2, 2], groups=32) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %847 = reshape(%846, newshape=[1, 1, 32, 4, 4]) /* ty=Tensor[(1, 1, 32, 4, 4), float32] */;
  %848 = sum(%847, axis=[0]) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %849 = transpose(%848, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 1, 4, 4), float32] */;
  %850 = cast(%6, dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %851 = greater_equal(%850, -128f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %852 = less_equal(%850, 127f /* ty=float32 */) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %853 = cast(%v2_conv_1_weight, dtype="float32") /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %854 = multiply(%851, %852) /* ty=Tensor[(1, 32, 64, 64), bool] */;
  %855 = nn.conv2d_transpose(%841, %853, channels=32, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=32, kernel_layout="IOHW") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %856 = zeros(shape=[1, 32, 64, 64], dtype="float32") /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %857 = where(%854, %855, %856) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %858 = reshape(%v2_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %859 = multiply(%857, %858) /* ty=Tensor[(1, 32, 64, 64), float32] */;
  %860 = cast(%5, dtype="float32") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %861 = tile(%859, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 256, 64, 64), float32] */;
  %862 = reshape(%860, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %863 = reshape(%861, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(256, 1, 64, 64), float32] */;
  %864 = nn.conv2d(%862, %863, padding=[0, 0, 0, 0], groups=8) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %865 = reshape(%864, newshape=[1, 8, 32, 1, 1]) /* ty=Tensor[(1, 8, 32, 1, 1), float32] */;
  %866 = sum(%865, axis=[0]) /* ty=Tensor[(8, 32, 1, 1), float32] */;
  %867 = cast(%4, dtype="float32") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %868 = greater_equal(%867, -128f /* ty=float32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %869 = less_equal(%867, 127f /* ty=float32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %870 = cast(%v2_conv_0_weight, dtype="float32") /* ty=Tensor[(32, 8, 1, 1), float32] */;
  %871 = multiply(%868, %869) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %872 = nn.conv2d_transpose(%859, %870, channels=8, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %873 = zeros(shape=[1, 8, 64, 64], dtype="float32") /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %874 = where(%871, %872, %873) /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %875 = reshape(%v1_conv_1_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %876 = multiply(%874, %875) /* ty=Tensor[(1, 8, 64, 64), float32] */;
  %877 = cast(%3, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %878 = tile(%876, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 128, 64, 64), float32] */;
  %879 = reshape(%877, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %880 = reshape(%878, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(128, 1, 64, 64), float32] */;
  %881 = nn.conv2d(%879, %880, padding=[0, 0, 0, 0], groups=16) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %882 = reshape(%881, newshape=[1, 16, 8, 1, 1]) /* ty=Tensor[(1, 16, 8, 1, 1), float32] */;
  %883 = sum(%882, axis=[0]) /* ty=Tensor[(16, 8, 1, 1), float32] */;
  %884 = cast(%2, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %885 = greater_equal(%884, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %886 = less_equal(%884, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %887 = cast(%v1_conv_1_weight, dtype="float32") /* ty=Tensor[(8, 16, 1, 1), float32] */;
  %888 = multiply(%885, %886) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %889 = nn.conv2d_transpose(%876, %887, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %890 = zeros(shape=[1, 16, 64, 64], dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %891 = where(%888, %889, %890) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %892 = reshape(%v1_conv_0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %893 = multiply(%891, %892) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %894 = cast(%1, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %895 = tile(%893, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %896 = reshape(%894, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %897 = reshape(%895, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(16, 1, 64, 64), float32] */;
  %898 = nn.conv2d(%896, %897, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 3, 3), float32] */;
  %899 = reshape(%898, newshape=[1, 1, 16, 3, 3]) /* ty=Tensor[(1, 1, 16, 3, 3), float32] */;
  %900 = sum(%899, axis=[0]) /* ty=Tensor[(1, 16, 3, 3), float32] */;
  %901 = cast(%0, dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %902 = greater_equal(%901, -128f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %903 = less_equal(%901, 127f /* ty=float32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %904 = cast(%v1_conv_0_weight, dtype="float32") /* ty=Tensor[(16, 1, 3, 3), float32] */;
  %905 = multiply(%902, %903) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %906 = nn.conv2d_transpose(%893, %904, channels=16, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=16, kernel_layout="IOHW") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %907 = zeros(shape=[1, 16, 64, 64], dtype="float32") /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %908 = where(%905, %906, %907) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %909 = reshape(%v0_scale, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %910 = multiply(%908, %909) /* ty=Tensor[(1, 16, 64, 64), float32] */;
  %911 = cast(%input, dtype="float32") /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %912 = tile(%910, reps=[1, 3, 1, 1]) /* ty=Tensor[(1, 48, 64, 64), float32] */;
  %913 = reshape(%911, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %914 = reshape(%912, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 64, 64), float32] */;
  %915 = nn.conv2d(%913, %914, padding=[1, 1, 1, 1], dilation=[2, 2], groups=3) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %916 = reshape(%915, newshape=[1, 3, 16, 4, 4]) /* ty=Tensor[(1, 3, 16, 4, 4), float32] */;
  %917 = sum(%916, axis=[0]) /* ty=Tensor[(3, 16, 4, 4), float32] */;
  %918 = transpose(%917, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 3, 4, 4), float32] */;
  %919 = nn.cross_entropy_with_logits(%103, %label) /* ty=float32 */;
  %920 = sum(%119, axis=[1], exclude=True) /* ty=Tensor[(10), float32] */;
  %921 = transpose(%126, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %922 = sum(%139, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %923 = transpose(%146, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %924 = sum(%156, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %925 = transpose(%163, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %926 = sum(%173, axis=[1], exclude=True) /* ty=Tensor[(576), float32] */;
  %927 = transpose(%180, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %928 = sum(%200, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %929 = transpose(%207, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %930 = sum(%217, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %931 = transpose(%224, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 5, 5), float32] */;
  %932 = sum(%234, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %933 = transpose(%241, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %934 = sum(%261, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %935 = transpose(%268, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %936 = sum(%278, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %937 = transpose(%285, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 1, 5, 5), float32] */;
  %938 = sum(%295, axis=[1], exclude=True) /* ty=Tensor[(384), float32] */;
  %939 = transpose(%302, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %940 = sum(%312, axis=[1], exclude=True) /* ty=Tensor[(96), float32] */;
  %941 = transpose(%319, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 240, 1, 1), float32] */;
  %942 = sum(%329, axis=[1], exclude=True) /* ty=Tensor[(240), float32] */;
  %943 = strided_slice(%337, begin=[0, 0, 0, 0], end=[240, 1, 7, 7], strides=[1], axes=None) /* ty=Tensor[(240, 1, 7, 7), float32] */;
  %944 = sum(%347, axis=[1], exclude=True) /* ty=Tensor[(240), float32] */;
  %945 = transpose(%354, axes=[1, 0, 2, 3]) /* ty=Tensor[(240, 48, 1, 1), float32] */;
  %946 = sum(%374, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %947 = transpose(%381, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 192, 1, 1), float32] */;
  %948 = sum(%391, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %949 = transpose(%398, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %950 = sum(%408, axis=[1], exclude=True) /* ty=Tensor[(192), float32] */;
  %951 = transpose(%415, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 48, 1, 1), float32] */;
  %952 = sum(%435, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %953 = transpose(%442, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 144, 1, 1), float32] */;
  %954 = sum(%452, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %955 = transpose(%459, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %956 = sum(%469, axis=[1], exclude=True) /* ty=Tensor[(144), float32] */;
  %957 = transpose(%476, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 48, 1, 1), float32] */;
  %958 = sum(%486, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %959 = transpose(%493, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 160, 1, 1), float32] */;
  %960 = sum(%503, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %961 = transpose(%510, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 1, 5, 5), float32] */;
  %962 = sum(%520, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %963 = transpose(%527, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 40, 1, 1), float32] */;
  %964 = sum(%547, axis=[1], exclude=True) /* ty=Tensor[(40), float32] */;
  %965 = transpose(%554, axes=[1, 0, 2, 3]) /* ty=Tensor[(40, 160, 1, 1), float32] */;
  %966 = sum(%564, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %967 = transpose(%571, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 1, 7, 7), float32] */;
  %968 = sum(%581, axis=[1], exclude=True) /* ty=Tensor[(160), float32] */;
  %969 = transpose(%588, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 40, 1, 1), float32] */;
  %970 = sum(%598, axis=[1], exclude=True) /* ty=Tensor[(40), float32] */;
  %971 = transpose(%605, axes=[1, 0, 2, 3]) /* ty=Tensor[(40, 120, 1, 1), float32] */;
  %972 = sum(%615, axis=[1], exclude=True) /* ty=Tensor[(120), float32] */;
  %973 = strided_slice(%623, begin=[0, 0, 0, 0], end=[120, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(120, 1, 3, 3), float32] */;
  %974 = sum(%633, axis=[1], exclude=True) /* ty=Tensor[(120), float32] */;
  %975 = transpose(%640, axes=[1, 0, 2, 3]) /* ty=Tensor[(120, 24, 1, 1), float32] */;
  %976 = sum(%660, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %977 = transpose(%667, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 120, 1, 1), float32] */;
  %978 = sum(%677, axis=[1], exclude=True) /* ty=Tensor[(120), float32] */;
  %979 = transpose(%684, axes=[1, 0, 2, 3]) /* ty=Tensor[(120, 1, 3, 3), float32] */;
  %980 = sum(%694, axis=[1], exclude=True) /* ty=Tensor[(120), float32] */;
  %981 = transpose(%701, axes=[1, 0, 2, 3]) /* ty=Tensor[(120, 24, 1, 1), float32] */;
  %982 = sum(%711, axis=[1], exclude=True) /* ty=Tensor[(24), float32] */;
  %983 = transpose(%718, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 48, 1, 1), float32] */;
  %984 = sum(%728, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %985 = strided_slice(%736, begin=[0, 0, 0, 0], end=[48, 1, 7, 7], strides=[1], axes=None) /* ty=Tensor[(48, 1, 7, 7), float32] */;
  %986 = sum(%746, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %987 = transpose(%753, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %988 = sum(%773, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %989 = transpose(%780, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), float32] */;
  %990 = sum(%790, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %991 = transpose(%797, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %992 = sum(%807, axis=[1], exclude=True) /* ty=Tensor[(48), float32] */;
  %993 = transpose(%814, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 16, 1, 1), float32] */;
  %994 = sum(%824, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %995 = transpose(%831, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 32, 1, 1), float32] */;
  %996 = sum(%841, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %997 = strided_slice(%849, begin=[0, 0, 0, 0], end=[32, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %998 = sum(%859, axis=[1], exclude=True) /* ty=Tensor[(32), float32] */;
  %999 = transpose(%866, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 8, 1, 1), float32] */;
  %1000 = sum(%876, axis=[1], exclude=True) /* ty=Tensor[(8), float32] */;
  %1001 = transpose(%883, axes=[1, 0, 2, 3]) /* ty=Tensor[(8, 16, 1, 1), float32] */;
  %1002 = sum(%893, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1003 = transpose(%900, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 1, 3, 3), float32] */;
  %1004 = sum(%910, axis=[1], exclude=True) /* ty=Tensor[(16), float32] */;
  %1005 = strided_slice(%918, begin=[0, 0, 0, 0], end=[16, 3, 3, 3], strides=[1], axes=None) /* ty=Tensor[(16, 3, 3, 3), float32] */;
  (%919, %920, %921, %922, %923, %924, %925, %926, %927, %928, %929, %930, %931, %932, %933, %934, %935, %936, %937, %938, %939, %940, %941, %942, %943, %944, %945, %946, %947, %948, %949, %950, %951, %952, %953, %954, %955, %956, %957, %958, %959, %960, %961, %962, %963, %964, %965, %966, %967, %968, %969, %970, %971, %972, %973, %974, %975, %976, %977, %978, %979, %980, %981, %982, %983, %984, %985, %986, %987, %988, %989, %990, %991, %992, %993, %994, %995, %996, %997, %998, %999, %1000, %1001, %1002, %1003, %1004, %1005)
}
