def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(48), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(48), float32], %v2_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(48), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(48), float32], %v2_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v2_conv_2_bias: Tensor[(8), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(8), float32], %v3_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(8), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(8), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(96), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(96), float32], %v5_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(96), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(96), float32], %v5_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(96), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(96), float32], %v6_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(96), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(96), float32], %v6_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(96), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(96), float32], %v7_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v7_conv_1_bias: Tensor[(96), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(96), float32], %v7_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v7_conv_2_bias: Tensor[(24), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(24), float32], %v8_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v8_conv_0_bias: Tensor[(144), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(144), float32], %v8_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v8_conv_1_bias: Tensor[(144), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(144), float32], %v8_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v8_qadd_zero_x1: Tensor[(1), int8], %v8_qadd_zero_x2: Tensor[(1), int8], %v8_qadd_scale_x1: Tensor[(1), float32], %v8_qadd_scale_x2: Tensor[(1), float32], %v8_qadd_zero_y: Tensor[(1), int8], %v8_qadd_scale_y: Tensor[(1), float32], %v9_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(144), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(144), float32], %v10_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(144), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(144), float32], %v10_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(144), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(144), float32], %v11_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v11_conv_1_bias: Tensor[(144), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(144), float32], %v11_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v11_conv_2_bias: Tensor[(32), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(32), float32], %v12_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v12_conv_0_bias: Tensor[(192), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(192), float32], %v12_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v12_conv_1_bias: Tensor[(192), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(192), float32], %v12_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(192), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(192), float32], %v13_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v13_conv_1_bias: Tensor[(192), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(192), float32], %v13_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(192), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(192), float32], %v14_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(192), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(192), float32], %v14_conv_2_weight: Tensor[(56, 192, 1, 1), int8], %v14_conv_2_bias: Tensor[(56), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(56), float32], %v15_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v15_conv_0_bias: Tensor[(336), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(336), float32], %v15_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v15_conv_1_bias: Tensor[(336), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(336), float32], %v15_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v15_conv_2_bias: Tensor[(56), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(56), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v16_conv_0_bias: Tensor[(336), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(336), float32], %v16_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v16_conv_1_bias: Tensor[(336), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(336), float32], %v16_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v16_conv_2_bias: Tensor[(56), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(56), float32], %v16_qadd_zero_x1: Tensor[(1), int8], %v16_qadd_zero_x2: Tensor[(1), int8], %v16_qadd_scale_x1: Tensor[(1), float32], %v16_qadd_scale_x2: Tensor[(1), float32], %v16_qadd_zero_y: Tensor[(1), int8], %v16_qadd_scale_y: Tensor[(1), float32], %v17_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v17_conv_0_bias: Tensor[(336), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(336), float32], %v17_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v17_conv_1_bias: Tensor[(336), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(336), float32], %v17_conv_2_weight: Tensor[(112, 336, 1, 1), int8], %v17_conv_2_bias: Tensor[(112), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(112), float32], %v18_weight: Tensor[(10, 112, 1, 1), int8], %v18_bias: Tensor[(10), int32], %v18_zero_x: Tensor[(1), int8], %v18_zero_y: Tensor[(1), int8], %v18_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 112, 1, 1), int8], Tensor[(112), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 56, 1, 1), int8], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 56, 1, 1), int8], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 28, 1, 1), int8], Tensor[(56), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(24), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(24), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %54 = nn.mcuadd(%47, %53, %v8_qadd_zero_x1, %v8_qadd_zero_x2, %v8_qadd_scale_x1, %v8_qadd_scale_x2, %v8_qadd_zero_y, %v8_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %84 = nn.mcuadd(%77, %83, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %100 = nn.mcuconv2d(%99, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %106 = nn.mcuadd(%99, %105, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %108 = nn.mcuconv2d(%107, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %114 = nn.mcuadd(%107, %113, %v16_qadd_zero_x1, %v16_qadd_zero_x2, %v16_qadd_scale_x1, %v16_qadd_scale_x2, %v16_qadd_zero_y, %v16_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 112, 4, 4), int8] */;
  %122 = mcumean(%121, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %123 = nn.mcuconv2d(%122, %v18_weight, %v18_bias, %v18_zero_x, %v18_zero_y, %v18_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %124 = nn.mcutruncate(%123) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %125 = reshape(%124, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %127 = nn.log_softmax(%126) /* ty=Tensor[(1, 10), float32] */;
  %128 = greater_equal(%123, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %129 = less_equal(%123, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %130 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %131 = negative(%130) /* ty=float32 */;
  %132 = multiply(%131, %label) /* ty=Tensor[(1, 10), float32] */;
  %133 = sum(%132, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %134 = exp(%127) /* ty=Tensor[(1, 10), float32] */;
  %135 = multiply(%133, %134) /* ty=Tensor[(1, 10), float32] */;
  %136 = subtract(%132, %135) /* ty=Tensor[(1, 10), float32] */;
  %137 = multiply(%128, %129) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %138 = reshape(%136, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %139 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %140 = where(%137, %138, %139) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %141 = cast(%140, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %142 = reshape(%122, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %143 = tile(%140, reps=[1, 112, 1, 1]) /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %144 = cast(%142, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %145 = reshape(%143, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1120, 1, 1, 1), float32] */;
  %146 = nn.conv2d(%144, %145, padding=[0, 0, 0, 0], groups=112, out_dtype="float32") /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %147 = reshape(%146, newshape=[1, 112, 10, 1, 1]) /* ty=Tensor[(1, 112, 10, 1, 1), float32] */;
  %148 = sum(%147, axis=[0]) /* ty=Tensor[(112, 10, 1, 1), float32] */;
  %149 = transpose(%148, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %150 = abs(%149) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %151 = max(%150, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %152 = divide(%151, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %153 = divide(%149, %152) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %154 = greater_equal(%120, -128 /* ty=int32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %155 = less_equal(%120, 127 /* ty=int32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %156 = cast(%v18_weight, dtype="float32") /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %157 = nn.conv2d_transpose(%140, %156, channels=112, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %158 = abs(%157) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %159 = max(%158, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %160 = divide(%159, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %161 = divide(%157, %160) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %162 = cast(%161, dtype="int8") /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %163 = cast(%162, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %164 = multiply(%163, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %165 = ones(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %166 = multiply(%154, %155) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %167 = multiply(%164, %165) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %168 = zeros(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %169 = where(%166, %167, %168) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %170 = cast(%169, dtype="int32") /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %171 = greater_equal(%118, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %172 = less_equal(%118, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %173 = cast(%v17_conv_2_weight, dtype="float32") /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %174 = nn.conv2d_transpose(%169, %173, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %175 = abs(%174) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %176 = max(%175, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %177 = divide(%176, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %178 = divide(%174, %177) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %179 = multiply(%171, %172) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %180 = cast(%178, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %181 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %182 = where(%179, %180, %181) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %183 = cast(%182, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %184 = greater_equal(%116, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %185 = less_equal(%116, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %186 = nn.conv2d_transpose(%182, %v17_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %187 = abs(%186) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %188 = max(%187, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %189 = divide(%188, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %190 = divide(%186, %189) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %191 = multiply(%184, %185) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %192 = cast(%190, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %193 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %194 = where(%191, %192, %193) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %195 = cast(%194, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %196 = tile(%194, reps=[1, 56, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %197 = reshape(%115, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %198 = reshape(%196, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %199 = nn.conv2d(%197, %198, padding=[0, 0, 0, 0], groups=56, out_dtype="int32") /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %200 = reshape(%199, newshape=[1, 56, 336, 1, 1]) /* ty=Tensor[(1, 56, 336, 1, 1), int32] */;
  %201 = sum(%200, axis=[0]) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %202 = transpose(%201, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %203 = abs(%202) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %204 = max(%203, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %205 = divide(%204, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %206 = divide(%202, %205) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %207 = greater_equal(%112, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %208 = less_equal(%112, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %209 = greater_equal(%114, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %210 = less_equal(%114, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %211 = nn.conv2d_transpose(%194, %v17_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %212 = abs(%211) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %213 = max(%212, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %214 = divide(%213, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %215 = divide(%211, %214) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %216 = multiply(%209, %210) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %217 = cast(%215, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %218 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %219 = where(%216, %217, %218) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %221 = reshape(%v16_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %222 = divide(%220, %221) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %223 = reshape(%v16_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %224 = multiply(%222, %223) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %225 = multiply(%207, %208) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %226 = cast(%224, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %227 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %228 = where(%225, %226, %227) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %229 = cast(%228, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %230 = greater_equal(%110, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %231 = less_equal(%110, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %232 = nn.conv2d_transpose(%228, %v16_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %233 = abs(%232) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %234 = max(%233, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %235 = divide(%234, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %236 = divide(%232, %235) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %237 = multiply(%230, %231) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %238 = cast(%236, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %239 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %240 = where(%237, %238, %239) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %241 = cast(%240, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %242 = greater_equal(%108, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %243 = less_equal(%108, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %244 = nn.conv2d_transpose(%240, %v16_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %245 = abs(%244) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %246 = max(%245, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %247 = divide(%246, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %248 = divide(%244, %247) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %249 = multiply(%242, %243) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %250 = cast(%248, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %251 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %252 = where(%249, %250, %251) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %253 = cast(%252, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %254 = tile(%252, reps=[1, 56, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %255 = reshape(%107, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %256 = reshape(%254, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %257 = nn.conv2d(%255, %256, padding=[0, 0, 0, 0], groups=56, out_dtype="int32") /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %258 = reshape(%257, newshape=[1, 56, 336, 1, 1]) /* ty=Tensor[(1, 56, 336, 1, 1), int32] */;
  %259 = sum(%258, axis=[0]) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %260 = transpose(%259, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %261 = abs(%260) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %262 = max(%261, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %263 = divide(%262, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %264 = divide(%260, %263) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %265 = greater_equal(%104, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %266 = less_equal(%104, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %267 = greater_equal(%106, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %268 = less_equal(%106, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %269 = nn.conv2d_transpose(%252, %v16_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %270 = abs(%269) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %271 = max(%270, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %272 = divide(%271, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %273 = divide(%269, %272) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %274 = multiply(%267, %268) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %275 = cast(%273, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %276 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %277 = where(%274, %275, %276) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %279 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %280 = divide(%278, %279) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %281 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %282 = multiply(%280, %281) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %283 = multiply(%265, %266) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %284 = cast(%282, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %285 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %286 = where(%283, %284, %285) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %287 = cast(%286, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %288 = greater_equal(%102, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %289 = less_equal(%102, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %290 = nn.conv2d_transpose(%286, %v15_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %291 = abs(%290) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %292 = max(%291, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %293 = divide(%292, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %294 = divide(%290, %293) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %295 = multiply(%288, %289) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %296 = cast(%294, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %297 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %298 = where(%295, %296, %297) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %299 = cast(%298, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %300 = greater_equal(%100, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %301 = less_equal(%100, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %302 = nn.conv2d_transpose(%298, %v15_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %303 = abs(%302) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %304 = max(%303, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %305 = divide(%304, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %306 = divide(%302, %305) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %307 = multiply(%300, %301) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %308 = cast(%306, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %309 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %310 = where(%307, %308, %309) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %311 = cast(%310, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %312 = strided_slice(%99, begin=[0, 0, 0, 0], end=[1, 28, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 28, 4, 4), int8] */;
  %313 = tile(%310, reps=[1, 28, 1, 1]) /* ty=Tensor[(1, 9408, 4, 4), int8] */;
  %314 = reshape(%312, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 28, 4, 4), int8] */;
  %315 = reshape(%313, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(9408, 1, 4, 4), int8] */;
  %316 = nn.conv2d(%314, %315, padding=[0, 0, 0, 0], groups=28, out_dtype="int32") /* ty=Tensor[(1, 9408, 1, 1), int32] */;
  %317 = reshape(%316, newshape=[1, 28, 336, 1, 1]) /* ty=Tensor[(1, 28, 336, 1, 1), int32] */;
  %318 = sum(%317, axis=[0]) /* ty=Tensor[(28, 336, 1, 1), int32] */;
  %319 = transpose(%318, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 28, 1, 1), int32] */;
  %320 = abs(%319) /* ty=Tensor[(336, 28, 1, 1), int32] */;
  %321 = max(%320, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %322 = divide(%321, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %323 = divide(%319, %322) /* ty=Tensor[(336, 28, 1, 1), int32] */;
  %324 = greater_equal(%98, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %325 = less_equal(%98, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %326 = nn.conv2d_transpose(%310, %v15_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %327 = abs(%326) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %328 = max(%327, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %329 = divide(%328, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %330 = divide(%326, %329) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %331 = multiply(%324, %325) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %332 = cast(%330, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %333 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %334 = where(%331, %332, %333) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %335 = cast(%334, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %336 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %337 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %338 = nn.conv2d_transpose(%334, %v14_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %339 = abs(%338) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %340 = max(%339, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %341 = divide(%340, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %342 = divide(%338, %341) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %343 = multiply(%336, %337) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %344 = cast(%342, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %345 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %346 = where(%343, %344, %345) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %347 = cast(%346, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %348 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %349 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %350 = nn.conv2d_transpose(%346, %v14_conv_1_weight, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %351 = abs(%350) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %352 = max(%351, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %353 = divide(%352, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %354 = divide(%350, %353) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %355 = multiply(%348, %349) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %356 = cast(%354, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %357 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %358 = where(%355, %356, %357) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %359 = cast(%358, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %360 = tile(%358, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %361 = reshape(%93, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %362 = reshape(%360, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %363 = nn.conv2d(%361, %362, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %364 = reshape(%363, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %365 = sum(%364, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %366 = transpose(%365, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %367 = abs(%366) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %368 = max(%367, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %369 = divide(%368, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %370 = divide(%366, %369) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %371 = greater_equal(%90, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %372 = less_equal(%90, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %373 = greater_equal(%92, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %374 = less_equal(%92, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %375 = nn.conv2d_transpose(%358, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %376 = abs(%375) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %377 = max(%376, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %378 = divide(%377, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %379 = divide(%375, %378) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %380 = multiply(%373, %374) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %381 = cast(%379, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %382 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %383 = where(%380, %381, %382) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %385 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %386 = divide(%384, %385) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %387 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %388 = multiply(%386, %387) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %389 = multiply(%371, %372) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %390 = cast(%388, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %391 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %392 = where(%389, %390, %391) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %393 = cast(%392, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %394 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %395 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %396 = nn.conv2d_transpose(%392, %v13_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %397 = abs(%396) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %398 = max(%397, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %399 = divide(%398, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %400 = divide(%396, %399) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %401 = multiply(%394, %395) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %402 = cast(%400, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %403 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %404 = where(%401, %402, %403) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %405 = cast(%404, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %406 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %407 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %408 = nn.conv2d_transpose(%404, %v13_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %409 = abs(%408) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %410 = max(%409, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %411 = divide(%410, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %412 = divide(%408, %411) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %413 = multiply(%406, %407) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %414 = cast(%412, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %415 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %416 = where(%413, %414, %415) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %417 = cast(%416, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %418 = tile(%416, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %419 = reshape(%85, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %420 = reshape(%418, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %421 = nn.conv2d(%419, %420, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %422 = reshape(%421, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %423 = sum(%422, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %424 = transpose(%423, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %425 = abs(%424) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %426 = max(%425, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %427 = divide(%426, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %428 = divide(%424, %427) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %429 = greater_equal(%82, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %430 = less_equal(%82, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %431 = greater_equal(%84, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %432 = less_equal(%84, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %433 = nn.conv2d_transpose(%416, %v13_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %434 = abs(%433) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %435 = max(%434, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %436 = divide(%435, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %437 = divide(%433, %436) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %438 = multiply(%431, %432) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %439 = cast(%437, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %440 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %441 = where(%438, %439, %440) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %443 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %444 = divide(%442, %443) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %445 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %446 = multiply(%444, %445) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %447 = multiply(%429, %430) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %448 = cast(%446, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %449 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %450 = where(%447, %448, %449) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %451 = cast(%450, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %452 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %453 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %454 = nn.conv2d_transpose(%450, %v12_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %455 = abs(%454) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %456 = max(%455, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %457 = divide(%456, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %458 = divide(%454, %457) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %459 = multiply(%452, %453) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %460 = cast(%458, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %461 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %462 = where(%459, %460, %461) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %463 = cast(%462, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %464 = greater_equal(%78, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %465 = less_equal(%78, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %466 = nn.conv2d_transpose(%462, %v12_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %467 = abs(%466) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %468 = max(%467, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %469 = divide(%468, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %470 = divide(%466, %469) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %471 = multiply(%464, %465) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %472 = cast(%470, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %473 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %474 = where(%471, %472, %473) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %475 = cast(%474, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %476 = tile(%474, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %477 = reshape(%77, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %478 = reshape(%476, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %479 = nn.conv2d(%477, %478, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %480 = reshape(%479, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %481 = sum(%480, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %482 = transpose(%481, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %483 = abs(%482) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %484 = max(%483, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %485 = divide(%484, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %486 = divide(%482, %485) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %487 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %488 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %489 = nn.conv2d_transpose(%474, %v12_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %490 = abs(%489) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %491 = max(%490, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %492 = divide(%491, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %493 = divide(%489, %492) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %494 = multiply(%487, %488) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %495 = cast(%493, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %496 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %497 = where(%494, %495, %496) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %498 = cast(%497, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %499 = greater_equal(%74, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %500 = less_equal(%74, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %501 = nn.conv2d_transpose(%497, %v11_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %502 = abs(%501) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %503 = max(%502, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %504 = divide(%503, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %505 = divide(%501, %504) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %506 = multiply(%499, %500) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %507 = cast(%505, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %508 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %509 = where(%506, %507, %508) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %510 = cast(%509, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %511 = greater_equal(%72, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %512 = less_equal(%72, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %513 = nn.conv2d_transpose(%509, %v11_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %514 = abs(%513) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %515 = max(%514, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %516 = divide(%515, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %517 = divide(%513, %516) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %518 = multiply(%511, %512) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %519 = cast(%517, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %520 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %521 = where(%518, %519, %520) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %522 = cast(%521, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %523 = tile(%521, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %524 = reshape(%71, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %525 = reshape(%523, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %526 = nn.conv2d(%524, %525, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %527 = reshape(%526, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %528 = sum(%527, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %529 = transpose(%528, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %530 = abs(%529) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %531 = max(%530, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %532 = divide(%531, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %533 = divide(%529, %532) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %534 = greater_equal(%68, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %535 = less_equal(%68, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %536 = greater_equal(%70, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %537 = less_equal(%70, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %538 = nn.conv2d_transpose(%521, %v11_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %539 = abs(%538) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %540 = max(%539, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %541 = divide(%540, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %542 = divide(%538, %541) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %543 = multiply(%536, %537) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %544 = cast(%542, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %545 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %546 = where(%543, %544, %545) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %547 = cast(%546, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %548 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %549 = divide(%547, %548) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %550 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %551 = multiply(%549, %550) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %552 = multiply(%534, %535) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %553 = cast(%551, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %554 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %555 = where(%552, %553, %554) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %556 = cast(%555, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %557 = greater_equal(%66, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %558 = less_equal(%66, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %559 = nn.conv2d_transpose(%555, %v10_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %560 = abs(%559) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %561 = max(%560, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %562 = divide(%561, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %563 = divide(%559, %562) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %564 = multiply(%557, %558) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %565 = cast(%563, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %566 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %567 = where(%564, %565, %566) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %568 = cast(%567, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %569 = greater_equal(%64, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %570 = less_equal(%64, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %571 = nn.conv2d_transpose(%567, %v10_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %572 = abs(%571) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %573 = max(%572, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %574 = divide(%573, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %575 = divide(%571, %574) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %576 = multiply(%569, %570) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %577 = cast(%575, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %578 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %579 = where(%576, %577, %578) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %580 = cast(%579, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %581 = tile(%579, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %582 = reshape(%63, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %583 = reshape(%581, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %584 = nn.conv2d(%582, %583, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %585 = reshape(%584, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %586 = sum(%585, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %587 = transpose(%586, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %588 = abs(%587) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %589 = max(%588, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %590 = divide(%589, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %591 = divide(%587, %590) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %592 = greater_equal(%60, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %593 = less_equal(%60, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %594 = greater_equal(%62, meta[relay.Constant][10] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %595 = less_equal(%62, meta[relay.Constant][11] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %596 = nn.conv2d_transpose(%579, %v10_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %597 = abs(%596) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %598 = max(%597, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %599 = divide(%598, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %600 = divide(%596, %599) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %601 = multiply(%594, %595) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %602 = cast(%600, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %603 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %604 = where(%601, %602, %603) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %606 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %607 = divide(%605, %606) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %608 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %609 = multiply(%607, %608) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %610 = multiply(%592, %593) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %611 = cast(%609, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %612 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %613 = where(%610, %611, %612) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %614 = cast(%613, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %615 = greater_equal(%58, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %616 = less_equal(%58, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %617 = nn.conv2d_transpose(%613, %v9_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %618 = abs(%617) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %619 = max(%618, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %620 = divide(%619, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %621 = divide(%617, %620) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %622 = multiply(%615, %616) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %623 = cast(%621, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %624 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %625 = where(%622, %623, %624) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %626 = cast(%625, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %627 = greater_equal(%56, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %628 = less_equal(%56, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %629 = nn.conv2d_transpose(%625, %v9_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %630 = abs(%629) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %631 = max(%630, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %632 = divide(%631, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %633 = divide(%629, %632) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %634 = multiply(%627, %628) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %635 = cast(%633, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %636 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %637 = where(%634, %635, %636) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %638 = cast(%637, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %639 = greater_equal(%52, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %640 = less_equal(%52, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %641 = greater_equal(%54, meta[relay.Constant][12] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %642 = less_equal(%54, meta[relay.Constant][13] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %643 = nn.conv2d_transpose(%637, %v9_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %644 = abs(%643) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %645 = max(%644, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %646 = divide(%645, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %647 = divide(%643, %646) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %648 = multiply(%641, %642) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %649 = cast(%647, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %650 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %651 = where(%648, %649, %650) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %653 = reshape(%v8_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %654 = divide(%652, %653) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %655 = reshape(%v8_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %656 = multiply(%654, %655) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %657 = multiply(%639, %640) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %658 = cast(%656, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %659 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %660 = where(%657, %658, %659) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %661 = cast(%660, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %662 = greater_equal(%50, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %663 = less_equal(%50, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %664 = nn.conv2d_transpose(%660, %v8_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %665 = abs(%664) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %666 = max(%665, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %667 = divide(%666, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %668 = divide(%664, %667) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %669 = multiply(%662, %663) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %670 = cast(%668, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %671 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %672 = where(%669, %670, %671) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %673 = cast(%672, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %674 = greater_equal(%48, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %675 = less_equal(%48, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %676 = nn.conv2d_transpose(%672, %v8_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %677 = abs(%676) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %678 = max(%677, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %679 = divide(%678, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %680 = divide(%676, %679) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %681 = multiply(%674, %675) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %682 = cast(%680, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %683 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %684 = where(%681, %682, %683) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %685 = cast(%684, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %686 = greater_equal(%46, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %687 = less_equal(%46, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %688 = nn.conv2d_transpose(%684, %v8_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %689 = abs(%688) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %690 = max(%689, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %691 = divide(%690, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %692 = divide(%688, %691) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %693 = multiply(%686, %687) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %694 = cast(%692, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %695 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %696 = where(%693, %694, %695) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %697 = cast(%696, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %698 = nn.cross_entropy_with_logits(%127, %label) /* ty=float32 */;
  %699 = sum(%141, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %700 = cast(%153, dtype="int8") /* ty=Tensor[(10, 112, 1, 1), int8] */;
  %701 = sum(%170, axis=[1], exclude=True) /* ty=Tensor[(112), int32] */;
  %702 = sum(%183, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %703 = sum(%195, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %704 = cast(%206, dtype="int8") /* ty=Tensor[(336, 56, 1, 1), int8] */;
  %705 = sum(%229, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %706 = sum(%241, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %707 = sum(%253, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %708 = cast(%264, dtype="int8") /* ty=Tensor[(336, 56, 1, 1), int8] */;
  %709 = sum(%287, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %710 = sum(%299, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %711 = sum(%311, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %712 = cast(%323, dtype="int8") /* ty=Tensor[(336, 28, 1, 1), int8] */;
  %713 = sum(%335, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %714 = sum(%347, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %715 = sum(%359, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %716 = cast(%370, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %717 = sum(%393, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %718 = sum(%405, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %719 = sum(%417, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %720 = cast(%428, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %721 = sum(%451, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %722 = sum(%463, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %723 = sum(%475, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %724 = cast(%486, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %725 = sum(%498, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %726 = sum(%510, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %727 = sum(%522, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %728 = cast(%533, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %729 = sum(%556, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %730 = sum(%568, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %731 = sum(%580, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %732 = cast(%591, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %733 = sum(%614, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %734 = sum(%626, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %735 = sum(%638, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %736 = sum(%661, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %737 = sum(%673, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %738 = sum(%685, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %739 = sum(%697, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  (%698, %699, %700, %701, %702, %703, %704, %705, %706, %707, %708, %709, %710, %711, %712, %713, %714, %715, %716, %717, %718, %719, %720, %721, %722, %723, %724, %725, %726, %727, %728, %729, %730, %731, %732, %733, %734, %735, %736, %737, %738, %739)
}

