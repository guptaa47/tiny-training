def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(48), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(48), float32], %v2_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(48), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(48), float32], %v2_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v2_conv_2_bias: Tensor[(8), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(8), float32], %v3_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(8), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(8), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(96), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(96), float32], %v5_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(96), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(96), float32], %v5_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(96), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(96), float32], %v6_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(96), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(96), float32], %v6_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(96), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(96), float32], %v7_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v7_conv_1_bias: Tensor[(96), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(96), float32], %v7_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v7_conv_2_bias: Tensor[(24), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(24), float32], %v8_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v8_conv_0_bias: Tensor[(144), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(144), float32], %v8_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v8_conv_1_bias: Tensor[(144), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(144), float32], %v8_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v8_qadd_zero_x1: Tensor[(1), int8], %v8_qadd_zero_x2: Tensor[(1), int8], %v8_qadd_scale_x1: Tensor[(1), float32], %v8_qadd_scale_x2: Tensor[(1), float32], %v8_qadd_zero_y: Tensor[(1), int8], %v8_qadd_scale_y: Tensor[(1), float32], %v9_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(144), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(144), float32], %v10_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(144), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(144), float32], %v10_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(144), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(144), float32], %v11_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v11_conv_1_bias: Tensor[(144), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(144), float32], %v11_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v11_conv_2_bias: Tensor[(32), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(32), float32], %v12_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v12_conv_0_bias: Tensor[(192), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(192), float32], %v12_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v12_conv_1_bias: Tensor[(192), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(192), float32], %v12_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(192), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(192), float32], %v13_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v13_conv_1_bias: Tensor[(192), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(192), float32], %v13_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(192), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(192), float32], %v14_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(192), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(192), float32], %v14_conv_2_weight: Tensor[(56, 192, 1, 1), int8], %v14_conv_2_bias: Tensor[(56), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(56), float32], %v15_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v15_conv_0_bias: Tensor[(336), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(336), float32], %v15_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v15_conv_1_bias: Tensor[(336), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(336), float32], %v15_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v15_conv_2_bias: Tensor[(56), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(56), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v16_conv_0_bias: Tensor[(336), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(336), float32], %v16_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v16_conv_1_bias: Tensor[(336), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(336), float32], %v16_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v16_conv_2_bias: Tensor[(56), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(56), float32], %v16_qadd_zero_x1: Tensor[(1), int8], %v16_qadd_zero_x2: Tensor[(1), int8], %v16_qadd_scale_x1: Tensor[(1), float32], %v16_qadd_scale_x2: Tensor[(1), float32], %v16_qadd_zero_y: Tensor[(1), int8], %v16_qadd_scale_y: Tensor[(1), float32], %v17_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v17_conv_0_bias: Tensor[(336), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(336), float32], %v17_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v17_conv_1_bias: Tensor[(336), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(336), float32], %v17_conv_2_weight: Tensor[(112, 336, 1, 1), int8], %v17_conv_2_bias: Tensor[(112), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(112), float32], %v18_weight: Tensor[(10, 112, 1, 1), int8], %v18_bias: Tensor[(10), int32], %v18_zero_x: Tensor[(1), int8], %v18_zero_y: Tensor[(1), int8], %v18_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 112, 1, 1), int8], Tensor[(112), int32], Tensor[(112, 336, 1, 1), int8], Tensor[(336), int32], Tensor[(336, 1, 3, 3), int8], Tensor[(336), int32], Tensor[(336, 56, 1, 1), int8], Tensor[(56), int32], Tensor[(56, 336, 1, 1), int8], Tensor[(336), int32], Tensor[(336, 1, 3, 3), int8], Tensor[(336), int32], Tensor[(336, 56, 1, 1), int8], Tensor[(56), int32], Tensor[(56, 336, 1, 1), int8], Tensor[(336), int32], Tensor[(336, 1, 3, 3), int8], Tensor[(336), int32], Tensor[(336, 56, 1, 1), int8], Tensor[(56), int32], Tensor[(56, 192, 1, 1), int8], Tensor[(192), int32], Tensor[(192, 1, 3, 3), int8], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(32, 192, 1, 1), int8], Tensor[(192), int32], Tensor[(192, 1, 3, 3), int8], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(32, 192, 1, 1), int8], Tensor[(192), int32], Tensor[(192, 1, 3, 3), int8], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(32, 144, 1, 1), int8], Tensor[(144), int32], Tensor[(144, 1, 3, 3), int8], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 144, 1, 1), int8], Tensor[(144), int32], Tensor[(144, 1, 3, 3), int8], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 144, 1, 1), int8], Tensor[(144), int32], Tensor[(144, 1, 3, 3), int8], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 144, 1, 1), int8], Tensor[(144), int32], Tensor[(144, 1, 3, 3), int8], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(24, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 1, 3, 3), int8], Tensor[(96), int32], Tensor[(96, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 1, 3, 3), int8], Tensor[(96), int32], Tensor[(96, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(96, 1, 3, 3), int8], Tensor[(96), int32], Tensor[(96, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 1, 3, 3), int8], Tensor[(48), int32], Tensor[(48, 8, 1, 1), int8], Tensor[(8), int32], Tensor[(8, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 1, 3, 3), int8], Tensor[(48), int32], Tensor[(48, 8, 1, 1), int8], Tensor[(8), int32], Tensor[(8, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(48, 1, 3, 3), int8], Tensor[(48), int32], Tensor[(48, 8, 1, 1), int8], Tensor[(8), int32], Tensor[(8, 16, 1, 1), int8], Tensor[(16), int32], Tensor[(16, 1, 3, 3), int8], Tensor[(16), int32], Tensor[(16, 3, 3, 3), int8]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %54 = nn.mcuadd(%47, %53, %v8_qadd_zero_x1, %v8_qadd_zero_x2, %v8_qadd_scale_x1, %v8_qadd_scale_x2, %v8_qadd_zero_y, %v8_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %84 = nn.mcuadd(%77, %83, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %100 = nn.mcuconv2d(%99, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %106 = nn.mcuadd(%99, %105, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %108 = nn.mcuconv2d(%107, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %114 = nn.mcuadd(%107, %113, %v16_qadd_zero_x1, %v16_qadd_zero_x2, %v16_qadd_scale_x1, %v16_qadd_scale_x2, %v16_qadd_zero_y, %v16_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 112, 4, 4), int8] */;
  %122 = mcumean(%121, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %123 = nn.mcuconv2d(%122, %v18_weight, %v18_bias, %v18_zero_x, %v18_zero_y, %v18_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %124 = nn.mcutruncate(%123) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %125 = reshape(%124, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %127 = nn.log_softmax(%126) /* ty=Tensor[(1, 10), float32] */;
  %128 = greater_equal(%123, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %129 = less_equal(%123, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %130 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %131 = negative(%130) /* ty=float32 */;
  %132 = multiply(%131, %label) /* ty=Tensor[(1, 10), float32] */;
  %133 = sum(%132, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %134 = exp(%127) /* ty=Tensor[(1, 10), float32] */;
  %135 = multiply(%133, %134) /* ty=Tensor[(1, 10), float32] */;
  %136 = subtract(%132, %135) /* ty=Tensor[(1, 10), float32] */;
  %137 = multiply(%128, %129) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %138 = reshape(%136, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %139 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %140 = where(%137, %138, %139) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %141 = cast(%140, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %142 = reshape(%122, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %143 = tile(%140, reps=[1, 112, 1, 1]) /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %144 = cast(%142, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %145 = reshape(%143, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1120, 1, 1, 1), float32] */;
  %146 = nn.conv2d(%144, %145, padding=[0, 0, 0, 0], groups=112, out_dtype="float32") /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %147 = reshape(%146, newshape=[1, 112, 10, 1, 1]) /* ty=Tensor[(1, 112, 10, 1, 1), float32] */;
  %148 = sum(%147, axis=[0]) /* ty=Tensor[(112, 10, 1, 1), float32] */;
  %149 = transpose(%148, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %150 = abs(%149) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %151 = max(%150, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %152 = divide(%151, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %153 = divide(%149, %152) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %154 = greater_equal(%120, -128 /* ty=int32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %155 = less_equal(%120, 127 /* ty=int32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %156 = cast(%v18_weight, dtype="float32") /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %157 = nn.conv2d_transpose(%140, %156, channels=112, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %158 = abs(%157) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %159 = max(%158, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %160 = divide(%159, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %161 = divide(%157, %160) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %162 = cast(%161, dtype="int8") /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %163 = cast(%162, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %164 = multiply(%163, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %165 = ones(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %166 = multiply(%154, %155) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %167 = multiply(%164, %165) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %168 = zeros(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %169 = where(%166, %167, %168) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %170 = cast(%169, dtype="int32") /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %171 = reshape(%119, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %172 = tile(%169, reps=[1, 336, 1, 1]) /* ty=Tensor[(1, 37632, 4, 4), float32] */;
  %173 = cast(%171, dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %174 = reshape(%172, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(37632, 1, 4, 4), float32] */;
  %175 = nn.conv2d(%173, %174, padding=[0, 0, 0, 0], groups=336, out_dtype="float32") /* ty=Tensor[(1, 37632, 1, 1), float32] */;
  %176 = reshape(%175, newshape=[1, 336, 112, 1, 1]) /* ty=Tensor[(1, 336, 112, 1, 1), float32] */;
  %177 = sum(%176, axis=[0]) /* ty=Tensor[(336, 112, 1, 1), float32] */;
  %178 = transpose(%177, axes=[1, 0, 2, 3]) /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %179 = abs(%178) /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %180 = max(%179, axis=[1], keepdims=True) /* ty=Tensor[(112, 1, 1, 1), float32] */;
  %181 = divide(%180, 127f /* ty=float32 */) /* ty=Tensor[(112, 1, 1, 1), float32] */;
  %182 = divide(%178, %181) /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %183 = greater_equal(%118, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %184 = less_equal(%118, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %185 = cast(%v17_conv_2_weight, dtype="float32") /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %186 = nn.conv2d_transpose(%169, %185, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %187 = abs(%186) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %188 = max(%187, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %189 = divide(%188, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %190 = divide(%186, %189) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %191 = multiply(%183, %184) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %192 = cast(%190, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %193 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %194 = where(%191, %192, %193) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %195 = cast(%194, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %196 = tile(%194, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %197 = reshape(%117, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %198 = reshape(%196, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(336, 1, 4, 4), int8] */;
  %199 = nn.conv2d(%197, %198, padding=[1, 1, 1, 1], groups=336, out_dtype="int32") /* ty=Tensor[(1, 336, 3, 3), int32] */;
  %200 = reshape(%199, newshape=[1, 1, 336, 3, 3]) /* ty=Tensor[(1, 1, 336, 3, 3), int32] */;
  %201 = sum(%200, axis=[0]) /* ty=Tensor[(1, 336, 3, 3), int32] */;
  %202 = transpose(%201, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %203 = abs(%202) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %204 = max(%203, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %205 = divide(%204, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %206 = divide(%202, %205) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %207 = greater_equal(%116, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %208 = less_equal(%116, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %209 = nn.conv2d_transpose(%194, %v17_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %210 = abs(%209) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %211 = max(%210, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %212 = divide(%211, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %213 = divide(%209, %212) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %214 = multiply(%207, %208) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %215 = cast(%213, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %216 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %217 = where(%214, %215, %216) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %218 = cast(%217, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %219 = tile(%217, reps=[1, 56, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %220 = reshape(%115, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %221 = reshape(%219, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %222 = nn.conv2d(%220, %221, padding=[0, 0, 0, 0], groups=56, out_dtype="int32") /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %223 = reshape(%222, newshape=[1, 56, 336, 1, 1]) /* ty=Tensor[(1, 56, 336, 1, 1), int32] */;
  %224 = sum(%223, axis=[0]) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %225 = transpose(%224, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %226 = abs(%225) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %227 = max(%226, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %228 = divide(%227, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %229 = divide(%225, %228) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %230 = greater_equal(%112, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %231 = less_equal(%112, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %232 = greater_equal(%114, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %233 = less_equal(%114, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %234 = nn.conv2d_transpose(%217, %v17_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %235 = abs(%234) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %236 = max(%235, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %237 = divide(%236, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %238 = divide(%234, %237) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %239 = multiply(%232, %233) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %240 = cast(%238, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %241 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %242 = where(%239, %240, %241) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %244 = reshape(%v16_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %245 = divide(%243, %244) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %246 = reshape(%v16_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %247 = multiply(%245, %246) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %248 = multiply(%230, %231) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %249 = cast(%247, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %250 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %251 = where(%248, %249, %250) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %252 = cast(%251, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %253 = tile(%251, reps=[1, 336, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %254 = reshape(%111, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %255 = reshape(%253, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %256 = nn.conv2d(%254, %255, padding=[0, 0, 0, 0], groups=336, out_dtype="int32") /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %257 = reshape(%256, newshape=[1, 336, 56, 1, 1]) /* ty=Tensor[(1, 336, 56, 1, 1), int32] */;
  %258 = sum(%257, axis=[0]) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %259 = transpose(%258, axes=[1, 0, 2, 3]) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %260 = abs(%259) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %261 = max(%260, axis=[1], keepdims=True) /* ty=Tensor[(56, 1, 1, 1), int32] */;
  %262 = divide(%261, 127 /* ty=int32 */) /* ty=Tensor[(56, 1, 1, 1), int32] */;
  %263 = divide(%259, %262) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %264 = greater_equal(%110, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %265 = less_equal(%110, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %266 = nn.conv2d_transpose(%251, %v16_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %267 = abs(%266) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %268 = max(%267, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %269 = divide(%268, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %270 = divide(%266, %269) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %271 = multiply(%264, %265) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %272 = cast(%270, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %273 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %274 = where(%271, %272, %273) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %275 = cast(%274, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %276 = tile(%274, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %277 = reshape(%109, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %278 = reshape(%276, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(336, 1, 4, 4), int8] */;
  %279 = nn.conv2d(%277, %278, padding=[1, 1, 1, 1], groups=336, out_dtype="int32") /* ty=Tensor[(1, 336, 3, 3), int32] */;
  %280 = reshape(%279, newshape=[1, 1, 336, 3, 3]) /* ty=Tensor[(1, 1, 336, 3, 3), int32] */;
  %281 = sum(%280, axis=[0]) /* ty=Tensor[(1, 336, 3, 3), int32] */;
  %282 = transpose(%281, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %283 = abs(%282) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %284 = max(%283, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %285 = divide(%284, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %286 = divide(%282, %285) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %287 = greater_equal(%108, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %288 = less_equal(%108, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %289 = nn.conv2d_transpose(%274, %v16_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %290 = abs(%289) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %291 = max(%290, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %292 = divide(%291, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %293 = divide(%289, %292) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %294 = multiply(%287, %288) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %295 = cast(%293, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %296 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %297 = where(%294, %295, %296) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %298 = cast(%297, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %299 = tile(%297, reps=[1, 56, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %300 = reshape(%107, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %301 = reshape(%299, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %302 = nn.conv2d(%300, %301, padding=[0, 0, 0, 0], groups=56, out_dtype="int32") /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %303 = reshape(%302, newshape=[1, 56, 336, 1, 1]) /* ty=Tensor[(1, 56, 336, 1, 1), int32] */;
  %304 = sum(%303, axis=[0]) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %305 = transpose(%304, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %306 = abs(%305) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %307 = max(%306, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %308 = divide(%307, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %309 = divide(%305, %308) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %310 = greater_equal(%104, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %311 = less_equal(%104, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %312 = greater_equal(%106, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %313 = less_equal(%106, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %314 = nn.conv2d_transpose(%297, %v16_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %315 = abs(%314) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %316 = max(%315, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %317 = divide(%316, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %318 = divide(%314, %317) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %319 = multiply(%312, %313) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %320 = cast(%318, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %321 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %322 = where(%319, %320, %321) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %323 = cast(%322, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %324 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %325 = divide(%323, %324) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %326 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %327 = multiply(%325, %326) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %328 = multiply(%310, %311) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %329 = cast(%327, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %330 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %331 = where(%328, %329, %330) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %332 = cast(%331, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %333 = tile(%331, reps=[1, 336, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %334 = reshape(%103, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %335 = reshape(%333, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %336 = nn.conv2d(%334, %335, padding=[0, 0, 0, 0], groups=336, out_dtype="int32") /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %337 = reshape(%336, newshape=[1, 336, 56, 1, 1]) /* ty=Tensor[(1, 336, 56, 1, 1), int32] */;
  %338 = sum(%337, axis=[0]) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %339 = transpose(%338, axes=[1, 0, 2, 3]) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %340 = abs(%339) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %341 = max(%340, axis=[1], keepdims=True) /* ty=Tensor[(56, 1, 1, 1), int32] */;
  %342 = divide(%341, 127 /* ty=int32 */) /* ty=Tensor[(56, 1, 1, 1), int32] */;
  %343 = divide(%339, %342) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %344 = greater_equal(%102, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %345 = less_equal(%102, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %346 = nn.conv2d_transpose(%331, %v15_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %347 = abs(%346) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %348 = max(%347, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %349 = divide(%348, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %350 = divide(%346, %349) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %351 = multiply(%344, %345) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %352 = cast(%350, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %353 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %354 = where(%351, %352, %353) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %355 = cast(%354, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %356 = tile(%354, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %357 = reshape(%101, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %358 = reshape(%356, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(336, 1, 4, 4), int8] */;
  %359 = nn.conv2d(%357, %358, padding=[1, 1, 1, 1], groups=336, out_dtype="int32") /* ty=Tensor[(1, 336, 3, 3), int32] */;
  %360 = reshape(%359, newshape=[1, 1, 336, 3, 3]) /* ty=Tensor[(1, 1, 336, 3, 3), int32] */;
  %361 = sum(%360, axis=[0]) /* ty=Tensor[(1, 336, 3, 3), int32] */;
  %362 = transpose(%361, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %363 = abs(%362) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %364 = max(%363, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %365 = divide(%364, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %366 = divide(%362, %365) /* ty=Tensor[(336, 1, 3, 3), int32] */;
  %367 = greater_equal(%100, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %368 = less_equal(%100, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %369 = nn.conv2d_transpose(%354, %v15_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %370 = abs(%369) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %371 = max(%370, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %372 = divide(%371, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %373 = divide(%369, %372) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %374 = multiply(%367, %368) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %375 = cast(%373, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %376 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %377 = where(%374, %375, %376) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %378 = cast(%377, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %379 = tile(%377, reps=[1, 56, 1, 1]) /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %380 = reshape(%99, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %381 = reshape(%379, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %382 = nn.conv2d(%380, %381, padding=[0, 0, 0, 0], groups=56, out_dtype="int32") /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %383 = reshape(%382, newshape=[1, 56, 336, 1, 1]) /* ty=Tensor[(1, 56, 336, 1, 1), int32] */;
  %384 = sum(%383, axis=[0]) /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %385 = transpose(%384, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %386 = abs(%385) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %387 = max(%386, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %388 = divide(%387, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %389 = divide(%385, %388) /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %390 = greater_equal(%98, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %391 = less_equal(%98, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %392 = nn.conv2d_transpose(%377, %v15_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %393 = abs(%392) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %394 = max(%393, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %395 = divide(%394, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %396 = divide(%392, %395) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %397 = multiply(%390, %391) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %398 = cast(%396, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %399 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %400 = where(%397, %398, %399) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %401 = cast(%400, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %402 = tile(%400, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 10752, 4, 4), int8] */;
  %403 = reshape(%97, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %404 = reshape(%402, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(10752, 1, 4, 4), int8] */;
  %405 = nn.conv2d(%403, %404, padding=[0, 0, 0, 0], groups=192, out_dtype="int32") /* ty=Tensor[(1, 10752, 1, 1), int32] */;
  %406 = reshape(%405, newshape=[1, 192, 56, 1, 1]) /* ty=Tensor[(1, 192, 56, 1, 1), int32] */;
  %407 = sum(%406, axis=[0]) /* ty=Tensor[(192, 56, 1, 1), int32] */;
  %408 = transpose(%407, axes=[1, 0, 2, 3]) /* ty=Tensor[(56, 192, 1, 1), int32] */;
  %409 = abs(%408) /* ty=Tensor[(56, 192, 1, 1), int32] */;
  %410 = max(%409, axis=[1], keepdims=True) /* ty=Tensor[(56, 1, 1, 1), int32] */;
  %411 = divide(%410, 127 /* ty=int32 */) /* ty=Tensor[(56, 1, 1, 1), int32] */;
  %412 = divide(%408, %411) /* ty=Tensor[(56, 192, 1, 1), int32] */;
  %413 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %414 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %415 = nn.conv2d_transpose(%400, %v14_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %416 = abs(%415) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %417 = max(%416, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %418 = divide(%417, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %419 = divide(%415, %418) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %420 = multiply(%413, %414) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %421 = cast(%419, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %422 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %423 = where(%420, %421, %422) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %424 = cast(%423, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %425 = tile(%423, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %426 = reshape(%95, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %427 = reshape(%425, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 4, 4), int8] */;
  %428 = nn.conv2d(%426, %427, padding=[1, 1, 1, 1], dilation=[2, 2], groups=192, out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %429 = reshape(%428, newshape=[1, 1, 192, 4, 4]) /* ty=Tensor[(1, 1, 192, 4, 4), int32] */;
  %430 = sum(%429, axis=[0]) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %431 = transpose(%430, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 4, 4), int32] */;
  %432 = strided_slice(%431, begin=[0, 0, 0, 0], end=[192, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %433 = abs(%432) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %434 = max(%433, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %435 = divide(%434, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %436 = divide(%432, %435) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %437 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %438 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %439 = nn.conv2d_transpose(%423, %v14_conv_1_weight, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %440 = abs(%439) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %441 = max(%440, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %442 = divide(%441, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %443 = divide(%439, %442) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %444 = multiply(%437, %438) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %445 = cast(%443, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %446 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %447 = where(%444, %445, %446) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %448 = cast(%447, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %449 = tile(%447, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %450 = reshape(%93, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %451 = reshape(%449, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %452 = nn.conv2d(%450, %451, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %453 = reshape(%452, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %454 = sum(%453, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %455 = transpose(%454, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %456 = abs(%455) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %457 = max(%456, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %458 = divide(%457, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %459 = divide(%455, %458) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %460 = greater_equal(%90, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %461 = less_equal(%90, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %462 = greater_equal(%92, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %463 = less_equal(%92, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %464 = nn.conv2d_transpose(%447, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %465 = abs(%464) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %466 = max(%465, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %467 = divide(%466, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %468 = divide(%464, %467) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %469 = multiply(%462, %463) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %470 = cast(%468, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %471 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %472 = where(%469, %470, %471) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %474 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %475 = divide(%473, %474) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %476 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %477 = multiply(%475, %476) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %478 = multiply(%460, %461) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %479 = cast(%477, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %480 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %481 = where(%478, %479, %480) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %482 = cast(%481, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %483 = tile(%481, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %484 = reshape(%89, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %485 = reshape(%483, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %486 = nn.conv2d(%484, %485, padding=[0, 0, 0, 0], groups=192, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %487 = reshape(%486, newshape=[1, 192, 32, 1, 1]) /* ty=Tensor[(1, 192, 32, 1, 1), int32] */;
  %488 = sum(%487, axis=[0]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %489 = transpose(%488, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %490 = abs(%489) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %491 = max(%490, axis=[1], keepdims=True) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %492 = divide(%491, 127 /* ty=int32 */) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %493 = divide(%489, %492) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %494 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %495 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %496 = nn.conv2d_transpose(%481, %v13_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %497 = abs(%496) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %498 = max(%497, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %499 = divide(%498, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %500 = divide(%496, %499) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %501 = multiply(%494, %495) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %502 = cast(%500, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %503 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %504 = where(%501, %502, %503) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %505 = cast(%504, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %506 = tile(%504, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %507 = reshape(%87, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %508 = reshape(%506, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 8, 8), int8] */;
  %509 = nn.conv2d(%507, %508, padding=[1, 1, 1, 1], groups=192, out_dtype="int32") /* ty=Tensor[(1, 192, 3, 3), int32] */;
  %510 = reshape(%509, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), int32] */;
  %511 = sum(%510, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), int32] */;
  %512 = transpose(%511, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %513 = abs(%512) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %514 = max(%513, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %515 = divide(%514, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %516 = divide(%512, %515) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %517 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %518 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %519 = nn.conv2d_transpose(%504, %v13_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %520 = abs(%519) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %521 = max(%520, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %522 = divide(%521, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %523 = divide(%519, %522) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %524 = multiply(%517, %518) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %525 = cast(%523, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %526 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %527 = where(%524, %525, %526) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %528 = cast(%527, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %529 = tile(%527, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %530 = reshape(%85, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %531 = reshape(%529, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %532 = nn.conv2d(%530, %531, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %533 = reshape(%532, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %534 = sum(%533, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %535 = transpose(%534, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %536 = abs(%535) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %537 = max(%536, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %538 = divide(%537, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %539 = divide(%535, %538) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %540 = greater_equal(%82, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %541 = less_equal(%82, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %542 = greater_equal(%84, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %543 = less_equal(%84, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %544 = nn.conv2d_transpose(%527, %v13_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %545 = abs(%544) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %546 = max(%545, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %547 = divide(%546, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %548 = divide(%544, %547) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %549 = multiply(%542, %543) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %550 = cast(%548, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %551 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %552 = where(%549, %550, %551) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %554 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %555 = divide(%553, %554) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %556 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %557 = multiply(%555, %556) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %558 = multiply(%540, %541) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %559 = cast(%557, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %560 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %561 = where(%558, %559, %560) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %562 = cast(%561, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %563 = tile(%561, reps=[1, 192, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %564 = reshape(%81, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %565 = reshape(%563, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %566 = nn.conv2d(%564, %565, padding=[0, 0, 0, 0], groups=192, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %567 = reshape(%566, newshape=[1, 192, 32, 1, 1]) /* ty=Tensor[(1, 192, 32, 1, 1), int32] */;
  %568 = sum(%567, axis=[0]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %569 = transpose(%568, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %570 = abs(%569) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %571 = max(%570, axis=[1], keepdims=True) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %572 = divide(%571, 127 /* ty=int32 */) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %573 = divide(%569, %572) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %574 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %575 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %576 = nn.conv2d_transpose(%561, %v12_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %577 = abs(%576) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %578 = max(%577, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %579 = divide(%578, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %580 = divide(%576, %579) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %581 = multiply(%574, %575) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %582 = cast(%580, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %583 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %584 = where(%581, %582, %583) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %585 = cast(%584, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %586 = tile(%584, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %587 = reshape(%79, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %588 = reshape(%586, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(192, 1, 8, 8), int8] */;
  %589 = nn.conv2d(%587, %588, padding=[1, 1, 1, 1], groups=192, out_dtype="int32") /* ty=Tensor[(1, 192, 3, 3), int32] */;
  %590 = reshape(%589, newshape=[1, 1, 192, 3, 3]) /* ty=Tensor[(1, 1, 192, 3, 3), int32] */;
  %591 = sum(%590, axis=[0]) /* ty=Tensor[(1, 192, 3, 3), int32] */;
  %592 = transpose(%591, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %593 = abs(%592) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %594 = max(%593, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %595 = divide(%594, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %596 = divide(%592, %595) /* ty=Tensor[(192, 1, 3, 3), int32] */;
  %597 = greater_equal(%78, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %598 = less_equal(%78, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %599 = nn.conv2d_transpose(%584, %v12_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %600 = abs(%599) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %601 = max(%600, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %602 = divide(%601, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %603 = divide(%599, %602) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %604 = multiply(%597, %598) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %605 = cast(%603, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %606 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %607 = where(%604, %605, %606) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %608 = cast(%607, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %609 = tile(%607, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %610 = reshape(%77, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %611 = reshape(%609, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %612 = nn.conv2d(%610, %611, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %613 = reshape(%612, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %614 = sum(%613, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %615 = transpose(%614, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %616 = abs(%615) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %617 = max(%616, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %618 = divide(%617, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %619 = divide(%615, %618) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %620 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %621 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %622 = nn.conv2d_transpose(%607, %v12_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %623 = abs(%622) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %624 = max(%623, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %625 = divide(%624, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %626 = divide(%622, %625) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %627 = multiply(%620, %621) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %628 = cast(%626, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %629 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %630 = where(%627, %628, %629) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %631 = cast(%630, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %632 = tile(%630, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 4608, 8, 8), int8] */;
  %633 = reshape(%75, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %634 = reshape(%632, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(4608, 1, 8, 8), int8] */;
  %635 = nn.conv2d(%633, %634, padding=[0, 0, 0, 0], groups=144, out_dtype="int32") /* ty=Tensor[(1, 4608, 1, 1), int32] */;
  %636 = reshape(%635, newshape=[1, 144, 32, 1, 1]) /* ty=Tensor[(1, 144, 32, 1, 1), int32] */;
  %637 = sum(%636, axis=[0]) /* ty=Tensor[(144, 32, 1, 1), int32] */;
  %638 = transpose(%637, axes=[1, 0, 2, 3]) /* ty=Tensor[(32, 144, 1, 1), int32] */;
  %639 = abs(%638) /* ty=Tensor[(32, 144, 1, 1), int32] */;
  %640 = max(%639, axis=[1], keepdims=True) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %641 = divide(%640, 127 /* ty=int32 */) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %642 = divide(%638, %641) /* ty=Tensor[(32, 144, 1, 1), int32] */;
  %643 = greater_equal(%74, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %644 = less_equal(%74, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %645 = nn.conv2d_transpose(%630, %v11_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %646 = abs(%645) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %647 = max(%646, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %648 = divide(%647, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %649 = divide(%645, %648) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %650 = multiply(%643, %644) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %651 = cast(%649, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %652 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %653 = where(%650, %651, %652) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %654 = cast(%653, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %655 = tile(%653, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %656 = reshape(%73, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %657 = reshape(%655, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), int8] */;
  %658 = nn.conv2d(%656, %657, padding=[1, 1, 1, 1], groups=144, out_dtype="int32") /* ty=Tensor[(1, 144, 3, 3), int32] */;
  %659 = reshape(%658, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), int32] */;
  %660 = sum(%659, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), int32] */;
  %661 = transpose(%660, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %662 = abs(%661) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %663 = max(%662, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %664 = divide(%663, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %665 = divide(%661, %664) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %666 = greater_equal(%72, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %667 = less_equal(%72, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %668 = nn.conv2d_transpose(%653, %v11_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %669 = abs(%668) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %670 = max(%669, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %671 = divide(%670, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %672 = divide(%668, %671) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %673 = multiply(%666, %667) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %674 = cast(%672, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %675 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %676 = where(%673, %674, %675) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %677 = cast(%676, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %678 = tile(%676, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %679 = reshape(%71, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %680 = reshape(%678, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %681 = nn.conv2d(%679, %680, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %682 = reshape(%681, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %683 = sum(%682, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %684 = transpose(%683, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %685 = abs(%684) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %686 = max(%685, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %687 = divide(%686, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %688 = divide(%684, %687) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %689 = greater_equal(%68, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %690 = less_equal(%68, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %691 = greater_equal(%70, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %692 = less_equal(%70, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %693 = nn.conv2d_transpose(%676, %v11_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %694 = abs(%693) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %695 = max(%694, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %696 = divide(%695, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %697 = divide(%693, %696) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %698 = multiply(%691, %692) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %699 = cast(%697, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %700 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %701 = where(%698, %699, %700) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %703 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %704 = divide(%702, %703) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %705 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %706 = multiply(%704, %705) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %707 = multiply(%689, %690) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %708 = cast(%706, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %709 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %710 = where(%707, %708, %709) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %711 = cast(%710, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %712 = tile(%710, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %713 = reshape(%67, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %714 = reshape(%712, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %715 = nn.conv2d(%713, %714, padding=[0, 0, 0, 0], groups=144, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %716 = reshape(%715, newshape=[1, 144, 24, 1, 1]) /* ty=Tensor[(1, 144, 24, 1, 1), int32] */;
  %717 = sum(%716, axis=[0]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %718 = transpose(%717, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %719 = abs(%718) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %720 = max(%719, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %721 = divide(%720, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %722 = divide(%718, %721) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %723 = greater_equal(%66, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %724 = less_equal(%66, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %725 = nn.conv2d_transpose(%710, %v10_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %726 = abs(%725) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %727 = max(%726, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %728 = divide(%727, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %729 = divide(%725, %728) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %730 = multiply(%723, %724) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %731 = cast(%729, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %732 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %733 = where(%730, %731, %732) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %734 = cast(%733, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %735 = tile(%733, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %736 = reshape(%65, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %737 = reshape(%735, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), int8] */;
  %738 = nn.conv2d(%736, %737, padding=[1, 1, 1, 1], groups=144, out_dtype="int32") /* ty=Tensor[(1, 144, 3, 3), int32] */;
  %739 = reshape(%738, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), int32] */;
  %740 = sum(%739, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), int32] */;
  %741 = transpose(%740, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %742 = abs(%741) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %743 = max(%742, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %744 = divide(%743, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %745 = divide(%741, %744) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %746 = greater_equal(%64, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %747 = less_equal(%64, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %748 = nn.conv2d_transpose(%733, %v10_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %749 = abs(%748) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %750 = max(%749, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %751 = divide(%750, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %752 = divide(%748, %751) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %753 = multiply(%746, %747) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %754 = cast(%752, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %755 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %756 = where(%753, %754, %755) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %757 = cast(%756, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %758 = tile(%756, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %759 = reshape(%63, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %760 = reshape(%758, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %761 = nn.conv2d(%759, %760, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %762 = reshape(%761, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %763 = sum(%762, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %764 = transpose(%763, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %765 = abs(%764) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %766 = max(%765, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %767 = divide(%766, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %768 = divide(%764, %767) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %769 = greater_equal(%60, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %770 = less_equal(%60, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %771 = greater_equal(%62, meta[relay.Constant][10] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %772 = less_equal(%62, meta[relay.Constant][11] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %773 = nn.conv2d_transpose(%756, %v10_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %774 = abs(%773) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %775 = max(%774, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %776 = divide(%775, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %777 = divide(%773, %776) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %778 = multiply(%771, %772) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %779 = cast(%777, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %780 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %781 = where(%778, %779, %780) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %782 = cast(%781, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %783 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %784 = divide(%782, %783) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %785 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %786 = multiply(%784, %785) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %787 = multiply(%769, %770) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %788 = cast(%786, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %789 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %790 = where(%787, %788, %789) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %791 = cast(%790, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %792 = tile(%790, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %793 = reshape(%59, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %794 = reshape(%792, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %795 = nn.conv2d(%793, %794, padding=[0, 0, 0, 0], groups=144, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %796 = reshape(%795, newshape=[1, 144, 24, 1, 1]) /* ty=Tensor[(1, 144, 24, 1, 1), int32] */;
  %797 = sum(%796, axis=[0]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %798 = transpose(%797, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %799 = abs(%798) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %800 = max(%799, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %801 = divide(%800, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %802 = divide(%798, %801) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %803 = greater_equal(%58, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %804 = less_equal(%58, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %805 = nn.conv2d_transpose(%790, %v9_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %806 = abs(%805) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %807 = max(%806, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %808 = divide(%807, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %809 = divide(%805, %808) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %810 = multiply(%803, %804) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %811 = cast(%809, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %812 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %813 = where(%810, %811, %812) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %814 = cast(%813, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %815 = tile(%813, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %816 = reshape(%57, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %817 = reshape(%815, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), int8] */;
  %818 = nn.conv2d(%816, %817, padding=[1, 1, 1, 1], groups=144, out_dtype="int32") /* ty=Tensor[(1, 144, 3, 3), int32] */;
  %819 = reshape(%818, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), int32] */;
  %820 = sum(%819, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), int32] */;
  %821 = transpose(%820, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %822 = abs(%821) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %823 = max(%822, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %824 = divide(%823, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %825 = divide(%821, %824) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %826 = greater_equal(%56, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %827 = less_equal(%56, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %828 = nn.conv2d_transpose(%813, %v9_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %829 = abs(%828) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %830 = max(%829, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %831 = divide(%830, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %832 = divide(%828, %831) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %833 = multiply(%826, %827) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %834 = cast(%832, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %835 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %836 = where(%833, %834, %835) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %837 = cast(%836, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %838 = tile(%836, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %839 = reshape(%55, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %840 = reshape(%838, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %841 = nn.conv2d(%839, %840, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %842 = reshape(%841, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %843 = sum(%842, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %844 = transpose(%843, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %845 = abs(%844) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %846 = max(%845, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %847 = divide(%846, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %848 = divide(%844, %847) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %849 = greater_equal(%52, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %850 = less_equal(%52, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %851 = greater_equal(%54, meta[relay.Constant][12] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %852 = less_equal(%54, meta[relay.Constant][13] /* ty=int8 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %853 = nn.conv2d_transpose(%836, %v9_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %854 = abs(%853) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %855 = max(%854, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %856 = divide(%855, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %857 = divide(%853, %856) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %858 = multiply(%851, %852) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %859 = cast(%857, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %860 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %861 = where(%858, %859, %860) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %862 = cast(%861, dtype="float32") /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %863 = reshape(%v8_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %864 = divide(%862, %863) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %865 = reshape(%v8_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %866 = multiply(%864, %865) /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %867 = multiply(%849, %850) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %868 = cast(%866, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %869 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %870 = where(%867, %868, %869) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %871 = cast(%870, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %872 = tile(%870, reps=[1, 144, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %873 = reshape(%51, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %874 = reshape(%872, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %875 = nn.conv2d(%873, %874, padding=[0, 0, 0, 0], groups=144, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %876 = reshape(%875, newshape=[1, 144, 24, 1, 1]) /* ty=Tensor[(1, 144, 24, 1, 1), int32] */;
  %877 = sum(%876, axis=[0]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %878 = transpose(%877, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %879 = abs(%878) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %880 = max(%879, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %881 = divide(%880, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %882 = divide(%878, %881) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %883 = greater_equal(%50, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %884 = less_equal(%50, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %885 = nn.conv2d_transpose(%870, %v8_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %886 = abs(%885) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %887 = max(%886, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %888 = divide(%887, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %889 = divide(%885, %888) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %890 = multiply(%883, %884) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %891 = cast(%889, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %892 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %893 = where(%890, %891, %892) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %894 = cast(%893, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %895 = tile(%893, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %896 = reshape(%49, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %897 = reshape(%895, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(144, 1, 8, 8), int8] */;
  %898 = nn.conv2d(%896, %897, padding=[1, 1, 1, 1], groups=144, out_dtype="int32") /* ty=Tensor[(1, 144, 3, 3), int32] */;
  %899 = reshape(%898, newshape=[1, 1, 144, 3, 3]) /* ty=Tensor[(1, 1, 144, 3, 3), int32] */;
  %900 = sum(%899, axis=[0]) /* ty=Tensor[(1, 144, 3, 3), int32] */;
  %901 = transpose(%900, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %902 = abs(%901) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %903 = max(%902, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %904 = divide(%903, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %905 = divide(%901, %904) /* ty=Tensor[(144, 1, 3, 3), int32] */;
  %906 = greater_equal(%48, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %907 = less_equal(%48, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %908 = nn.conv2d_transpose(%893, %v8_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %909 = abs(%908) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %910 = max(%909, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %911 = divide(%910, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %912 = divide(%908, %911) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %913 = multiply(%906, %907) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %914 = cast(%912, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %915 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %916 = where(%913, %914, %915) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %917 = cast(%916, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %918 = tile(%916, reps=[1, 24, 1, 1]) /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %919 = reshape(%47, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %920 = reshape(%918, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %921 = nn.conv2d(%919, %920, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %922 = reshape(%921, newshape=[1, 24, 144, 1, 1]) /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %923 = sum(%922, axis=[0]) /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %924 = transpose(%923, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %925 = abs(%924) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %926 = max(%925, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %927 = divide(%926, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %928 = divide(%924, %927) /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %929 = greater_equal(%46, -128 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %930 = less_equal(%46, 127 /* ty=int32 */) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %931 = nn.conv2d_transpose(%916, %v8_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %932 = abs(%931) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %933 = max(%932, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %934 = divide(%933, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %935 = divide(%931, %934) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %936 = multiply(%929, %930) /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %937 = cast(%935, dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %938 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %939 = where(%936, %937, %938) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %940 = cast(%939, dtype="int32") /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %941 = tile(%939, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 2304, 8, 8), int8] */;
  %942 = reshape(%45, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %943 = reshape(%941, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2304, 1, 8, 8), int8] */;
  %944 = nn.conv2d(%942, %943, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* ty=Tensor[(1, 2304, 1, 1), int32] */;
  %945 = reshape(%944, newshape=[1, 96, 24, 1, 1]) /* ty=Tensor[(1, 96, 24, 1, 1), int32] */;
  %946 = sum(%945, axis=[0]) /* ty=Tensor[(96, 24, 1, 1), int32] */;
  %947 = transpose(%946, axes=[1, 0, 2, 3]) /* ty=Tensor[(24, 96, 1, 1), int32] */;
  %948 = abs(%947) /* ty=Tensor[(24, 96, 1, 1), int32] */;
  %949 = max(%948, axis=[1], keepdims=True) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %950 = divide(%949, 127 /* ty=int32 */) /* ty=Tensor[(24, 1, 1, 1), int32] */;
  %951 = divide(%947, %950) /* ty=Tensor[(24, 96, 1, 1), int32] */;
  %952 = greater_equal(%44, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %953 = less_equal(%44, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %954 = nn.conv2d_transpose(%939, %v7_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %955 = abs(%954) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %956 = max(%955, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %957 = divide(%956, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %958 = divide(%954, %957) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %959 = multiply(%952, %953) /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %960 = cast(%958, dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %961 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %962 = where(%959, %960, %961) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %963 = cast(%962, dtype="int32") /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %964 = tile(%962, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %965 = reshape(%43, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %966 = reshape(%964, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 8, 8), int8] */;
  %967 = nn.conv2d(%965, %966, padding=[1, 1, 1, 1], dilation=[2, 2], groups=96, out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %968 = reshape(%967, newshape=[1, 1, 96, 4, 4]) /* ty=Tensor[(1, 1, 96, 4, 4), int32] */;
  %969 = sum(%968, axis=[0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %970 = transpose(%969, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 4, 4), int32] */;
  %971 = strided_slice(%970, begin=[0, 0, 0, 0], end=[96, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %972 = abs(%971) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %973 = max(%972, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %974 = divide(%973, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %975 = divide(%971, %974) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %976 = greater_equal(%42, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %977 = less_equal(%42, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %978 = nn.conv2d_transpose(%962, %v7_conv_1_weight, channels=96, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %979 = abs(%978) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %980 = max(%979, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %981 = divide(%980, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %982 = divide(%978, %981) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %983 = multiply(%976, %977) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %984 = cast(%982, dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %985 = zeros(shape=[1, 96, 16, 16], dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %986 = where(%983, %984, %985) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %987 = cast(%986, dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %988 = tile(%986, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), int8] */;
  %989 = reshape(%41, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %990 = reshape(%988, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), int8] */;
  %991 = nn.conv2d(%989, %990, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 1536, 1, 1), int32] */;
  %992 = reshape(%991, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), int32] */;
  %993 = sum(%992, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), int32] */;
  %994 = transpose(%993, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %995 = abs(%994) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %996 = max(%995, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %997 = divide(%996, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %998 = divide(%994, %997) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %999 = greater_equal(%38, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1000 = less_equal(%38, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1001 = greater_equal(%40, meta[relay.Constant][14] /* ty=int8 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1002 = less_equal(%40, meta[relay.Constant][15] /* ty=int8 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1003 = nn.conv2d_transpose(%986, %v7_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1004 = abs(%1003) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1005 = max(%1004, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1006 = divide(%1005, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1007 = divide(%1003, %1006) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1008 = multiply(%1001, %1002) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1009 = cast(%1007, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1010 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1011 = where(%1008, %1009, %1010) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1012 = cast(%1011, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1013 = reshape(%v6_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1014 = divide(%1012, %1013) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1015 = reshape(%v6_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1016 = multiply(%1014, %1015) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1017 = multiply(%999, %1000) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1018 = cast(%1016, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1019 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1020 = where(%1017, %1018, %1019) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1021 = cast(%1020, dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1022 = tile(%1020, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), int8] */;
  %1023 = reshape(%37, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1024 = reshape(%1022, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), int8] */;
  %1025 = nn.conv2d(%1023, %1024, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* ty=Tensor[(1, 1536, 1, 1), int32] */;
  %1026 = reshape(%1025, newshape=[1, 96, 16, 1, 1]) /* ty=Tensor[(1, 96, 16, 1, 1), int32] */;
  %1027 = sum(%1026, axis=[0]) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1028 = transpose(%1027, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 96, 1, 1), int32] */;
  %1029 = abs(%1028) /* ty=Tensor[(16, 96, 1, 1), int32] */;
  %1030 = max(%1029, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1031 = divide(%1030, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1032 = divide(%1028, %1031) /* ty=Tensor[(16, 96, 1, 1), int32] */;
  %1033 = greater_equal(%36, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1034 = less_equal(%36, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1035 = nn.conv2d_transpose(%1020, %v6_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1036 = abs(%1035) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1037 = max(%1036, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1038 = divide(%1037, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1039 = divide(%1035, %1038) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1040 = multiply(%1033, %1034) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1041 = cast(%1039, dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1042 = zeros(shape=[1, 96, 16, 16], dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1043 = where(%1040, %1041, %1042) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1044 = cast(%1043, dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1045 = tile(%1043, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1046 = reshape(%35, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1047 = reshape(%1045, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 16, 16), int8] */;
  %1048 = nn.conv2d(%1046, %1047, padding=[1, 1, 1, 1], groups=96, out_dtype="int32") /* ty=Tensor[(1, 96, 3, 3), int32] */;
  %1049 = reshape(%1048, newshape=[1, 1, 96, 3, 3]) /* ty=Tensor[(1, 1, 96, 3, 3), int32] */;
  %1050 = sum(%1049, axis=[0]) /* ty=Tensor[(1, 96, 3, 3), int32] */;
  %1051 = transpose(%1050, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %1052 = abs(%1051) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %1053 = max(%1052, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %1054 = divide(%1053, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %1055 = divide(%1051, %1054) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %1056 = greater_equal(%34, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1057 = less_equal(%34, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1058 = nn.conv2d_transpose(%1043, %v6_conv_1_weight, channels=96, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1059 = abs(%1058) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1060 = max(%1059, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1061 = divide(%1060, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1062 = divide(%1058, %1061) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1063 = multiply(%1056, %1057) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1064 = cast(%1062, dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1065 = zeros(shape=[1, 96, 16, 16], dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1066 = where(%1063, %1064, %1065) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1067 = cast(%1066, dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1068 = tile(%1066, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), int8] */;
  %1069 = reshape(%33, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1070 = reshape(%1068, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), int8] */;
  %1071 = nn.conv2d(%1069, %1070, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 1536, 1, 1), int32] */;
  %1072 = reshape(%1071, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), int32] */;
  %1073 = sum(%1072, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), int32] */;
  %1074 = transpose(%1073, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1075 = abs(%1074) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1076 = max(%1075, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %1077 = divide(%1076, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %1078 = divide(%1074, %1077) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1079 = greater_equal(%30, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1080 = less_equal(%30, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1081 = greater_equal(%32, meta[relay.Constant][16] /* ty=int8 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1082 = less_equal(%32, meta[relay.Constant][17] /* ty=int8 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1083 = nn.conv2d_transpose(%1066, %v6_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1084 = abs(%1083) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1085 = max(%1084, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1086 = divide(%1085, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1087 = divide(%1083, %1086) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1088 = multiply(%1081, %1082) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1089 = cast(%1087, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1090 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1091 = where(%1088, %1089, %1090) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1092 = cast(%1091, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1093 = reshape(%v5_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1094 = divide(%1092, %1093) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1095 = reshape(%v5_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1096 = multiply(%1094, %1095) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %1097 = multiply(%1079, %1080) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1098 = cast(%1096, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1099 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1100 = where(%1097, %1098, %1099) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1101 = cast(%1100, dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1102 = tile(%1100, reps=[1, 96, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), int8] */;
  %1103 = reshape(%29, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1104 = reshape(%1102, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), int8] */;
  %1105 = nn.conv2d(%1103, %1104, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* ty=Tensor[(1, 1536, 1, 1), int32] */;
  %1106 = reshape(%1105, newshape=[1, 96, 16, 1, 1]) /* ty=Tensor[(1, 96, 16, 1, 1), int32] */;
  %1107 = sum(%1106, axis=[0]) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1108 = transpose(%1107, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 96, 1, 1), int32] */;
  %1109 = abs(%1108) /* ty=Tensor[(16, 96, 1, 1), int32] */;
  %1110 = max(%1109, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1111 = divide(%1110, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1112 = divide(%1108, %1111) /* ty=Tensor[(16, 96, 1, 1), int32] */;
  %1113 = greater_equal(%28, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1114 = less_equal(%28, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1115 = nn.conv2d_transpose(%1100, %v5_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1116 = abs(%1115) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1117 = max(%1116, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1118 = divide(%1117, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1119 = divide(%1115, %1118) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1120 = multiply(%1113, %1114) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1121 = cast(%1119, dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1122 = zeros(shape=[1, 96, 16, 16], dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1123 = where(%1120, %1121, %1122) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1124 = cast(%1123, dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1125 = tile(%1123, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1126 = reshape(%27, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1127 = reshape(%1125, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(96, 1, 16, 16), int8] */;
  %1128 = nn.conv2d(%1126, %1127, padding=[1, 1, 1, 1], groups=96, out_dtype="int32") /* ty=Tensor[(1, 96, 3, 3), int32] */;
  %1129 = reshape(%1128, newshape=[1, 1, 96, 3, 3]) /* ty=Tensor[(1, 1, 96, 3, 3), int32] */;
  %1130 = sum(%1129, axis=[0]) /* ty=Tensor[(1, 96, 3, 3), int32] */;
  %1131 = transpose(%1130, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %1132 = abs(%1131) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %1133 = max(%1132, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %1134 = divide(%1133, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %1135 = divide(%1131, %1134) /* ty=Tensor[(96, 1, 3, 3), int32] */;
  %1136 = greater_equal(%26, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1137 = less_equal(%26, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1138 = nn.conv2d_transpose(%1123, %v5_conv_1_weight, channels=96, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1139 = abs(%1138) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1140 = max(%1139, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1141 = divide(%1140, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1142 = divide(%1138, %1141) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1143 = multiply(%1136, %1137) /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %1144 = cast(%1142, dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1145 = zeros(shape=[1, 96, 16, 16], dtype="int8") /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1146 = where(%1143, %1144, %1145) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %1147 = cast(%1146, dtype="int32") /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %1148 = tile(%1146, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 1536, 16, 16), int8] */;
  %1149 = reshape(%25, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1150 = reshape(%1148, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1536, 1, 16, 16), int8] */;
  %1151 = nn.conv2d(%1149, %1150, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 1536, 1, 1), int32] */;
  %1152 = reshape(%1151, newshape=[1, 16, 96, 1, 1]) /* ty=Tensor[(1, 16, 96, 1, 1), int32] */;
  %1153 = sum(%1152, axis=[0]) /* ty=Tensor[(16, 96, 1, 1), int32] */;
  %1154 = transpose(%1153, axes=[1, 0, 2, 3]) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1155 = abs(%1154) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1156 = max(%1155, axis=[1], keepdims=True) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %1157 = divide(%1156, 127 /* ty=int32 */) /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %1158 = divide(%1154, %1157) /* ty=Tensor[(96, 16, 1, 1), int32] */;
  %1159 = greater_equal(%24, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1160 = less_equal(%24, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1161 = nn.conv2d_transpose(%1146, %v5_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1162 = abs(%1161) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1163 = max(%1162, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1164 = divide(%1163, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1165 = divide(%1161, %1164) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1166 = multiply(%1159, %1160) /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %1167 = cast(%1165, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1168 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1169 = where(%1166, %1167, %1168) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %1170 = cast(%1169, dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %1171 = tile(%1169, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 768, 16, 16), int8] */;
  %1172 = reshape(%23, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1173 = reshape(%1171, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(768, 1, 16, 16), int8] */;
  %1174 = nn.conv2d(%1172, %1173, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 768, 1, 1), int32] */;
  %1175 = reshape(%1174, newshape=[1, 48, 16, 1, 1]) /* ty=Tensor[(1, 48, 16, 1, 1), int32] */;
  %1176 = sum(%1175, axis=[0]) /* ty=Tensor[(48, 16, 1, 1), int32] */;
  %1177 = transpose(%1176, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1178 = abs(%1177) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1179 = max(%1178, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1180 = divide(%1179, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %1181 = divide(%1177, %1180) /* ty=Tensor[(16, 48, 1, 1), int32] */;
  %1182 = greater_equal(%22, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1183 = less_equal(%22, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1184 = nn.conv2d_transpose(%1169, %v4_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1185 = abs(%1184) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1186 = max(%1185, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1187 = divide(%1186, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %1188 = divide(%1184, %1187) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1189 = multiply(%1182, %1183) /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %1190 = cast(%1188, dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1191 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1192 = where(%1189, %1190, %1191) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1193 = cast(%1192, dtype="int32") /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %1194 = tile(%1192, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %1195 = reshape(%21, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1196 = reshape(%1194, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 16, 16), int8] */;
  %1197 = nn.conv2d(%1195, %1196, padding=[1, 1, 1, 1], dilation=[2, 2], groups=48, out_dtype="int32") /* ty=Tensor[(1, 48, 4, 4), int32] */;
  %1198 = reshape(%1197, newshape=[1, 1, 48, 4, 4]) /* ty=Tensor[(1, 1, 48, 4, 4), int32] */;
  %1199 = sum(%1198, axis=[0]) /* ty=Tensor[(1, 48, 4, 4), int32] */;
  %1200 = transpose(%1199, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 4, 4), int32] */;
  %1201 = strided_slice(%1200, begin=[0, 0, 0, 0], end=[48, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1202 = abs(%1201) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1203 = max(%1202, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1204 = divide(%1203, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1205 = divide(%1201, %1204) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1206 = greater_equal(%20, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1207 = less_equal(%20, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1208 = nn.conv2d_transpose(%1192, %v4_conv_1_weight, channels=48, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1209 = abs(%1208) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1210 = max(%1209, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1211 = divide(%1210, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1212 = divide(%1208, %1211) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1213 = multiply(%1206, %1207) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1214 = cast(%1212, dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1215 = zeros(shape=[1, 48, 32, 32], dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1216 = where(%1213, %1214, %1215) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1217 = cast(%1216, dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1218 = tile(%1216, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 384, 32, 32), int8] */;
  %1219 = reshape(%19, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1220 = reshape(%1218, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 32, 32), int8] */;
  %1221 = nn.conv2d(%1219, %1220, padding=[0, 0, 0, 0], groups=8, out_dtype="int32") /* ty=Tensor[(1, 384, 1, 1), int32] */;
  %1222 = reshape(%1221, newshape=[1, 8, 48, 1, 1]) /* ty=Tensor[(1, 8, 48, 1, 1), int32] */;
  %1223 = sum(%1222, axis=[0]) /* ty=Tensor[(8, 48, 1, 1), int32] */;
  %1224 = transpose(%1223, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1225 = abs(%1224) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1226 = max(%1225, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1227 = divide(%1226, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1228 = divide(%1224, %1227) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1229 = greater_equal(%16, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1230 = less_equal(%16, 127 /* ty=int32 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1231 = greater_equal(%18, meta[relay.Constant][18] /* ty=int8 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1232 = less_equal(%18, meta[relay.Constant][19] /* ty=int8 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1233 = nn.conv2d_transpose(%1216, %v4_conv_0_weight, channels=8, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %1234 = abs(%1233) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %1235 = max(%1234, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1236 = divide(%1235, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1237 = divide(%1233, %1236) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %1238 = multiply(%1231, %1232) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1239 = cast(%1237, dtype="int8") /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1240 = zeros(shape=[1, 8, 32, 32], dtype="int8") /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1241 = where(%1238, %1239, %1240) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1242 = cast(%1241, dtype="float32") /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %1243 = reshape(%v3_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1244 = divide(%1242, %1243) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %1245 = reshape(%v3_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %1246 = multiply(%1244, %1245) /* ty=Tensor[(1, 8, 32, 32), float32] */;
  %1247 = multiply(%1229, %1230) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1248 = cast(%1246, dtype="int8") /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1249 = zeros(shape=[1, 8, 32, 32], dtype="int8") /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1250 = where(%1247, %1248, %1249) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1251 = cast(%1250, dtype="int32") /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %1252 = tile(%1250, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 384, 32, 32), int8] */;
  %1253 = reshape(%15, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1254 = reshape(%1252, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 32, 32), int8] */;
  %1255 = nn.conv2d(%1253, %1254, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 384, 1, 1), int32] */;
  %1256 = reshape(%1255, newshape=[1, 48, 8, 1, 1]) /* ty=Tensor[(1, 48, 8, 1, 1), int32] */;
  %1257 = sum(%1256, axis=[0]) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1258 = transpose(%1257, axes=[1, 0, 2, 3]) /* ty=Tensor[(8, 48, 1, 1), int32] */;
  %1259 = abs(%1258) /* ty=Tensor[(8, 48, 1, 1), int32] */;
  %1260 = max(%1259, axis=[1], keepdims=True) /* ty=Tensor[(8, 1, 1, 1), int32] */;
  %1261 = divide(%1260, 127 /* ty=int32 */) /* ty=Tensor[(8, 1, 1, 1), int32] */;
  %1262 = divide(%1258, %1261) /* ty=Tensor[(8, 48, 1, 1), int32] */;
  %1263 = greater_equal(%14, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1264 = less_equal(%14, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1265 = nn.conv2d_transpose(%1250, %v3_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1266 = abs(%1265) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1267 = max(%1266, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1268 = divide(%1267, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1269 = divide(%1265, %1268) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1270 = multiply(%1263, %1264) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1271 = cast(%1269, dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1272 = zeros(shape=[1, 48, 32, 32], dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1273 = where(%1270, %1271, %1272) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1274 = cast(%1273, dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1275 = tile(%1273, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1276 = reshape(%13, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1277 = reshape(%1275, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 32, 32), int8] */;
  %1278 = nn.conv2d(%1276, %1277, padding=[1, 1, 1, 1], groups=48, out_dtype="int32") /* ty=Tensor[(1, 48, 3, 3), int32] */;
  %1279 = reshape(%1278, newshape=[1, 1, 48, 3, 3]) /* ty=Tensor[(1, 1, 48, 3, 3), int32] */;
  %1280 = sum(%1279, axis=[0]) /* ty=Tensor[(1, 48, 3, 3), int32] */;
  %1281 = transpose(%1280, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1282 = abs(%1281) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1283 = max(%1282, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1284 = divide(%1283, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1285 = divide(%1281, %1284) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1286 = greater_equal(%12, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1287 = less_equal(%12, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1288 = nn.conv2d_transpose(%1273, %v3_conv_1_weight, channels=48, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1289 = abs(%1288) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1290 = max(%1289, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1291 = divide(%1290, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1292 = divide(%1288, %1291) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1293 = multiply(%1286, %1287) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1294 = cast(%1292, dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1295 = zeros(shape=[1, 48, 32, 32], dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1296 = where(%1293, %1294, %1295) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1297 = cast(%1296, dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1298 = tile(%1296, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 384, 32, 32), int8] */;
  %1299 = reshape(%11, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1300 = reshape(%1298, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 32, 32), int8] */;
  %1301 = nn.conv2d(%1299, %1300, padding=[0, 0, 0, 0], groups=8, out_dtype="int32") /* ty=Tensor[(1, 384, 1, 1), int32] */;
  %1302 = reshape(%1301, newshape=[1, 8, 48, 1, 1]) /* ty=Tensor[(1, 8, 48, 1, 1), int32] */;
  %1303 = sum(%1302, axis=[0]) /* ty=Tensor[(8, 48, 1, 1), int32] */;
  %1304 = transpose(%1303, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1305 = abs(%1304) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1306 = max(%1305, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1307 = divide(%1306, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1308 = divide(%1304, %1307) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1309 = greater_equal(%10, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1310 = less_equal(%10, 127 /* ty=int32 */) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1311 = nn.conv2d_transpose(%1296, %v3_conv_0_weight, channels=8, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %1312 = abs(%1311) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %1313 = max(%1312, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1314 = divide(%1313, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1315 = divide(%1311, %1314) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %1316 = multiply(%1309, %1310) /* ty=Tensor[(1, 8, 32, 32), bool] */;
  %1317 = cast(%1315, dtype="int8") /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1318 = zeros(shape=[1, 8, 32, 32], dtype="int8") /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1319 = where(%1316, %1317, %1318) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %1320 = cast(%1319, dtype="int32") /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %1321 = tile(%1319, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 384, 32, 32), int8] */;
  %1322 = reshape(%9, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1323 = reshape(%1321, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 32, 32), int8] */;
  %1324 = nn.conv2d(%1322, %1323, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 384, 1, 1), int32] */;
  %1325 = reshape(%1324, newshape=[1, 48, 8, 1, 1]) /* ty=Tensor[(1, 48, 8, 1, 1), int32] */;
  %1326 = sum(%1325, axis=[0]) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1327 = transpose(%1326, axes=[1, 0, 2, 3]) /* ty=Tensor[(8, 48, 1, 1), int32] */;
  %1328 = abs(%1327) /* ty=Tensor[(8, 48, 1, 1), int32] */;
  %1329 = max(%1328, axis=[1], keepdims=True) /* ty=Tensor[(8, 1, 1, 1), int32] */;
  %1330 = divide(%1329, 127 /* ty=int32 */) /* ty=Tensor[(8, 1, 1, 1), int32] */;
  %1331 = divide(%1327, %1330) /* ty=Tensor[(8, 48, 1, 1), int32] */;
  %1332 = greater_equal(%8, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1333 = less_equal(%8, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1334 = nn.conv2d_transpose(%1319, %v2_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1335 = abs(%1334) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1336 = max(%1335, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1337 = divide(%1336, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %1338 = divide(%1334, %1337) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1339 = multiply(%1332, %1333) /* ty=Tensor[(1, 48, 32, 32), bool] */;
  %1340 = cast(%1338, dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1341 = zeros(shape=[1, 48, 32, 32], dtype="int8") /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1342 = where(%1339, %1340, %1341) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1343 = cast(%1342, dtype="int32") /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %1344 = tile(%1342, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %1345 = reshape(%7, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %1346 = reshape(%1344, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 32, 32), int8] */;
  %1347 = nn.conv2d(%1345, %1346, padding=[1, 1, 1, 1], dilation=[2, 2], groups=48, out_dtype="int32") /* ty=Tensor[(1, 48, 4, 4), int32] */;
  %1348 = reshape(%1347, newshape=[1, 1, 48, 4, 4]) /* ty=Tensor[(1, 1, 48, 4, 4), int32] */;
  %1349 = sum(%1348, axis=[0]) /* ty=Tensor[(1, 48, 4, 4), int32] */;
  %1350 = transpose(%1349, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 1, 4, 4), int32] */;
  %1351 = strided_slice(%1350, begin=[0, 0, 0, 0], end=[48, 1, 3, 3], strides=[1], axes=None) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1352 = abs(%1351) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1353 = max(%1352, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1354 = divide(%1353, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1355 = divide(%1351, %1354) /* ty=Tensor[(48, 1, 3, 3), int32] */;
  %1356 = greater_equal(%6, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 64, 64), bool] */;
  %1357 = less_equal(%6, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 64, 64), bool] */;
  %1358 = nn.conv2d_transpose(%1342, %v2_conv_1_weight, channels=48, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=48, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %1359 = abs(%1358) /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %1360 = max(%1359, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1361 = divide(%1360, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1362 = divide(%1358, %1361) /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %1363 = multiply(%1356, %1357) /* ty=Tensor[(1, 48, 64, 64), bool] */;
  %1364 = cast(%1362, dtype="int8") /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %1365 = zeros(shape=[1, 48, 64, 64], dtype="int8") /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %1366 = where(%1363, %1364, %1365) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %1367 = cast(%1366, dtype="int32") /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %1368 = tile(%1366, reps=[1, 8, 1, 1]) /* ty=Tensor[(1, 384, 64, 64), int8] */;
  %1369 = reshape(%5, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1370 = reshape(%1368, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(384, 1, 64, 64), int8] */;
  %1371 = nn.conv2d(%1369, %1370, padding=[0, 0, 0, 0], groups=8, out_dtype="int32") /* ty=Tensor[(1, 384, 1, 1), int32] */;
  %1372 = reshape(%1371, newshape=[1, 8, 48, 1, 1]) /* ty=Tensor[(1, 8, 48, 1, 1), int32] */;
  %1373 = sum(%1372, axis=[0]) /* ty=Tensor[(8, 48, 1, 1), int32] */;
  %1374 = transpose(%1373, axes=[1, 0, 2, 3]) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1375 = abs(%1374) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1376 = max(%1375, axis=[1], keepdims=True) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1377 = divide(%1376, 127 /* ty=int32 */) /* ty=Tensor[(48, 1, 1, 1), int32] */;
  %1378 = divide(%1374, %1377) /* ty=Tensor[(48, 8, 1, 1), int32] */;
  %1379 = greater_equal(%4, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1380 = less_equal(%4, 127 /* ty=int32 */) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1381 = nn.conv2d_transpose(%1366, %v2_conv_0_weight, channels=8, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1382 = abs(%1381) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1383 = max(%1382, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1384 = divide(%1383, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1385 = divide(%1381, %1384) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1386 = multiply(%1379, %1380) /* ty=Tensor[(1, 8, 64, 64), bool] */;
  %1387 = cast(%1385, dtype="int8") /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1388 = zeros(shape=[1, 8, 64, 64], dtype="int8") /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1389 = where(%1386, %1387, %1388) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %1390 = cast(%1389, dtype="int32") /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %1391 = tile(%1389, reps=[1, 16, 1, 1]) /* ty=Tensor[(1, 128, 64, 64), int8] */;
  %1392 = reshape(%3, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1393 = reshape(%1391, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(128, 1, 64, 64), int8] */;
  %1394 = nn.conv2d(%1392, %1393, padding=[0, 0, 0, 0], groups=16, out_dtype="int32") /* ty=Tensor[(1, 128, 1, 1), int32] */;
  %1395 = reshape(%1394, newshape=[1, 16, 8, 1, 1]) /* ty=Tensor[(1, 16, 8, 1, 1), int32] */;
  %1396 = sum(%1395, axis=[0]) /* ty=Tensor[(16, 8, 1, 1), int32] */;
  %1397 = transpose(%1396, axes=[1, 0, 2, 3]) /* ty=Tensor[(8, 16, 1, 1), int32] */;
  %1398 = abs(%1397) /* ty=Tensor[(8, 16, 1, 1), int32] */;
  %1399 = max(%1398, axis=[1], keepdims=True) /* ty=Tensor[(8, 1, 1, 1), int32] */;
  %1400 = divide(%1399, 127 /* ty=int32 */) /* ty=Tensor[(8, 1, 1, 1), int32] */;
  %1401 = divide(%1397, %1400) /* ty=Tensor[(8, 16, 1, 1), int32] */;
  %1402 = greater_equal(%2, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1403 = less_equal(%2, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1404 = nn.conv2d_transpose(%1389, %v1_conv_1_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1405 = abs(%1404) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1406 = max(%1405, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1407 = divide(%1406, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1408 = divide(%1404, %1407) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1409 = multiply(%1402, %1403) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1410 = cast(%1408, dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1411 = zeros(shape=[1, 16, 64, 64], dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1412 = where(%1409, %1410, %1411) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1413 = cast(%1412, dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1414 = tile(%1412, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1415 = reshape(%1, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1416 = reshape(%1414, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(16, 1, 64, 64), int8] */;
  %1417 = nn.conv2d(%1415, %1416, padding=[1, 1, 1, 1], groups=16, out_dtype="int32") /* ty=Tensor[(1, 16, 3, 3), int32] */;
  %1418 = reshape(%1417, newshape=[1, 1, 16, 3, 3]) /* ty=Tensor[(1, 1, 16, 3, 3), int32] */;
  %1419 = sum(%1418, axis=[0]) /* ty=Tensor[(1, 16, 3, 3), int32] */;
  %1420 = transpose(%1419, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1421 = abs(%1420) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1422 = max(%1421, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1423 = divide(%1422, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1424 = divide(%1420, %1423) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1425 = greater_equal(%0, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1426 = less_equal(%0, 127 /* ty=int32 */) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1427 = nn.conv2d_transpose(%1412, %v1_conv_0_weight, channels=16, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=16, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1428 = abs(%1427) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1429 = max(%1428, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1430 = divide(%1429, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %1431 = divide(%1427, %1430) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1432 = multiply(%1425, %1426) /* ty=Tensor[(1, 16, 64, 64), bool] */;
  %1433 = cast(%1431, dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1434 = zeros(shape=[1, 16, 64, 64], dtype="int8") /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1435 = where(%1432, %1433, %1434) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %1436 = cast(%1435, dtype="int32") /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1437 = tile(%1435, reps=[1, 3, 1, 1]) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %1438 = reshape(%input, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 3, 128, 128), int8] */;
  %1439 = reshape(%1437, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(48, 1, 64, 64), int8] */;
  %1440 = nn.conv2d(%1438, %1439, padding=[1, 1, 1, 1], dilation=[2, 2], groups=3, out_dtype="int32") /* ty=Tensor[(1, 48, 4, 4), int32] */;
  %1441 = reshape(%1440, newshape=[1, 3, 16, 4, 4]) /* ty=Tensor[(1, 3, 16, 4, 4), int32] */;
  %1442 = sum(%1441, axis=[0]) /* ty=Tensor[(3, 16, 4, 4), int32] */;
  %1443 = transpose(%1442, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 3, 4, 4), int32] */;
  %1444 = strided_slice(%1443, begin=[0, 0, 0, 0], end=[16, 3, 3, 3], strides=[1], axes=None) /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %1445 = abs(%1444) /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %1446 = max(%1445, axis=[1], keepdims=True) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1447 = divide(%1446, 127 /* ty=int32 */) /* ty=Tensor[(16, 1, 3, 3), int32] */;
  %1448 = divide(%1444, %1447) /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %1449 = nn.cross_entropy_with_logits(%127, %label) /* ty=float32 */;
  %1450 = sum(%141, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %1451 = cast(%153, dtype="int8") /* ty=Tensor[(10, 112, 1, 1), int8] */;
  %1452 = sum(%170, axis=[1], exclude=True) /* ty=Tensor[(112), int32] */;
  %1453 = cast(%182, dtype="int8") /* ty=Tensor[(112, 336, 1, 1), int8] */;
  %1454 = sum(%195, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %1455 = cast(%206, dtype="int8") /* ty=Tensor[(336, 1, 3, 3), int8] */;
  %1456 = sum(%218, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %1457 = cast(%229, dtype="int8") /* ty=Tensor[(336, 56, 1, 1), int8] */;
  %1458 = sum(%252, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %1459 = cast(%263, dtype="int8") /* ty=Tensor[(56, 336, 1, 1), int8] */;
  %1460 = sum(%275, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %1461 = cast(%286, dtype="int8") /* ty=Tensor[(336, 1, 3, 3), int8] */;
  %1462 = sum(%298, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %1463 = cast(%309, dtype="int8") /* ty=Tensor[(336, 56, 1, 1), int8] */;
  %1464 = sum(%332, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %1465 = cast(%343, dtype="int8") /* ty=Tensor[(56, 336, 1, 1), int8] */;
  %1466 = sum(%355, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %1467 = cast(%366, dtype="int8") /* ty=Tensor[(336, 1, 3, 3), int8] */;
  %1468 = sum(%378, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %1469 = cast(%389, dtype="int8") /* ty=Tensor[(336, 56, 1, 1), int8] */;
  %1470 = sum(%401, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %1471 = cast(%412, dtype="int8") /* ty=Tensor[(56, 192, 1, 1), int8] */;
  %1472 = sum(%424, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1473 = cast(%436, dtype="int8") /* ty=Tensor[(192, 1, 3, 3), int8] */;
  %1474 = sum(%448, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1475 = cast(%459, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %1476 = sum(%482, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %1477 = cast(%493, dtype="int8") /* ty=Tensor[(32, 192, 1, 1), int8] */;
  %1478 = sum(%505, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1479 = cast(%516, dtype="int8") /* ty=Tensor[(192, 1, 3, 3), int8] */;
  %1480 = sum(%528, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1481 = cast(%539, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %1482 = sum(%562, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %1483 = cast(%573, dtype="int8") /* ty=Tensor[(32, 192, 1, 1), int8] */;
  %1484 = sum(%585, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1485 = cast(%596, dtype="int8") /* ty=Tensor[(192, 1, 3, 3), int8] */;
  %1486 = sum(%608, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %1487 = cast(%619, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %1488 = sum(%631, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %1489 = cast(%642, dtype="int8") /* ty=Tensor[(32, 144, 1, 1), int8] */;
  %1490 = sum(%654, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1491 = cast(%665, dtype="int8") /* ty=Tensor[(144, 1, 3, 3), int8] */;
  %1492 = sum(%677, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1493 = cast(%688, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %1494 = sum(%711, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1495 = cast(%722, dtype="int8") /* ty=Tensor[(24, 144, 1, 1), int8] */;
  %1496 = sum(%734, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1497 = cast(%745, dtype="int8") /* ty=Tensor[(144, 1, 3, 3), int8] */;
  %1498 = sum(%757, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1499 = cast(%768, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %1500 = sum(%791, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1501 = cast(%802, dtype="int8") /* ty=Tensor[(24, 144, 1, 1), int8] */;
  %1502 = sum(%814, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1503 = cast(%825, dtype="int8") /* ty=Tensor[(144, 1, 3, 3), int8] */;
  %1504 = sum(%837, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1505 = cast(%848, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %1506 = sum(%871, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1507 = cast(%882, dtype="int8") /* ty=Tensor[(24, 144, 1, 1), int8] */;
  %1508 = sum(%894, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1509 = cast(%905, dtype="int8") /* ty=Tensor[(144, 1, 3, 3), int8] */;
  %1510 = sum(%917, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %1511 = cast(%928, dtype="int8") /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %1512 = sum(%940, axis=[1], exclude=True) /* ty=Tensor[(24), int32] */;
  %1513 = cast(%951, dtype="int8") /* ty=Tensor[(24, 96, 1, 1), int8] */;
  %1514 = sum(%963, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1515 = cast(%975, dtype="int8") /* ty=Tensor[(96, 1, 3, 3), int8] */;
  %1516 = sum(%987, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1517 = cast(%998, dtype="int8") /* ty=Tensor[(96, 16, 1, 1), int8] */;
  %1518 = sum(%1021, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1519 = cast(%1032, dtype="int8") /* ty=Tensor[(16, 96, 1, 1), int8] */;
  %1520 = sum(%1044, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1521 = cast(%1055, dtype="int8") /* ty=Tensor[(96, 1, 3, 3), int8] */;
  %1522 = sum(%1067, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1523 = cast(%1078, dtype="int8") /* ty=Tensor[(96, 16, 1, 1), int8] */;
  %1524 = sum(%1101, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1525 = cast(%1112, dtype="int8") /* ty=Tensor[(16, 96, 1, 1), int8] */;
  %1526 = sum(%1124, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1527 = cast(%1135, dtype="int8") /* ty=Tensor[(96, 1, 3, 3), int8] */;
  %1528 = sum(%1147, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %1529 = cast(%1158, dtype="int8") /* ty=Tensor[(96, 16, 1, 1), int8] */;
  %1530 = sum(%1170, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1531 = cast(%1181, dtype="int8") /* ty=Tensor[(16, 48, 1, 1), int8] */;
  %1532 = sum(%1193, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1533 = cast(%1205, dtype="int8") /* ty=Tensor[(48, 1, 3, 3), int8] */;
  %1534 = sum(%1217, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1535 = cast(%1228, dtype="int8") /* ty=Tensor[(48, 8, 1, 1), int8] */;
  %1536 = sum(%1251, axis=[1], exclude=True) /* ty=Tensor[(8), int32] */;
  %1537 = cast(%1262, dtype="int8") /* ty=Tensor[(8, 48, 1, 1), int8] */;
  %1538 = sum(%1274, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1539 = cast(%1285, dtype="int8") /* ty=Tensor[(48, 1, 3, 3), int8] */;
  %1540 = sum(%1297, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1541 = cast(%1308, dtype="int8") /* ty=Tensor[(48, 8, 1, 1), int8] */;
  %1542 = sum(%1320, axis=[1], exclude=True) /* ty=Tensor[(8), int32] */;
  %1543 = cast(%1331, dtype="int8") /* ty=Tensor[(8, 48, 1, 1), int8] */;
  %1544 = sum(%1343, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1545 = cast(%1355, dtype="int8") /* ty=Tensor[(48, 1, 3, 3), int8] */;
  %1546 = sum(%1367, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %1547 = cast(%1378, dtype="int8") /* ty=Tensor[(48, 8, 1, 1), int8] */;
  %1548 = sum(%1390, axis=[1], exclude=True) /* ty=Tensor[(8), int32] */;
  %1549 = cast(%1401, dtype="int8") /* ty=Tensor[(8, 16, 1, 1), int8] */;
  %1550 = sum(%1413, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1551 = cast(%1424, dtype="int8") /* ty=Tensor[(16, 1, 3, 3), int8] */;
  %1552 = sum(%1436, axis=[1], exclude=True) /* ty=Tensor[(16), int32] */;
  %1553 = cast(%1448, dtype="int8") /* ty=Tensor[(16, 3, 3, 3), int8] */;
  (%1449, %1450, %1451, %1452, %1453, %1454, %1455, %1456, %1457, %1458, %1459, %1460, %1461, %1462, %1463, %1464, %1465, %1466, %1467, %1468, %1469, %1470, %1471, %1472, %1473, %1474, %1475, %1476, %1477, %1478, %1479, %1480, %1481, %1482, %1483, %1484, %1485, %1486, %1487, %1488, %1489, %1490, %1491, %1492, %1493, %1494, %1495, %1496, %1497, %1498, %1499, %1500, %1501, %1502, %1503, %1504, %1505, %1506, %1507, %1508, %1509, %1510, %1511, %1512, %1513, %1514, %1515, %1516, %1517, %1518, %1519, %1520, %1521, %1522, %1523, %1524, %1525, %1526, %1527, %1528, %1529, %1530, %1531, %1532, %1533, %1534, %1535, %1536, %1537, %1538, %1539, %1540, %1541, %1542, %1543, %1544, %1545, %1546, %1547, %1548, %1549, %1550, %1551, %1552, %1553)
}

