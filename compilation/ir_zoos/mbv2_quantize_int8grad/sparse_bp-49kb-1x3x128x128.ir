def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(48), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(48), float32], %v2_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(48), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(48), float32], %v2_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v2_conv_2_bias: Tensor[(8), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(8), float32], %v3_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(8), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(8), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(96), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(96), float32], %v5_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(96), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(96), float32], %v5_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(96), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(96), float32], %v6_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(96), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(96), float32], %v6_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(96), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(96), float32], %v7_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v7_conv_1_bias: Tensor[(96), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(96), float32], %v7_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v7_conv_2_bias: Tensor[(24), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(24), float32], %v8_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v8_conv_0_bias: Tensor[(144), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(144), float32], %v8_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v8_conv_1_bias: Tensor[(144), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(144), float32], %v8_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v8_qadd_zero_x1: Tensor[(1), int8], %v8_qadd_zero_x2: Tensor[(1), int8], %v8_qadd_scale_x1: Tensor[(1), float32], %v8_qadd_scale_x2: Tensor[(1), float32], %v8_qadd_zero_y: Tensor[(1), int8], %v8_qadd_scale_y: Tensor[(1), float32], %v9_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(144), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(144), float32], %v10_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(144), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(144), float32], %v10_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(144), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(144), float32], %v11_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v11_conv_1_bias: Tensor[(144), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(144), float32], %v11_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v11_conv_2_bias: Tensor[(32), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(32), float32], %v12_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v12_conv_0_bias: Tensor[(192), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(192), float32], %v12_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v12_conv_1_bias: Tensor[(192), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(192), float32], %v12_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(192), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(192), float32], %v13_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v13_conv_1_bias: Tensor[(192), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(192), float32], %v13_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(192), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(192), float32], %v14_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(192), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(192), float32], %v14_conv_2_weight: Tensor[(56, 192, 1, 1), int8], %v14_conv_2_bias: Tensor[(56), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(56), float32], %v15_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v15_conv_0_bias: Tensor[(336), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(336), float32], %v15_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v15_conv_1_bias: Tensor[(336), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(336), float32], %v15_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v15_conv_2_bias: Tensor[(56), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(56), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v16_conv_0_bias: Tensor[(336), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(336), float32], %v16_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v16_conv_1_bias: Tensor[(336), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(336), float32], %v16_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v16_conv_2_bias: Tensor[(56), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(56), float32], %v16_qadd_zero_x1: Tensor[(1), int8], %v16_qadd_zero_x2: Tensor[(1), int8], %v16_qadd_scale_x1: Tensor[(1), float32], %v16_qadd_scale_x2: Tensor[(1), float32], %v16_qadd_zero_y: Tensor[(1), int8], %v16_qadd_scale_y: Tensor[(1), float32], %v17_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v17_conv_0_bias: Tensor[(336), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(336), float32], %v17_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v17_conv_1_bias: Tensor[(336), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(336), float32], %v17_conv_2_weight: Tensor[(112, 336, 1, 1), int8], %v17_conv_2_bias: Tensor[(112), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(112), float32], %v18_weight: Tensor[(10, 112, 1, 1), int8], %v18_bias: Tensor[(10), int32], %v18_zero_x: Tensor[(1), int8], %v18_zero_y: Tensor[(1), int8], %v18_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 112, 1, 1), int8], Tensor[(112), int32], Tensor[(336), int32], Tensor[(42, 1, 3, 3), int8], Tensor[(336), int32], Tensor[(336, 7, 1, 1), int8], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 7, 1, 1), int8], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 7, 1, 1), int8], Tensor[(56), int32], Tensor[(56, 48, 1, 1), int8], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=96) /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %54 = nn.mcuadd(%47, %53, %v8_qadd_zero_x1, %v8_qadd_zero_x2, %v8_qadd_scale_x1, %v8_qadd_scale_x2, %v8_qadd_zero_y, %v8_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %84 = nn.mcuadd(%77, %83, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %99 = nn.mcutruncate(%98) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %100 = nn.mcuconv2d(%99, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %101 = nn.mcutruncate(%100) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %103 = nn.mcutruncate(%102) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %105 = nn.mcutruncate(%104) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %106 = nn.mcuadd(%99, %105, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %107 = nn.mcutruncate(%106) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %108 = nn.mcuconv2d(%107, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %109 = nn.mcutruncate(%108) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %111 = nn.mcutruncate(%110) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %114 = nn.mcuadd(%107, %113, %v16_qadd_zero_x1, %v16_qadd_zero_x2, %v16_qadd_scale_x1, %v16_qadd_scale_x2, %v16_qadd_zero_y, %v16_qadd_scale_y, axis=0) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %115 = nn.mcutruncate(%114) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* ty=Tensor[(1, 112, 4, 4), int8] */;
  %122 = mcumean(%121, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %123 = nn.mcuconv2d(%122, %v18_weight, %v18_bias, %v18_zero_x, %v18_zero_y, %v18_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %124 = nn.mcutruncate(%123) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %125 = reshape(%124, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %127 = nn.log_softmax(%126) /* ty=Tensor[(1, 10), float32] */;
  %128 = greater_equal(%123, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %129 = less_equal(%123, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %130 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %131 = negative(%130) /* ty=float32 */;
  %132 = multiply(%131, %label) /* ty=Tensor[(1, 10), float32] */;
  %133 = sum(%132, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %134 = exp(%127) /* ty=Tensor[(1, 10), float32] */;
  %135 = multiply(%133, %134) /* ty=Tensor[(1, 10), float32] */;
  %136 = subtract(%132, %135) /* ty=Tensor[(1, 10), float32] */;
  %137 = multiply(%128, %129) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %138 = reshape(%136, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %139 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %140 = where(%137, %138, %139) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %141 = cast(%140, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %142 = reshape(%122, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %143 = tile(%140, reps=[1, 112, 1, 1]) /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %144 = cast(%142, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %145 = reshape(%143, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1120, 1, 1, 1), float32] */;
  %146 = nn.conv2d(%144, %145, padding=[0, 0, 0, 0], groups=112, out_dtype="float32") /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %147 = reshape(%146, newshape=[1, 112, 10, 1, 1]) /* ty=Tensor[(1, 112, 10, 1, 1), float32] */;
  %148 = sum(%147, axis=[0]) /* ty=Tensor[(112, 10, 1, 1), float32] */;
  %149 = transpose(%148, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %150 = abs(%149) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %151 = max(%150, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %152 = divide(%151, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %153 = divide(%149, %152) /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %154 = greater_equal(%120, -128 /* ty=int32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %155 = less_equal(%120, 127 /* ty=int32 */) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %156 = cast(%v18_weight, dtype="float32") /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %157 = nn.conv2d_transpose(%140, %156, channels=112, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %158 = abs(%157) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %159 = max(%158, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %160 = divide(%159, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %161 = divide(%157, %160) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %162 = cast(%161, dtype="int8") /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %163 = cast(%162, dtype="float32") /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %164 = multiply(%163, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %165 = ones(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %166 = multiply(%154, %155) /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %167 = multiply(%164, %165) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %168 = zeros(shape=[1, 112, 4, 4], dtype="float32") /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %169 = where(%166, %167, %168) /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %170 = cast(%169, dtype="int32") /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %171 = greater_equal(%118, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %172 = less_equal(%118, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %173 = cast(%v17_conv_2_weight, dtype="float32") /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %174 = nn.conv2d_transpose(%169, %173, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %175 = abs(%174) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %176 = max(%175, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %177 = divide(%176, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %178 = divide(%174, %177) /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %179 = multiply(%171, %172) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %180 = cast(%178, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %181 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %182 = where(%179, %180, %181) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %183 = cast(%182, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %184 = strided_slice(%117, begin=[0, 0, 0, 0], end=[1, 42, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 42, 4, 4), int8] */;
  %185 = strided_slice(%182, begin=[0, 0, 0, 0], end=[1, 42, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 42, 4, 4), int8] */;
  %186 = tile(%185, reps=[1, 1, 1, 1]) /* ty=Tensor[(1, 42, 4, 4), int8] */;
  %187 = reshape(%184, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 42, 4, 4), int8] */;
  %188 = reshape(%186, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(42, 1, 4, 4), int8] */;
  %189 = nn.conv2d(%187, %188, padding=[1, 1, 1, 1], groups=42, out_dtype="int32") /* ty=Tensor[(1, 42, 3, 3), int32] */;
  %190 = reshape(%189, newshape=[1, 1, 42, 3, 3]) /* ty=Tensor[(1, 1, 42, 3, 3), int32] */;
  %191 = sum(%190, axis=[0]) /* ty=Tensor[(1, 42, 3, 3), int32] */;
  %192 = transpose(%191, axes=[1, 0, 2, 3]) /* ty=Tensor[(42, 1, 3, 3), int32] */;
  %193 = abs(%192) /* ty=Tensor[(42, 1, 3, 3), int32] */;
  %194 = max(%193, axis=[1], keepdims=True) /* ty=Tensor[(42, 1, 3, 3), int32] */;
  %195 = divide(%194, 127 /* ty=int32 */) /* ty=Tensor[(42, 1, 3, 3), int32] */;
  %196 = divide(%192, %195) /* ty=Tensor[(42, 1, 3, 3), int32] */;
  %197 = greater_equal(%116, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %198 = less_equal(%116, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %199 = nn.conv2d_transpose(%182, %v17_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %200 = abs(%199) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %201 = max(%200, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %202 = divide(%201, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %203 = divide(%199, %202) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %204 = multiply(%197, %198) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %205 = cast(%203, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %206 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %207 = where(%204, %205, %206) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %208 = cast(%207, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %209 = strided_slice(%115, begin=[0, 0, 0, 0], end=[1, 7, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 7, 4, 4), int8] */;
  %210 = tile(%207, reps=[1, 7, 1, 1]) /* ty=Tensor[(1, 2352, 4, 4), int8] */;
  %211 = reshape(%209, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 7, 4, 4), int8] */;
  %212 = reshape(%210, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2352, 1, 4, 4), int8] */;
  %213 = nn.conv2d(%211, %212, padding=[0, 0, 0, 0], groups=7, out_dtype="int32") /* ty=Tensor[(1, 2352, 1, 1), int32] */;
  %214 = reshape(%213, newshape=[1, 7, 336, 1, 1]) /* ty=Tensor[(1, 7, 336, 1, 1), int32] */;
  %215 = sum(%214, axis=[0]) /* ty=Tensor[(7, 336, 1, 1), int32] */;
  %216 = transpose(%215, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %217 = abs(%216) /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %218 = max(%217, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %219 = divide(%218, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %220 = divide(%216, %219) /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %221 = greater_equal(%112, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %222 = less_equal(%112, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %223 = greater_equal(%114, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %224 = less_equal(%114, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %225 = nn.conv2d_transpose(%207, %v17_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %226 = abs(%225) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %227 = max(%226, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %228 = divide(%227, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %229 = divide(%225, %228) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %230 = multiply(%223, %224) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %231 = cast(%229, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %232 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %233 = where(%230, %231, %232) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %235 = reshape(%v16_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %236 = divide(%234, %235) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %237 = reshape(%v16_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %238 = multiply(%236, %237) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %239 = multiply(%221, %222) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %240 = cast(%238, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %241 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %242 = where(%239, %240, %241) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %243 = cast(%242, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %244 = greater_equal(%110, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %245 = less_equal(%110, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %246 = nn.conv2d_transpose(%242, %v16_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %247 = abs(%246) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %248 = max(%247, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %249 = divide(%248, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %250 = divide(%246, %249) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %251 = multiply(%244, %245) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %252 = cast(%250, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %253 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %254 = where(%251, %252, %253) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %255 = cast(%254, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %256 = greater_equal(%108, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %257 = less_equal(%108, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %258 = nn.conv2d_transpose(%254, %v16_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %259 = abs(%258) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %260 = max(%259, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %261 = divide(%260, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %262 = divide(%258, %261) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %263 = multiply(%256, %257) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %264 = cast(%262, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %265 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %266 = where(%263, %264, %265) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %267 = cast(%266, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %268 = strided_slice(%107, begin=[0, 0, 0, 0], end=[1, 7, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 7, 4, 4), int8] */;
  %269 = tile(%266, reps=[1, 7, 1, 1]) /* ty=Tensor[(1, 2352, 4, 4), int8] */;
  %270 = reshape(%268, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 7, 4, 4), int8] */;
  %271 = reshape(%269, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2352, 1, 4, 4), int8] */;
  %272 = nn.conv2d(%270, %271, padding=[0, 0, 0, 0], groups=7, out_dtype="int32") /* ty=Tensor[(1, 2352, 1, 1), int32] */;
  %273 = reshape(%272, newshape=[1, 7, 336, 1, 1]) /* ty=Tensor[(1, 7, 336, 1, 1), int32] */;
  %274 = sum(%273, axis=[0]) /* ty=Tensor[(7, 336, 1, 1), int32] */;
  %275 = transpose(%274, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %276 = abs(%275) /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %277 = max(%276, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %278 = divide(%277, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %279 = divide(%275, %278) /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %280 = greater_equal(%104, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %281 = less_equal(%104, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %282 = greater_equal(%106, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %283 = less_equal(%106, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %284 = nn.conv2d_transpose(%266, %v16_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %285 = abs(%284) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %286 = max(%285, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %287 = divide(%286, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %288 = divide(%284, %287) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %289 = multiply(%282, %283) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %290 = cast(%288, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %291 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %292 = where(%289, %290, %291) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %293 = cast(%292, dtype="float32") /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %294 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %295 = divide(%293, %294) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %296 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %297 = multiply(%295, %296) /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %298 = multiply(%280, %281) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %299 = cast(%297, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %300 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %301 = where(%298, %299, %300) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %302 = cast(%301, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %303 = greater_equal(%102, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %304 = less_equal(%102, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %305 = nn.conv2d_transpose(%301, %v15_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %306 = abs(%305) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %307 = max(%306, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %308 = divide(%307, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %309 = divide(%305, %308) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %310 = multiply(%303, %304) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %311 = cast(%309, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %312 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %313 = where(%310, %311, %312) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %314 = cast(%313, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %315 = greater_equal(%100, -128 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %316 = less_equal(%100, 127 /* ty=int32 */) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %317 = nn.conv2d_transpose(%313, %v15_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %318 = abs(%317) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %319 = max(%318, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %320 = divide(%319, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %321 = divide(%317, %320) /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %322 = multiply(%315, %316) /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %323 = cast(%321, dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %324 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %325 = where(%322, %323, %324) /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %326 = cast(%325, dtype="int32") /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %327 = strided_slice(%99, begin=[0, 0, 0, 0], end=[1, 7, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 7, 4, 4), int8] */;
  %328 = tile(%325, reps=[1, 7, 1, 1]) /* ty=Tensor[(1, 2352, 4, 4), int8] */;
  %329 = reshape(%327, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 7, 4, 4), int8] */;
  %330 = reshape(%328, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2352, 1, 4, 4), int8] */;
  %331 = nn.conv2d(%329, %330, padding=[0, 0, 0, 0], groups=7, out_dtype="int32") /* ty=Tensor[(1, 2352, 1, 1), int32] */;
  %332 = reshape(%331, newshape=[1, 7, 336, 1, 1]) /* ty=Tensor[(1, 7, 336, 1, 1), int32] */;
  %333 = sum(%332, axis=[0]) /* ty=Tensor[(7, 336, 1, 1), int32] */;
  %334 = transpose(%333, axes=[1, 0, 2, 3]) /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %335 = abs(%334) /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %336 = max(%335, axis=[1], keepdims=True) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %337 = divide(%336, 127 /* ty=int32 */) /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %338 = divide(%334, %337) /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %339 = greater_equal(%98, -128 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %340 = less_equal(%98, 127 /* ty=int32 */) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %341 = nn.conv2d_transpose(%325, %v15_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %342 = abs(%341) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %343 = max(%342, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %344 = divide(%343, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %345 = divide(%341, %344) /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %346 = multiply(%339, %340) /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %347 = cast(%345, dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %348 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %349 = where(%346, %347, %348) /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %350 = cast(%349, dtype="int32") /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %351 = strided_slice(%97, begin=[0, 0, 0, 0], end=[1, 48, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 48, 4, 4), int8] */;
  %352 = tile(%349, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 2688, 4, 4), int8] */;
  %353 = reshape(%351, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 4, 4), int8] */;
  %354 = reshape(%352, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(2688, 1, 4, 4), int8] */;
  %355 = nn.conv2d(%353, %354, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 2688, 1, 1), int32] */;
  %356 = reshape(%355, newshape=[1, 48, 56, 1, 1]) /* ty=Tensor[(1, 48, 56, 1, 1), int32] */;
  %357 = sum(%356, axis=[0]) /* ty=Tensor[(48, 56, 1, 1), int32] */;
  %358 = transpose(%357, axes=[1, 0, 2, 3]) /* ty=Tensor[(56, 48, 1, 1), int32] */;
  %359 = abs(%358) /* ty=Tensor[(56, 48, 1, 1), int32] */;
  %360 = max(%359, axis=[1], keepdims=True) /* ty=Tensor[(56, 1, 1, 1), int32] */;
  %361 = divide(%360, 127 /* ty=int32 */) /* ty=Tensor[(56, 1, 1, 1), int32] */;
  %362 = divide(%358, %361) /* ty=Tensor[(56, 48, 1, 1), int32] */;
  %363 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %364 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %365 = nn.conv2d_transpose(%349, %v14_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %366 = abs(%365) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %367 = max(%366, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %368 = divide(%367, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %369 = divide(%365, %368) /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %370 = multiply(%363, %364) /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %371 = cast(%369, dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %372 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %373 = where(%370, %371, %372) /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %374 = cast(%373, dtype="int32") /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %375 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %376 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %377 = nn.conv2d_transpose(%373, %v14_conv_1_weight, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %378 = abs(%377) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %379 = max(%378, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %380 = divide(%379, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %381 = divide(%377, %380) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %382 = multiply(%375, %376) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %383 = cast(%381, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %384 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %385 = where(%382, %383, %384) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %386 = cast(%385, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %387 = tile(%385, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %388 = reshape(%93, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %389 = reshape(%387, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %390 = nn.conv2d(%388, %389, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %391 = reshape(%390, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %392 = sum(%391, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %393 = transpose(%392, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %394 = abs(%393) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %395 = max(%394, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %396 = divide(%395, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %397 = divide(%393, %396) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %398 = greater_equal(%90, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %399 = less_equal(%90, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %400 = greater_equal(%92, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %401 = less_equal(%92, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %402 = nn.conv2d_transpose(%385, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %403 = abs(%402) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %404 = max(%403, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %405 = divide(%404, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %406 = divide(%402, %405) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %407 = multiply(%400, %401) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %408 = cast(%406, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %409 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %410 = where(%407, %408, %409) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %412 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %413 = divide(%411, %412) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %414 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %415 = multiply(%413, %414) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %416 = multiply(%398, %399) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %417 = cast(%415, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %418 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %419 = where(%416, %417, %418) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %420 = cast(%419, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %421 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %422 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %423 = nn.conv2d_transpose(%419, %v13_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %424 = abs(%423) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %425 = max(%424, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %426 = divide(%425, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %427 = divide(%423, %426) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %428 = multiply(%421, %422) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %429 = cast(%427, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %430 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %431 = where(%428, %429, %430) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %432 = cast(%431, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %433 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %434 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %435 = nn.conv2d_transpose(%431, %v13_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %436 = abs(%435) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %437 = max(%436, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %438 = divide(%437, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %439 = divide(%435, %438) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %440 = multiply(%433, %434) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %441 = cast(%439, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %442 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %443 = where(%440, %441, %442) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %444 = cast(%443, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %445 = tile(%443, reps=[1, 32, 1, 1]) /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %446 = reshape(%85, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %447 = reshape(%445, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %448 = nn.conv2d(%446, %447, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %449 = reshape(%448, newshape=[1, 32, 192, 1, 1]) /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %450 = sum(%449, axis=[0]) /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %451 = transpose(%450, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %452 = abs(%451) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %453 = max(%452, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %454 = divide(%453, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %455 = divide(%451, %454) /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %456 = greater_equal(%82, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %457 = less_equal(%82, 127 /* ty=int32 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %458 = greater_equal(%84, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %459 = less_equal(%84, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %460 = nn.conv2d_transpose(%443, %v13_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %461 = abs(%460) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %462 = max(%461, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %463 = divide(%462, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %464 = divide(%460, %463) /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %465 = multiply(%458, %459) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %466 = cast(%464, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %467 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %468 = where(%465, %466, %467) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %470 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %471 = divide(%469, %470) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %472 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %473 = multiply(%471, %472) /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %474 = multiply(%456, %457) /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %475 = cast(%473, dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %476 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %477 = where(%474, %475, %476) /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %478 = cast(%477, dtype="int32") /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %479 = nn.cross_entropy_with_logits(%127, %label) /* ty=float32 */;
  %480 = sum(%141, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %481 = cast(%153, dtype="int8") /* ty=Tensor[(10, 112, 1, 1), int8] */;
  %482 = sum(%170, axis=[1], exclude=True) /* ty=Tensor[(112), int32] */;
  %483 = sum(%183, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %484 = cast(%196, dtype="int8") /* ty=Tensor[(42, 1, 3, 3), int8] */;
  %485 = sum(%208, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %486 = cast(%220, dtype="int8") /* ty=Tensor[(336, 7, 1, 1), int8] */;
  %487 = sum(%243, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %488 = sum(%255, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %489 = sum(%267, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %490 = cast(%279, dtype="int8") /* ty=Tensor[(336, 7, 1, 1), int8] */;
  %491 = sum(%302, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %492 = sum(%314, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %493 = sum(%326, axis=[1], exclude=True) /* ty=Tensor[(336), int32] */;
  %494 = cast(%338, dtype="int8") /* ty=Tensor[(336, 7, 1, 1), int8] */;
  %495 = sum(%350, axis=[1], exclude=True) /* ty=Tensor[(56), int32] */;
  %496 = cast(%362, dtype="int8") /* ty=Tensor[(56, 48, 1, 1), int8] */;
  %497 = sum(%374, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %498 = sum(%386, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %499 = cast(%397, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %500 = sum(%420, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  %501 = sum(%432, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %502 = sum(%444, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %503 = cast(%455, dtype="int8") /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %504 = sum(%478, axis=[1], exclude=True) /* ty=Tensor[(32), int32] */;
  (%479, %480, %481, %482, %483, %484, %485, %486, %487, %488, %489, %490, %491, %492, %493, %494, %495, %496, %497, %498, %499, %500, %501, %502, %503, %504)
}

