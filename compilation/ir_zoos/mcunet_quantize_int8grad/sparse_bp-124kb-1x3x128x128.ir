def @main(%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(32, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(32), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(32), float32], %v2_conv_1_weight: Tensor[(32, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(32), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(32), float32], %v2_conv_2_weight: Tensor[(16, 32, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(24, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(24), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(24), float32], %v5_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v5_conv_0_bias: Tensor[(120), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(120), float32], %v5_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(120), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(120), float32], %v5_conv_2_weight: Tensor[(24, 120, 1, 1), int8], %v5_conv_2_bias: Tensor[(24), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(24), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v6_conv_0_bias: Tensor[(120), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(120), float32], %v6_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(120), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(120), float32], %v6_conv_2_weight: Tensor[(40, 120, 1, 1), int8], %v6_conv_2_bias: Tensor[(40), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(40), float32], %v7_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v7_conv_0_bias: Tensor[(160), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(160), float32], %v7_conv_1_weight: Tensor[(160, 1, 7, 7), int8], %v7_conv_1_bias: Tensor[(160), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(160), float32], %v7_conv_2_weight: Tensor[(40, 160, 1, 1), int8], %v7_conv_2_bias: Tensor[(40), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(40), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v8_conv_0_bias: Tensor[(160), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(160), float32], %v8_conv_1_weight: Tensor[(160, 1, 5, 5), int8], %v8_conv_1_bias: Tensor[(160), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(160), float32], %v8_conv_2_weight: Tensor[(48, 160, 1, 1), int8], %v8_conv_2_bias: Tensor[(48), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(48), float32], %v9_conv_0_weight: Tensor[(144, 48, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(48, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(48), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(48), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(192, 48, 1, 1), int8], %v10_conv_0_bias: Tensor[(192), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(192), float32], %v10_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(192), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(192), float32], %v10_conv_2_weight: Tensor[(48, 192, 1, 1), int8], %v10_conv_2_bias: Tensor[(48), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(48), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(240, 48, 1, 1), int8], %v11_conv_0_bias: Tensor[(240), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(240), float32], %v11_conv_1_weight: Tensor[(240, 1, 7, 7), int8], %v11_conv_1_bias: Tensor[(240), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(240), float32], %v11_conv_2_weight: Tensor[(96, 240, 1, 1), int8], %v11_conv_2_bias: Tensor[(96), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(96), float32], %v12_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v12_conv_0_bias: Tensor[(384), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(384), float32], %v12_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(384), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(384), float32], %v12_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v12_conv_2_bias: Tensor[(96), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(96), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v13_conv_0_bias: Tensor[(384), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(384), float32], %v13_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(384), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(384), float32], %v13_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v13_conv_2_bias: Tensor[(96), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(96), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(576, 96, 1, 1), int8], %v14_conv_0_bias: Tensor[(576), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(576), float32], %v14_conv_1_weight: Tensor[(576, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(576), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(576), float32], %v14_conv_2_weight: Tensor[(160, 576, 1, 1), int8], %v14_conv_2_bias: Tensor[(160), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(160), float32], %v15_weight: Tensor[(10, 160, 1, 1), int8], %v15_bias: Tensor[(10), int32], %v15_zero_x: Tensor[(1), int8], %v15_zero_y: Tensor[(1), int8], %v15_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 160, 1, 1), int8], Tensor[(160), int32], Tensor[(576), int32], Tensor[(576), int32], Tensor[(576, 48, 1, 1), int8], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(384, 48, 1, 1), int8], Tensor[(96), int32], Tensor[(240), int32], Tensor[(240), int32], Tensor[(240, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(160), int32], Tensor[(160), int32], Tensor[(160, 10, 1, 1), int8], Tensor[(40), int32], Tensor[(160), int32], Tensor[(160), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=32) /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=120) /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %37 = nn.mcutruncate(%36) /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %39 = nn.mcutruncate(%38) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %40 = nn.mcuconv2d(%39, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %41 = nn.mcutruncate(%40) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[3, 3, 3, 3], groups=160) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %43 = nn.mcutruncate(%42) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %46 = nn.mcuadd(%39, %45, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %47 = nn.mcutruncate(%46) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[2, 2, 2, 2], groups=160) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %60 = nn.mcuadd(%53, %59, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %61 = nn.mcutruncate(%60) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %62 = nn.mcuconv2d(%61, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %63 = nn.mcutruncate(%62) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %68 = nn.mcuadd(%61, %67, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %69 = nn.mcutruncate(%68) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %70 = nn.mcuconv2d(%69, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %71 = nn.mcutruncate(%70) /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=240) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %73 = nn.mcutruncate(%72) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %75 = nn.mcutruncate(%74) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %76 = nn.mcuconv2d(%75, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %77 = nn.mcutruncate(%76) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %79 = nn.mcutruncate(%78) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %81 = nn.mcutruncate(%80) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %82 = nn.mcuadd(%75, %81, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %83 = nn.mcutruncate(%82) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %84 = nn.mcuconv2d(%83, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %85 = nn.mcutruncate(%84) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %87 = nn.mcutruncate(%86) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %89 = nn.mcutruncate(%88) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %90 = nn.mcuadd(%83, %89, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %91 = nn.mcutruncate(%90) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %92 = nn.mcuconv2d(%91, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %93 = nn.mcutruncate(%92) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[1, 1, 1, 1], groups=576) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %95 = nn.mcutruncate(%94) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* ty=Tensor[(1, 160, 4, 4), int8] */;
  %98 = mcumean(%97, axis=[2, 3], keepdims=True) /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %99 = nn.mcuconv2d(%98, %v15_weight, %v15_bias, %v15_zero_x, %v15_zero_y, %v15_scale, padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %100 = nn.mcutruncate(%99) /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %101 = reshape(%100, newshape=[0, 0]) /* ty=Tensor[(1, 10), int8] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %103 = nn.log_softmax(%102) /* ty=Tensor[(1, 10), float32] */;
  %104 = greater_equal(%99, -128 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %105 = less_equal(%99, 127 /* ty=int32 */) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %106 = ones(shape=[], dtype="float32") /* ty=float32 */;
  %107 = negative(%106) /* ty=float32 */;
  %108 = multiply(%107, %label) /* ty=Tensor[(1, 10), float32] */;
  %109 = sum(%108, axis=[-1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %110 = exp(%103) /* ty=Tensor[(1, 10), float32] */;
  %111 = multiply(%109, %110) /* ty=Tensor[(1, 10), float32] */;
  %112 = subtract(%108, %111) /* ty=Tensor[(1, 10), float32] */;
  %113 = multiply(%104, %105) /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %114 = reshape(%112, newshape=[1, 10, 1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %115 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %116 = where(%113, %114, %115) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %117 = cast(%116, dtype="int32") /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %118 = reshape(%98, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %119 = tile(%116, reps=[1, 160, 1, 1]) /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %120 = cast(%118, dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %121 = reshape(%119, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1600, 1, 1, 1), float32] */;
  %122 = nn.conv2d(%120, %121, padding=[0, 0, 0, 0], groups=160, out_dtype="float32") /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %123 = reshape(%122, newshape=[1, 160, 10, 1, 1]) /* ty=Tensor[(1, 160, 10, 1, 1), float32] */;
  %124 = sum(%123, axis=[0]) /* ty=Tensor[(160, 10, 1, 1), float32] */;
  %125 = transpose(%124, axes=[1, 0, 2, 3]) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %126 = abs(%125) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %127 = max(%126, axis=[1], keepdims=True) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %128 = divide(%127, 127f /* ty=float32 */) /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %129 = divide(%125, %128) /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %130 = greater_equal(%96, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %131 = less_equal(%96, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %132 = cast(%v15_weight, dtype="float32") /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %133 = nn.conv2d_transpose(%116, %132, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %134 = abs(%133) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %135 = max(%134, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %136 = divide(%135, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %137 = divide(%133, %136) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %138 = cast(%137, dtype="int8") /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %140 = multiply(%139, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %141 = ones(shape=[1, 160, 4, 4], dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %142 = multiply(%130, %131) /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %143 = multiply(%140, %141) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %144 = zeros(shape=[1, 160, 4, 4], dtype="float32") /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %145 = where(%142, %143, %144) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %146 = cast(%145, dtype="int32") /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %147 = greater_equal(%94, -128 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %148 = less_equal(%94, 127 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %149 = cast(%v14_conv_2_weight, dtype="float32") /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %150 = nn.conv2d_transpose(%145, %149, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %151 = abs(%150) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %152 = max(%151, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %153 = divide(%152, 127f /* ty=float32 */) /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %154 = divide(%150, %153) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %155 = multiply(%147, %148) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %156 = cast(%154, dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %157 = zeros(shape=[1, 576, 4, 4], dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %158 = where(%155, %156, %157) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %159 = cast(%158, dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %160 = greater_equal(%92, -128 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %161 = less_equal(%92, 127 /* ty=int32 */) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %162 = nn.conv2d_transpose(%158, %v14_conv_1_weight, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %163 = abs(%162) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %164 = max(%163, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %165 = divide(%164, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %166 = divide(%162, %165) /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %167 = multiply(%160, %161) /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %168 = cast(%166, dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %169 = zeros(shape=[1, 576, 4, 4], dtype="int8") /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %170 = where(%167, %168, %169) /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %171 = cast(%170, dtype="int32") /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %172 = strided_slice(%91, begin=[0, 0, 0, 0], end=[1, 48, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 48, 4, 4), int8] */;
  %173 = tile(%170, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 27648, 4, 4), int8] */;
  %174 = reshape(%172, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 4, 4), int8] */;
  %175 = reshape(%173, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(27648, 1, 4, 4), int8] */;
  %176 = nn.conv2d(%174, %175, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 27648, 1, 1), int32] */;
  %177 = reshape(%176, newshape=[1, 48, 576, 1, 1]) /* ty=Tensor[(1, 48, 576, 1, 1), int32] */;
  %178 = sum(%177, axis=[0]) /* ty=Tensor[(48, 576, 1, 1), int32] */;
  %179 = transpose(%178, axes=[1, 0, 2, 3]) /* ty=Tensor[(576, 48, 1, 1), int32] */;
  %180 = abs(%179) /* ty=Tensor[(576, 48, 1, 1), int32] */;
  %181 = max(%180, axis=[1], keepdims=True) /* ty=Tensor[(576, 1, 1, 1), int32] */;
  %182 = divide(%181, 127 /* ty=int32 */) /* ty=Tensor[(576, 1, 1, 1), int32] */;
  %183 = divide(%179, %182) /* ty=Tensor[(576, 48, 1, 1), int32] */;
  %184 = greater_equal(%88, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %185 = less_equal(%88, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %186 = greater_equal(%90, meta[relay.Constant][0] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %187 = less_equal(%90, meta[relay.Constant][1] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %188 = nn.conv2d_transpose(%170, %v14_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %189 = abs(%188) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %190 = max(%189, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %191 = divide(%190, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %192 = divide(%188, %191) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %193 = multiply(%186, %187) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %194 = cast(%192, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %195 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %196 = where(%193, %194, %195) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %198 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %199 = divide(%197, %198) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %200 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %201 = multiply(%199, %200) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %202 = multiply(%184, %185) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %203 = cast(%201, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %204 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %205 = where(%202, %203, %204) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %206 = cast(%205, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %207 = greater_equal(%86, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %208 = less_equal(%86, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %209 = nn.conv2d_transpose(%205, %v13_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %210 = abs(%209) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %211 = max(%210, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %212 = divide(%211, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %213 = divide(%209, %212) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %214 = multiply(%207, %208) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %215 = cast(%213, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %216 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %217 = where(%214, %215, %216) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %218 = cast(%217, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %219 = greater_equal(%84, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %220 = less_equal(%84, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %221 = nn.conv2d_transpose(%217, %v13_conv_1_weight, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %222 = abs(%221) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %223 = max(%222, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %224 = divide(%223, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %225 = divide(%221, %224) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %226 = multiply(%219, %220) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %227 = cast(%225, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %228 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %229 = where(%226, %227, %228) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %230 = cast(%229, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %231 = greater_equal(%80, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %232 = less_equal(%80, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %233 = greater_equal(%82, meta[relay.Constant][2] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %234 = less_equal(%82, meta[relay.Constant][3] /* ty=int8 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %235 = nn.conv2d_transpose(%229, %v13_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %236 = abs(%235) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %237 = max(%236, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %238 = divide(%237, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %239 = divide(%235, %238) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %240 = multiply(%233, %234) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %241 = cast(%239, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %242 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %243 = where(%240, %241, %242) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %245 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %246 = divide(%244, %245) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %247 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %248 = multiply(%246, %247) /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %249 = multiply(%231, %232) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %250 = cast(%248, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %251 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %252 = where(%249, %250, %251) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %253 = cast(%252, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %254 = greater_equal(%78, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %255 = less_equal(%78, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %256 = nn.conv2d_transpose(%252, %v12_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %257 = abs(%256) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %258 = max(%257, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %259 = divide(%258, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %260 = divide(%256, %259) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %261 = multiply(%254, %255) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %262 = cast(%260, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %263 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %264 = where(%261, %262, %263) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %265 = cast(%264, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %266 = greater_equal(%76, -128 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %267 = less_equal(%76, 127 /* ty=int32 */) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %268 = nn.conv2d_transpose(%264, %v12_conv_1_weight, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %269 = abs(%268) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %270 = max(%269, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %271 = divide(%270, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %272 = divide(%268, %271) /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %273 = multiply(%266, %267) /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %274 = cast(%272, dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %275 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %276 = where(%273, %274, %275) /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %277 = cast(%276, dtype="int32") /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %278 = strided_slice(%75, begin=[0, 0, 0, 0], end=[1, 48, 4, 4], strides=[1], axes=None) /* ty=Tensor[(1, 48, 4, 4), int8] */;
  %279 = tile(%276, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 18432, 4, 4), int8] */;
  %280 = reshape(%278, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 4, 4), int8] */;
  %281 = reshape(%279, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(18432, 1, 4, 4), int8] */;
  %282 = nn.conv2d(%280, %281, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 18432, 1, 1), int32] */;
  %283 = reshape(%282, newshape=[1, 48, 384, 1, 1]) /* ty=Tensor[(1, 48, 384, 1, 1), int32] */;
  %284 = sum(%283, axis=[0]) /* ty=Tensor[(48, 384, 1, 1), int32] */;
  %285 = transpose(%284, axes=[1, 0, 2, 3]) /* ty=Tensor[(384, 48, 1, 1), int32] */;
  %286 = abs(%285) /* ty=Tensor[(384, 48, 1, 1), int32] */;
  %287 = max(%286, axis=[1], keepdims=True) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %288 = divide(%287, 127 /* ty=int32 */) /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %289 = divide(%285, %288) /* ty=Tensor[(384, 48, 1, 1), int32] */;
  %290 = greater_equal(%74, -128 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %291 = less_equal(%74, 127 /* ty=int32 */) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %292 = nn.conv2d_transpose(%276, %v12_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %293 = abs(%292) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %294 = max(%293, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %295 = divide(%294, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %296 = divide(%292, %295) /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %297 = multiply(%290, %291) /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %298 = cast(%296, dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %299 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %300 = where(%297, %298, %299) /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %301 = cast(%300, dtype="int32") /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %302 = greater_equal(%72, -128 /* ty=int32 */) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %303 = less_equal(%72, 127 /* ty=int32 */) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %304 = nn.conv2d_transpose(%300, %v11_conv_2_weight, channels=240, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %305 = abs(%304) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %306 = max(%305, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %307 = divide(%306, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %308 = divide(%304, %307) /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %309 = multiply(%302, %303) /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %310 = cast(%308, dtype="int8") /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %311 = zeros(shape=[1, 240, 4, 4], dtype="int8") /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %312 = where(%309, %310, %311) /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %313 = cast(%312, dtype="int32") /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %314 = greater_equal(%70, -128 /* ty=int32 */) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %315 = less_equal(%70, 127 /* ty=int32 */) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %316 = nn.conv2d_transpose(%312, %v11_conv_1_weight, channels=240, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=240, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %317 = abs(%316) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %318 = max(%317, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %319 = divide(%318, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %320 = divide(%316, %319) /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %321 = multiply(%314, %315) /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %322 = cast(%320, dtype="int8") /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %323 = zeros(shape=[1, 240, 8, 8], dtype="int8") /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %324 = where(%321, %322, %323) /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %325 = cast(%324, dtype="int32") /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %326 = tile(%324, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 11520, 8, 8), int8] */;
  %327 = reshape(%69, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %328 = reshape(%326, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(11520, 1, 8, 8), int8] */;
  %329 = nn.conv2d(%327, %328, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 11520, 1, 1), int32] */;
  %330 = reshape(%329, newshape=[1, 48, 240, 1, 1]) /* ty=Tensor[(1, 48, 240, 1, 1), int32] */;
  %331 = sum(%330, axis=[0]) /* ty=Tensor[(48, 240, 1, 1), int32] */;
  %332 = transpose(%331, axes=[1, 0, 2, 3]) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %333 = abs(%332) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %334 = max(%333, axis=[1], keepdims=True) /* ty=Tensor[(240, 1, 1, 1), int32] */;
  %335 = divide(%334, 127 /* ty=int32 */) /* ty=Tensor[(240, 1, 1, 1), int32] */;
  %336 = divide(%332, %335) /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %337 = greater_equal(%66, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %338 = less_equal(%66, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %339 = greater_equal(%68, meta[relay.Constant][4] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %340 = less_equal(%68, meta[relay.Constant][5] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %341 = nn.conv2d_transpose(%324, %v11_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %342 = abs(%341) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %343 = max(%342, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %344 = divide(%343, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %345 = divide(%341, %344) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %346 = multiply(%339, %340) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %347 = cast(%345, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %348 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %349 = where(%346, %347, %348) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %350 = cast(%349, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %351 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %352 = divide(%350, %351) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %353 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %354 = multiply(%352, %353) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %355 = multiply(%337, %338) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %356 = cast(%354, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %357 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %358 = where(%355, %356, %357) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %359 = cast(%358, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %360 = greater_equal(%64, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %361 = less_equal(%64, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %362 = nn.conv2d_transpose(%358, %v10_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %363 = abs(%362) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %364 = max(%363, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %365 = divide(%364, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %366 = divide(%362, %365) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %367 = multiply(%360, %361) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %368 = cast(%366, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %369 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %370 = where(%367, %368, %369) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %371 = cast(%370, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %372 = greater_equal(%62, -128 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %373 = less_equal(%62, 127 /* ty=int32 */) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %374 = nn.conv2d_transpose(%370, %v10_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %375 = abs(%374) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %376 = max(%375, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %377 = divide(%376, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %378 = divide(%374, %377) /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %379 = multiply(%372, %373) /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %380 = cast(%378, dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %381 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %382 = where(%379, %380, %381) /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %383 = cast(%382, dtype="int32") /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %384 = tile(%382, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 9216, 8, 8), int8] */;
  %385 = reshape(%61, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %386 = reshape(%384, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(9216, 1, 8, 8), int8] */;
  %387 = nn.conv2d(%385, %386, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 9216, 1, 1), int32] */;
  %388 = reshape(%387, newshape=[1, 48, 192, 1, 1]) /* ty=Tensor[(1, 48, 192, 1, 1), int32] */;
  %389 = sum(%388, axis=[0]) /* ty=Tensor[(48, 192, 1, 1), int32] */;
  %390 = transpose(%389, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %391 = abs(%390) /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %392 = max(%391, axis=[1], keepdims=True) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %393 = divide(%392, 127 /* ty=int32 */) /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %394 = divide(%390, %393) /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %395 = greater_equal(%58, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %396 = less_equal(%58, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %397 = greater_equal(%60, meta[relay.Constant][6] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %398 = less_equal(%60, meta[relay.Constant][7] /* ty=int8 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %399 = nn.conv2d_transpose(%382, %v10_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %400 = abs(%399) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %401 = max(%400, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %402 = divide(%401, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %403 = divide(%399, %402) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %404 = multiply(%397, %398) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %405 = cast(%403, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %406 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %407 = where(%404, %405, %406) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %409 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %410 = divide(%408, %409) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %411 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %412 = multiply(%410, %411) /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %413 = multiply(%395, %396) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %414 = cast(%412, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %415 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %416 = where(%413, %414, %415) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %417 = cast(%416, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %418 = greater_equal(%56, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %419 = less_equal(%56, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %420 = nn.conv2d_transpose(%416, %v9_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %421 = abs(%420) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %422 = max(%421, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %423 = divide(%422, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %424 = divide(%420, %423) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %425 = multiply(%418, %419) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %426 = cast(%424, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %427 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %428 = where(%425, %426, %427) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %429 = cast(%428, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %430 = greater_equal(%54, -128 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %431 = less_equal(%54, 127 /* ty=int32 */) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %432 = nn.conv2d_transpose(%428, %v9_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %433 = abs(%432) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %434 = max(%433, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %435 = divide(%434, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %436 = divide(%432, %435) /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %437 = multiply(%430, %431) /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %438 = cast(%436, dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %439 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %440 = where(%437, %438, %439) /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %441 = cast(%440, dtype="int32") /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %442 = tile(%440, reps=[1, 48, 1, 1]) /* ty=Tensor[(1, 6912, 8, 8), int8] */;
  %443 = reshape(%53, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %444 = reshape(%442, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(6912, 1, 8, 8), int8] */;
  %445 = nn.conv2d(%443, %444, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* ty=Tensor[(1, 6912, 1, 1), int32] */;
  %446 = reshape(%445, newshape=[1, 48, 144, 1, 1]) /* ty=Tensor[(1, 48, 144, 1, 1), int32] */;
  %447 = sum(%446, axis=[0]) /* ty=Tensor[(48, 144, 1, 1), int32] */;
  %448 = transpose(%447, axes=[1, 0, 2, 3]) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %449 = abs(%448) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %450 = max(%449, axis=[1], keepdims=True) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %451 = divide(%450, 127 /* ty=int32 */) /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %452 = divide(%448, %451) /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %453 = greater_equal(%52, -128 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %454 = less_equal(%52, 127 /* ty=int32 */) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %455 = nn.conv2d_transpose(%440, %v9_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %456 = abs(%455) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %457 = max(%456, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %458 = divide(%457, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %459 = divide(%455, %458) /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %460 = multiply(%453, %454) /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %461 = cast(%459, dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %462 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %463 = where(%460, %461, %462) /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %464 = cast(%463, dtype="int32") /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %465 = greater_equal(%50, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %466 = less_equal(%50, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %467 = nn.conv2d_transpose(%463, %v8_conv_2_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %468 = abs(%467) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %469 = max(%468, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %470 = divide(%469, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %471 = divide(%467, %470) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %472 = multiply(%465, %466) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %473 = cast(%471, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %474 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %475 = where(%472, %473, %474) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %476 = cast(%475, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %477 = greater_equal(%48, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %478 = less_equal(%48, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %479 = nn.conv2d_transpose(%475, %v8_conv_1_weight, channels=160, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=160, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %480 = abs(%479) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %481 = max(%480, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %482 = divide(%481, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %483 = divide(%479, %482) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %484 = multiply(%477, %478) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %485 = cast(%483, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %486 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %487 = where(%484, %485, %486) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %488 = cast(%487, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %489 = strided_slice(%47, begin=[0, 0, 0, 0], end=[1, 10, 8, 8], strides=[1], axes=None) /* ty=Tensor[(1, 10, 8, 8), int8] */;
  %490 = tile(%487, reps=[1, 10, 1, 1]) /* ty=Tensor[(1, 1600, 8, 8), int8] */;
  %491 = reshape(%489, newshape=[1, -1, 0, 0]) /* ty=Tensor[(1, 10, 8, 8), int8] */;
  %492 = reshape(%490, newshape=[-1, 1, 0, 0]) /* ty=Tensor[(1600, 1, 8, 8), int8] */;
  %493 = nn.conv2d(%491, %492, padding=[0, 0, 0, 0], groups=10, out_dtype="int32") /* ty=Tensor[(1, 1600, 1, 1), int32] */;
  %494 = reshape(%493, newshape=[1, 10, 160, 1, 1]) /* ty=Tensor[(1, 10, 160, 1, 1), int32] */;
  %495 = sum(%494, axis=[0]) /* ty=Tensor[(10, 160, 1, 1), int32] */;
  %496 = transpose(%495, axes=[1, 0, 2, 3]) /* ty=Tensor[(160, 10, 1, 1), int32] */;
  %497 = abs(%496) /* ty=Tensor[(160, 10, 1, 1), int32] */;
  %498 = max(%497, axis=[1], keepdims=True) /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %499 = divide(%498, 127 /* ty=int32 */) /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %500 = divide(%496, %499) /* ty=Tensor[(160, 10, 1, 1), int32] */;
  %501 = greater_equal(%44, -128 /* ty=int32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %502 = less_equal(%44, 127 /* ty=int32 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %503 = greater_equal(%46, meta[relay.Constant][8] /* ty=int8 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %504 = less_equal(%46, meta[relay.Constant][9] /* ty=int8 */) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %505 = nn.conv2d_transpose(%487, %v8_conv_0_weight, channels=40, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %506 = abs(%505) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %507 = max(%506, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %508 = divide(%507, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %509 = divide(%505, %508) /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %510 = multiply(%503, %504) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %511 = cast(%509, dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %512 = zeros(shape=[1, 40, 8, 8], dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %513 = where(%510, %511, %512) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %514 = cast(%513, dtype="float32") /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %515 = reshape(%v7_qadd_scale_y, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %516 = divide(%514, %515) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %517 = reshape(%v7_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %518 = multiply(%516, %517) /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %519 = multiply(%501, %502) /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %520 = cast(%518, dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %521 = zeros(shape=[1, 40, 8, 8], dtype="int8") /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %522 = where(%519, %520, %521) /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %523 = cast(%522, dtype="int32") /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %524 = greater_equal(%42, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %525 = less_equal(%42, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %526 = nn.conv2d_transpose(%522, %v7_conv_2_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %527 = abs(%526) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %528 = max(%527, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %529 = divide(%528, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %530 = divide(%526, %529) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %531 = multiply(%524, %525) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %532 = cast(%530, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %533 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %534 = where(%531, %532, %533) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %535 = cast(%534, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %536 = greater_equal(%40, -128 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %537 = less_equal(%40, 127 /* ty=int32 */) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %538 = nn.conv2d_transpose(%534, %v7_conv_1_weight, channels=160, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=160, kernel_layout="IOHW", out_dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %539 = abs(%538) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %540 = max(%539, axis=[1], keepdims=True) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %541 = divide(%540, 127 /* ty=int32 */) /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %542 = divide(%538, %541) /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %543 = multiply(%536, %537) /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %544 = cast(%542, dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %545 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %546 = where(%543, %544, %545) /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %547 = cast(%546, dtype="int32") /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %548 = nn.cross_entropy_with_logits(%103, %label) /* ty=float32 */;
  %549 = sum(%117, axis=[1], exclude=True) /* ty=Tensor[(10), int32] */;
  %550 = cast(%129, dtype="int8") /* ty=Tensor[(10, 160, 1, 1), int8] */;
  %551 = sum(%146, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %552 = sum(%159, axis=[1], exclude=True) /* ty=Tensor[(576), int32] */;
  %553 = sum(%171, axis=[1], exclude=True) /* ty=Tensor[(576), int32] */;
  %554 = cast(%183, dtype="int8") /* ty=Tensor[(576, 48, 1, 1), int8] */;
  %555 = sum(%206, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %556 = sum(%218, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %557 = sum(%230, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %558 = sum(%253, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %559 = sum(%265, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %560 = sum(%277, axis=[1], exclude=True) /* ty=Tensor[(384), int32] */;
  %561 = cast(%289, dtype="int8") /* ty=Tensor[(384, 48, 1, 1), int8] */;
  %562 = sum(%301, axis=[1], exclude=True) /* ty=Tensor[(96), int32] */;
  %563 = sum(%313, axis=[1], exclude=True) /* ty=Tensor[(240), int32] */;
  %564 = sum(%325, axis=[1], exclude=True) /* ty=Tensor[(240), int32] */;
  %565 = cast(%336, dtype="int8") /* ty=Tensor[(240, 48, 1, 1), int8] */;
  %566 = sum(%359, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %567 = sum(%371, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %568 = sum(%383, axis=[1], exclude=True) /* ty=Tensor[(192), int32] */;
  %569 = cast(%394, dtype="int8") /* ty=Tensor[(192, 48, 1, 1), int8] */;
  %570 = sum(%417, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %571 = sum(%429, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %572 = sum(%441, axis=[1], exclude=True) /* ty=Tensor[(144), int32] */;
  %573 = cast(%452, dtype="int8") /* ty=Tensor[(144, 48, 1, 1), int8] */;
  %574 = sum(%464, axis=[1], exclude=True) /* ty=Tensor[(48), int32] */;
  %575 = sum(%476, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %576 = sum(%488, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %577 = cast(%500, dtype="int8") /* ty=Tensor[(160, 10, 1, 1), int8] */;
  %578 = sum(%523, axis=[1], exclude=True) /* ty=Tensor[(40), int32] */;
  %579 = sum(%535, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  %580 = sum(%547, axis=[1], exclude=True) /* ty=Tensor[(160), int32] */;
  (%548, %549, %550, %551, %552, %553, %554, %555, %556, %557, %558, %559, %560, %561, %562, %563, %564, %565, %566, %567, %568, %569, %570, %571, %572, %573, %574, %575, %576, %577, %578, %579, %580)
}

