fn (%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(48), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(48), float32], %v2_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(48), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(48), float32], %v2_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v2_conv_2_bias: Tensor[(8), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(8), float32], %v3_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(8), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(8), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(96), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(96), float32], %v5_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(96), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(96), float32], %v5_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(96), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(96), float32], %v6_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(96), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(96), float32], %v6_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(96), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(96), float32], %v7_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v7_conv_1_bias: Tensor[(96), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(96), float32], %v7_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v7_conv_2_bias: Tensor[(24), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(24), float32], %v8_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v8_conv_0_bias: Tensor[(144), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(144), float32], %v8_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v8_conv_1_bias: Tensor[(144), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(144), float32], %v8_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v8_qadd_zero_x1: Tensor[(1), int8], %v8_qadd_zero_x2: Tensor[(1), int8], %v8_qadd_scale_x1: Tensor[(1), float32], %v8_qadd_scale_x2: Tensor[(1), float32], %v8_qadd_zero_y: Tensor[(1), int8], %v8_qadd_scale_y: Tensor[(1), float32], %v9_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(144), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(144), float32], %v10_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(144), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(144), float32], %v10_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(144), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(144), float32], %v11_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v11_conv_1_bias: Tensor[(144), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(144), float32], %v11_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v11_conv_2_bias: Tensor[(32), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(32), float32], %v12_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v12_conv_0_bias: Tensor[(192), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(192), float32], %v12_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v12_conv_1_bias: Tensor[(192), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(192), float32], %v12_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(192), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(192), float32], %v13_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v13_conv_1_bias: Tensor[(192), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(192), float32], %v13_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(192), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(192), float32], %v14_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(192), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(192), float32], %v14_conv_2_weight: Tensor[(56, 192, 1, 1), int8], %v14_conv_2_bias: Tensor[(56), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(56), float32], %v15_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v15_conv_0_bias: Tensor[(336), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(336), float32], %v15_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v15_conv_1_bias: Tensor[(336), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(336), float32], %v15_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v15_conv_2_bias: Tensor[(56), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(56), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v16_conv_0_bias: Tensor[(336), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(336), float32], %v16_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v16_conv_1_bias: Tensor[(336), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(336), float32], %v16_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v16_conv_2_bias: Tensor[(56), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(56), float32], %v16_qadd_zero_x1: Tensor[(1), int8], %v16_qadd_zero_x2: Tensor[(1), int8], %v16_qadd_scale_x1: Tensor[(1), float32], %v16_qadd_scale_x2: Tensor[(1), float32], %v16_qadd_zero_y: Tensor[(1), int8], %v16_qadd_scale_y: Tensor[(1), float32], %v17_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v17_conv_0_bias: Tensor[(336), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(336), float32], %v17_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v17_conv_1_bias: Tensor[(336), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(336), float32], %v17_conv_2_weight: Tensor[(112, 336, 1, 1), int8], %v17_conv_2_bias: Tensor[(112), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(112), float32], %v18_weight: Tensor[(10, 112, 1, 1), int8], %v18_bias: Tensor[(10), int32], %v18_zero_x: Tensor[(1), int8], %v18_zero_y: Tensor[(1), int8], %v18_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 112, 1, 1), int8], Tensor[(112), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 56, 1, 1), int8], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 28, 1, 1), int8], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 7, 1, 1), int8], Tensor[(56), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* from_string */ /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %47 = nn.mcutruncate(%46) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %54 = nn.mcuadd(%47, %53, %v8_qadd_zero_x1, %v8_qadd_zero_x2, %v8_qadd_scale_x1, %v8_qadd_scale_x2, %v8_qadd_zero_y, %v8_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %55 = nn.mcutruncate(%54) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %79 = nn.mcutruncate(%78) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %84 = nn.mcuadd(%77, %83, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %85 = nn.mcutruncate(%84) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %99 = nn.mcutruncate(%98) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %100 = nn.mcuconv2d(%99, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %101 = nn.mcutruncate(%100) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %103 = nn.mcutruncate(%102) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %105 = nn.mcutruncate(%104) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %106 = nn.mcuadd(%99, %105, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %107 = nn.mcutruncate(%106) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %108 = nn.mcuconv2d(%107, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %109 = nn.mcutruncate(%108) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %111 = nn.mcutruncate(%110) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %114 = nn.mcuadd(%107, %113, %v16_qadd_zero_x1, %v16_qadd_zero_x2, %v16_qadd_scale_x1, %v16_qadd_scale_x2, %v16_qadd_zero_y, %v16_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %115 = nn.mcutruncate(%114) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), int8] */;
  %122 = mcumean(%121, axis=[2, 3], keepdims=True) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %123 = nn.mcuconv2d(%122, %v18_weight, %v18_bias, %v18_zero_x, %v18_zero_y, %v18_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %124 = nn.mcutruncate(%123) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %125 = reshape(%124, newshape=[0, 0]) /* from_string */ /* ty=Tensor[(1, 10), int8] */;
  %126 = cast(%125, dtype="float32") /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %127 = nn.log_softmax(%126) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %128 = greater_equal(%123, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %129 = less_equal(%123, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %130 = ones(shape=[], dtype="float32") /* from_string */ /* ty=float32 */;
  %131 = negative(%130) /* from_string */ /* ty=float32 */;
  %132 = multiply(%131, %label) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %133 = sum(%132, axis=[-1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1), float32] */;
  %134 = exp(%127) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %135 = multiply(%133, %134) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %136 = subtract(%132, %135) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %137 = multiply(%128, %129) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %138 = reshape(%136, newshape=[1, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %139 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %140 = where(%137, %138, %139) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %141 = cast(%140, dtype="int32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %142 = reshape(%122, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %143 = tile(%140, reps=[1, 112, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %144 = cast(%142, dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %145 = reshape(%143, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(1120, 1, 1, 1), float32] */;
  %146 = nn.conv2d(%144, %145, padding=[0, 0, 0, 0], groups=112, out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %147 = reshape(%146, newshape=[1, 112, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 112, 10, 1, 1), float32] */;
  %148 = sum(%147, axis=[0]) /* from_string */ /* ty=Tensor[(112, 10, 1, 1), float32] */;
  %149 = transpose(%148, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %150 = abs(%149) /* from_string */ /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %151 = max(%150, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %152 = divide(%151, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %153 = divide(%149, %152) /* from_string */ /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %154 = greater_equal(%120, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %155 = less_equal(%120, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %156 = cast(%v18_weight, dtype="float32") /* from_string */ /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %157 = nn.conv2d_transpose(%140, %156, channels=112, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %158 = abs(%157) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %159 = max(%158, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %160 = divide(%159, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %161 = divide(%157, %160) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %162 = cast(%161, dtype="int8") /* from_string */ /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %163 = cast(%162, dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %164 = multiply(%163, 0.0625f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %165 = ones(shape=[1, 112, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %166 = multiply(%154, %155) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %167 = multiply(%164, %165) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %168 = zeros(shape=[1, 112, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %169 = where(%166, %167, %168) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %170 = cast(%169, dtype="int32") /* from_string */ /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %171 = greater_equal(%118, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %172 = less_equal(%118, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %173 = cast(%v17_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %174 = nn.conv2d_transpose(%169, %173, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %175 = abs(%174) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %176 = max(%175, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %177 = divide(%176, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %178 = divide(%174, %177) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %179 = multiply(%171, %172) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %180 = cast(%178, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %181 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %182 = where(%179, %180, %181) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %183 = cast(%182, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %184 = greater_equal(%116, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %185 = less_equal(%116, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %186 = nn.conv2d_transpose(%182, %v17_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %187 = abs(%186) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %188 = max(%187, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %189 = divide(%188, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %190 = divide(%186, %189) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %191 = multiply(%184, %185) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %192 = cast(%190, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %193 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %194 = where(%191, %192, %193) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %195 = cast(%194, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %196 = tile(%194, reps=[1, 56, 1, 1]) /* from_string */ /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %197 = reshape(%115, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %198 = reshape(%196, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %199 = nn.conv2d(%197, %198, padding=[0, 0, 0, 0], groups=56, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %200 = reshape(%199, newshape=[1, 56, 336, 1, 1]) /* from_string */ /* ty=Tensor[(1, 56, 336, 1, 1), int32] */;
  %201 = sum(%200, axis=[0]) /* from_string */ /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %202 = transpose(%201, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %203 = abs(%202) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %204 = max(%203, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %205 = divide(%204, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %206 = divide(%202, %205) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %207 = greater_equal(%112, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %208 = less_equal(%112, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %209 = greater_equal(%114, meta[relay.Constant][0] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %210 = less_equal(%114, meta[relay.Constant][1] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %211 = nn.conv2d_transpose(%194, %v17_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %212 = abs(%211) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %213 = max(%212, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %214 = divide(%213, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %215 = divide(%211, %214) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %216 = multiply(%209, %210) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %217 = cast(%215, dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %218 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %219 = where(%216, %217, %218) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %220 = cast(%219, dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %221 = reshape(%v16_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %222 = divide(%220, %221) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %223 = reshape(%v16_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %224 = multiply(%222, %223) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %225 = multiply(%207, %208) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %226 = cast(%224, dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %227 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %228 = where(%225, %226, %227) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %229 = cast(%228, dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %230 = greater_equal(%110, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %231 = less_equal(%110, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %232 = nn.conv2d_transpose(%228, %v16_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %233 = abs(%232) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %234 = max(%233, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %235 = divide(%234, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %236 = divide(%232, %235) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %237 = multiply(%230, %231) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %238 = cast(%236, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %239 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %240 = where(%237, %238, %239) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %241 = cast(%240, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %242 = greater_equal(%108, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %243 = less_equal(%108, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %244 = nn.conv2d_transpose(%240, %v16_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %245 = abs(%244) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %246 = max(%245, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %247 = divide(%246, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %248 = divide(%244, %247) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %249 = multiply(%242, %243) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %250 = cast(%248, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %251 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %252 = where(%249, %250, %251) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %253 = cast(%252, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %254 = strided_slice(%107, begin=[0, 0, 0, 0], end=[1, 28, 4, 4], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 28, 4, 4), int8] */;
  %255 = tile(%252, reps=[1, 28, 1, 1]) /* from_string */ /* ty=Tensor[(1, 9408, 4, 4), int8] */;
  %256 = reshape(%254, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 28, 4, 4), int8] */;
  %257 = reshape(%255, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(9408, 1, 4, 4), int8] */;
  %258 = nn.conv2d(%256, %257, padding=[0, 0, 0, 0], groups=28, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 9408, 1, 1), int32] */;
  %259 = reshape(%258, newshape=[1, 28, 336, 1, 1]) /* from_string */ /* ty=Tensor[(1, 28, 336, 1, 1), int32] */;
  %260 = sum(%259, axis=[0]) /* from_string */ /* ty=Tensor[(28, 336, 1, 1), int32] */;
  %261 = transpose(%260, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(336, 28, 1, 1), int32] */;
  %262 = abs(%261) /* from_string */ /* ty=Tensor[(336, 28, 1, 1), int32] */;
  %263 = max(%262, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %264 = divide(%263, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %265 = divide(%261, %264) /* from_string */ /* ty=Tensor[(336, 28, 1, 1), int32] */;
  %266 = greater_equal(%104, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %267 = less_equal(%104, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %268 = greater_equal(%106, meta[relay.Constant][2] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %269 = less_equal(%106, meta[relay.Constant][3] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %270 = nn.conv2d_transpose(%252, %v16_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %271 = abs(%270) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %272 = max(%271, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %273 = divide(%272, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %274 = divide(%270, %273) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %275 = multiply(%268, %269) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %276 = cast(%274, dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %277 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %278 = where(%275, %276, %277) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %279 = cast(%278, dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %280 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %281 = divide(%279, %280) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %282 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %283 = multiply(%281, %282) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %284 = multiply(%266, %267) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %285 = cast(%283, dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %286 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %287 = where(%284, %285, %286) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %288 = cast(%287, dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %289 = greater_equal(%102, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %290 = less_equal(%102, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %291 = nn.conv2d_transpose(%287, %v15_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %292 = abs(%291) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %293 = max(%292, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %294 = divide(%293, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %295 = divide(%291, %294) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %296 = multiply(%289, %290) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %297 = cast(%295, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %298 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %299 = where(%296, %297, %298) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %300 = cast(%299, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %301 = greater_equal(%100, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %302 = less_equal(%100, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %303 = nn.conv2d_transpose(%299, %v15_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %304 = abs(%303) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %305 = max(%304, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %306 = divide(%305, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %307 = divide(%303, %306) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %308 = multiply(%301, %302) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %309 = cast(%307, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %310 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %311 = where(%308, %309, %310) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %312 = cast(%311, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %313 = strided_slice(%99, begin=[0, 0, 0, 0], end=[1, 7, 4, 4], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 7, 4, 4), int8] */;
  %314 = tile(%311, reps=[1, 7, 1, 1]) /* from_string */ /* ty=Tensor[(1, 2352, 4, 4), int8] */;
  %315 = reshape(%313, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 7, 4, 4), int8] */;
  %316 = reshape(%314, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(2352, 1, 4, 4), int8] */;
  %317 = nn.conv2d(%315, %316, padding=[0, 0, 0, 0], groups=7, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 2352, 1, 1), int32] */;
  %318 = reshape(%317, newshape=[1, 7, 336, 1, 1]) /* from_string */ /* ty=Tensor[(1, 7, 336, 1, 1), int32] */;
  %319 = sum(%318, axis=[0]) /* from_string */ /* ty=Tensor[(7, 336, 1, 1), int32] */;
  %320 = transpose(%319, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %321 = abs(%320) /* from_string */ /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %322 = max(%321, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %323 = divide(%322, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %324 = divide(%320, %323) /* from_string */ /* ty=Tensor[(336, 7, 1, 1), int32] */;
  %325 = greater_equal(%98, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %326 = less_equal(%98, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %327 = nn.conv2d_transpose(%311, %v15_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %328 = abs(%327) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %329 = max(%328, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %330 = divide(%329, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %331 = divide(%327, %330) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %332 = multiply(%325, %326) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %333 = cast(%331, dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %334 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %335 = where(%332, %333, %334) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %336 = cast(%335, dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %337 = greater_equal(%96, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %338 = less_equal(%96, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %339 = nn.conv2d_transpose(%335, %v14_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %340 = abs(%339) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %341 = max(%340, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %342 = divide(%341, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %343 = divide(%339, %342) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %344 = multiply(%337, %338) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %345 = cast(%343, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %346 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %347 = where(%344, %345, %346) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %348 = cast(%347, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %349 = greater_equal(%94, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %350 = less_equal(%94, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %351 = nn.conv2d_transpose(%347, %v14_conv_1_weight, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %352 = abs(%351) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %353 = max(%352, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %354 = divide(%353, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %355 = divide(%351, %354) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %356 = multiply(%349, %350) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %357 = cast(%355, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %358 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %359 = where(%356, %357, %358) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %360 = cast(%359, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %361 = tile(%359, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %362 = reshape(%93, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %363 = reshape(%361, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %364 = nn.conv2d(%362, %363, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %365 = reshape(%364, newshape=[1, 32, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %366 = sum(%365, axis=[0]) /* from_string */ /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %367 = transpose(%366, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %368 = abs(%367) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %369 = max(%368, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %370 = divide(%369, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %371 = divide(%367, %370) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %372 = greater_equal(%90, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %373 = less_equal(%90, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %374 = greater_equal(%92, meta[relay.Constant][4] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %375 = less_equal(%92, meta[relay.Constant][5] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %376 = nn.conv2d_transpose(%359, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %377 = abs(%376) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %378 = max(%377, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %379 = divide(%378, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %380 = divide(%376, %379) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %381 = multiply(%374, %375) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %382 = cast(%380, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %383 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %384 = where(%381, %382, %383) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %385 = cast(%384, dtype="float32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %386 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %387 = divide(%385, %386) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %388 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %389 = multiply(%387, %388) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %390 = multiply(%372, %373) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %391 = cast(%389, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %392 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %393 = where(%390, %391, %392) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %394 = cast(%393, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %395 = greater_equal(%88, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %396 = less_equal(%88, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %397 = nn.conv2d_transpose(%393, %v13_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %398 = abs(%397) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %399 = max(%398, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %400 = divide(%399, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %401 = divide(%397, %400) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %402 = multiply(%395, %396) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %403 = cast(%401, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %404 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %405 = where(%402, %403, %404) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %406 = cast(%405, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %407 = greater_equal(%86, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %408 = less_equal(%86, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %409 = nn.conv2d_transpose(%405, %v13_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %410 = abs(%409) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %411 = max(%410, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %412 = divide(%411, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %413 = divide(%409, %412) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %414 = multiply(%407, %408) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %415 = cast(%413, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %416 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %417 = where(%414, %415, %416) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %418 = cast(%417, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %419 = tile(%417, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %420 = reshape(%85, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %421 = reshape(%419, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %422 = nn.conv2d(%420, %421, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %423 = reshape(%422, newshape=[1, 32, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %424 = sum(%423, axis=[0]) /* from_string */ /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %425 = transpose(%424, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %426 = abs(%425) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %427 = max(%426, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %428 = divide(%427, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %429 = divide(%425, %428) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %430 = greater_equal(%82, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %431 = less_equal(%82, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %432 = greater_equal(%84, meta[relay.Constant][6] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %433 = less_equal(%84, meta[relay.Constant][7] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %434 = nn.conv2d_transpose(%417, %v13_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %435 = abs(%434) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %436 = max(%435, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %437 = divide(%436, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %438 = divide(%434, %437) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %439 = multiply(%432, %433) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %440 = cast(%438, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %441 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %442 = where(%439, %440, %441) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %443 = cast(%442, dtype="float32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %444 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %445 = divide(%443, %444) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %446 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %447 = multiply(%445, %446) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %448 = multiply(%430, %431) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %449 = cast(%447, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %450 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %451 = where(%448, %449, %450) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %452 = cast(%451, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %453 = greater_equal(%80, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %454 = less_equal(%80, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %455 = nn.conv2d_transpose(%451, %v12_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %456 = abs(%455) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %457 = max(%456, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %458 = divide(%457, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %459 = divide(%455, %458) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %460 = multiply(%453, %454) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %461 = cast(%459, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %462 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %463 = where(%460, %461, %462) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %464 = cast(%463, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %465 = greater_equal(%78, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %466 = less_equal(%78, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %467 = nn.conv2d_transpose(%463, %v12_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %468 = abs(%467) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %469 = max(%468, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %470 = divide(%469, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %471 = divide(%467, %470) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %472 = multiply(%465, %466) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %473 = cast(%471, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %474 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %475 = where(%472, %473, %474) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %476 = cast(%475, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %477 = tile(%475, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %478 = reshape(%77, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %479 = reshape(%477, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %480 = nn.conv2d(%478, %479, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %481 = reshape(%480, newshape=[1, 32, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %482 = sum(%481, axis=[0]) /* from_string */ /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %483 = transpose(%482, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %484 = abs(%483) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %485 = max(%484, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %486 = divide(%485, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %487 = divide(%483, %486) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %488 = greater_equal(%76, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %489 = less_equal(%76, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %490 = nn.conv2d_transpose(%475, %v12_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %491 = abs(%490) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %492 = max(%491, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %493 = divide(%492, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %494 = divide(%490, %493) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %495 = multiply(%488, %489) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %496 = cast(%494, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %497 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %498 = where(%495, %496, %497) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %499 = cast(%498, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %500 = greater_equal(%74, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %501 = less_equal(%74, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %502 = nn.conv2d_transpose(%498, %v11_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %503 = abs(%502) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %504 = max(%503, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %505 = divide(%504, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %506 = divide(%502, %505) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %507 = multiply(%500, %501) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %508 = cast(%506, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %509 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %510 = where(%507, %508, %509) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %511 = cast(%510, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %512 = greater_equal(%72, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %513 = less_equal(%72, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %514 = nn.conv2d_transpose(%510, %v11_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %515 = abs(%514) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %516 = max(%515, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %517 = divide(%516, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %518 = divide(%514, %517) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %519 = multiply(%512, %513) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %520 = cast(%518, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %521 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %522 = where(%519, %520, %521) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %523 = cast(%522, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %524 = tile(%522, reps=[1, 24, 1, 1]) /* from_string */ /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %525 = reshape(%71, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %526 = reshape(%524, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %527 = nn.conv2d(%525, %526, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %528 = reshape(%527, newshape=[1, 24, 144, 1, 1]) /* from_string */ /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %529 = sum(%528, axis=[0]) /* from_string */ /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %530 = transpose(%529, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %531 = abs(%530) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %532 = max(%531, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %533 = divide(%532, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %534 = divide(%530, %533) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %535 = greater_equal(%68, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %536 = less_equal(%68, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %537 = greater_equal(%70, meta[relay.Constant][8] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %538 = less_equal(%70, meta[relay.Constant][9] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %539 = nn.conv2d_transpose(%522, %v11_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %540 = abs(%539) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %541 = max(%540, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %542 = divide(%541, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %543 = divide(%539, %542) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %544 = multiply(%537, %538) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %545 = cast(%543, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %546 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %547 = where(%544, %545, %546) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %548 = cast(%547, dtype="float32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %549 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %550 = divide(%548, %549) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %551 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %552 = multiply(%550, %551) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %553 = multiply(%535, %536) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %554 = cast(%552, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %555 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %556 = where(%553, %554, %555) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %557 = cast(%556, dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %558 = greater_equal(%66, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %559 = less_equal(%66, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %560 = nn.conv2d_transpose(%556, %v10_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %561 = abs(%560) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %562 = max(%561, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %563 = divide(%562, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %564 = divide(%560, %563) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %565 = multiply(%558, %559) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %566 = cast(%564, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %567 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %568 = where(%565, %566, %567) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %569 = cast(%568, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %570 = greater_equal(%64, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %571 = less_equal(%64, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %572 = nn.conv2d_transpose(%568, %v10_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %573 = abs(%572) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %574 = max(%573, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %575 = divide(%574, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %576 = divide(%572, %575) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %577 = multiply(%570, %571) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %578 = cast(%576, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %579 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %580 = where(%577, %578, %579) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %581 = cast(%580, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %582 = tile(%580, reps=[1, 24, 1, 1]) /* from_string */ /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %583 = reshape(%63, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %584 = reshape(%582, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %585 = nn.conv2d(%583, %584, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %586 = reshape(%585, newshape=[1, 24, 144, 1, 1]) /* from_string */ /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %587 = sum(%586, axis=[0]) /* from_string */ /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %588 = transpose(%587, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %589 = abs(%588) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %590 = max(%589, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %591 = divide(%590, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %592 = divide(%588, %591) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %593 = greater_equal(%60, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %594 = less_equal(%60, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %595 = greater_equal(%62, meta[relay.Constant][10] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %596 = less_equal(%62, meta[relay.Constant][11] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %597 = nn.conv2d_transpose(%580, %v10_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %598 = abs(%597) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %599 = max(%598, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %600 = divide(%599, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %601 = divide(%597, %600) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %602 = multiply(%595, %596) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %603 = cast(%601, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %604 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %605 = where(%602, %603, %604) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %606 = cast(%605, dtype="float32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %607 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %608 = divide(%606, %607) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %609 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %610 = multiply(%608, %609) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %611 = multiply(%593, %594) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %612 = cast(%610, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %613 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %614 = where(%611, %612, %613) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %615 = cast(%614, dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %616 = nn.cross_entropy_with_logits(%127, %label) /* from_string */ /* ty=float32 */;
  %617 = sum(%141, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(10), int32] */;
  %618 = cast(%153, dtype="int8") /* from_string */ /* ty=Tensor[(10, 112, 1, 1), int8] */;
  %619 = sum(%170, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(112), int32] */;
  %620 = sum(%183, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %621 = sum(%195, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %622 = cast(%206, dtype="int8") /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int8] */;
  %623 = sum(%229, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(56), int32] */;
  %624 = sum(%241, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %625 = sum(%253, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %626 = cast(%265, dtype="int8") /* from_string */ /* ty=Tensor[(336, 28, 1, 1), int8] */;
  %627 = sum(%288, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(56), int32] */;
  %628 = sum(%300, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %629 = sum(%312, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %630 = cast(%324, dtype="int8") /* from_string */ /* ty=Tensor[(336, 7, 1, 1), int8] */;
  %631 = sum(%336, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(56), int32] */;
  %632 = sum(%348, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %633 = sum(%360, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %634 = cast(%371, dtype="int8") /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %635 = sum(%394, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %636 = sum(%406, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %637 = sum(%418, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %638 = cast(%429, dtype="int8") /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %639 = sum(%452, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %640 = sum(%464, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %641 = sum(%476, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %642 = cast(%487, dtype="int8") /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %643 = sum(%499, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %644 = sum(%511, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %645 = sum(%523, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %646 = cast(%534, dtype="int8") /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %647 = sum(%557, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(24), int32] */;
  %648 = sum(%569, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %649 = sum(%581, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %650 = cast(%592, dtype="int8") /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %651 = sum(%615, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(24), int32] */;
  (%616, %617, %618, %619, %620, %621, %622, %623, %624, %625, %626, %627, %628, %629, %630, %631, %632, %633, %634, %635, %636, %637, %638, %639, %640, %641, %642, %643, %644, %645, %646, %647, %648, %649, %650, %651)
}
