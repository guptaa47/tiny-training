fn (%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(24, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(24), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(24), float32], %v2_conv_1_weight: Tensor[(24, 1, 5, 5), int8], %v2_conv_1_bias: Tensor[(24), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(24), float32], %v2_conv_2_weight: Tensor[(16, 24, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(48), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(48), float32], %v5_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(48), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(48), float32], %v5_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(48), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(48), float32], %v6_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v6_conv_1_bias: Tensor[(48), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(48), float32], %v6_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(48), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(48), float32], %v7_conv_1_weight: Tensor[(48, 1, 5, 5), int8], %v7_conv_1_bias: Tensor[(48), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(48), float32], %v7_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v7_conv_2_bias: Tensor[(16), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(16), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v8_conv_0_bias: Tensor[(96), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(96), float32], %v8_conv_1_weight: Tensor[(96, 1, 7, 7), int8], %v8_conv_1_bias: Tensor[(96), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(96), float32], %v8_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v9_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(72), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(72), float32], %v9_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v9_conv_1_bias: Tensor[(72), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(72), float32], %v9_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(72), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(72), float32], %v10_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v10_conv_1_bias: Tensor[(72), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(72), float32], %v10_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(72, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(72), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(72), float32], %v11_conv_1_weight: Tensor[(72, 1, 5, 5), int8], %v11_conv_1_bias: Tensor[(72), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(72), float32], %v11_conv_2_weight: Tensor[(24, 72, 1, 1), int8], %v11_conv_2_bias: Tensor[(24), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(24), float32], %v11_qadd_zero_x1: Tensor[(1), int8], %v11_qadd_zero_x2: Tensor[(1), int8], %v11_qadd_scale_x1: Tensor[(1), float32], %v11_qadd_scale_x2: Tensor[(1), float32], %v11_qadd_zero_y: Tensor[(1), int8], %v11_qadd_scale_y: Tensor[(1), float32], %v12_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v12_conv_0_bias: Tensor[(144), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(144), float32], %v12_conv_1_weight: Tensor[(144, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(144), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(144), float32], %v12_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v13_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(96), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(96), float32], %v13_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(96), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(96), float32], %v13_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(96), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(96), float32], %v14_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v14_conv_1_bias: Tensor[(96), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(96), float32], %v14_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v14_conv_2_bias: Tensor[(32), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(32), float32], %v14_qadd_zero_x1: Tensor[(1), int8], %v14_qadd_zero_x2: Tensor[(1), int8], %v14_qadd_scale_x1: Tensor[(1), float32], %v14_qadd_scale_x2: Tensor[(1), float32], %v14_qadd_zero_y: Tensor[(1), int8], %v14_qadd_scale_y: Tensor[(1), float32], %v15_conv_0_weight: Tensor[(96, 32, 1, 1), int8], %v15_conv_0_bias: Tensor[(96), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(96), float32], %v15_conv_1_weight: Tensor[(96, 1, 5, 5), int8], %v15_conv_1_bias: Tensor[(96), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(96), float32], %v15_conv_2_weight: Tensor[(32, 96, 1, 1), int8], %v15_conv_2_bias: Tensor[(32), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(32), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v16_conv_0_bias: Tensor[(192), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(192), float32], %v16_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v16_conv_1_bias: Tensor[(192), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(192), float32], %v16_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v16_conv_2_bias: Tensor[(64), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(64), float32], %v17_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v17_conv_0_bias: Tensor[(384), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(384), float32], %v17_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v17_conv_1_bias: Tensor[(384), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(384), float32], %v17_conv_2_weight: Tensor[(64, 384, 1, 1), int8], %v17_conv_2_bias: Tensor[(64), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(64), float32], %v17_qadd_zero_x1: Tensor[(1), int8], %v17_qadd_zero_x2: Tensor[(1), int8], %v17_qadd_scale_x1: Tensor[(1), float32], %v17_qadd_scale_x2: Tensor[(1), float32], %v17_qadd_zero_y: Tensor[(1), int8], %v17_qadd_scale_y: Tensor[(1), float32], %v18_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v18_conv_0_bias: Tensor[(192), int32], %v18_conv_0_zero_x: Tensor[(1), int8], %v18_conv_0_zero_y: Tensor[(1), int8], %v18_conv_0_scale: Tensor[(192), float32], %v18_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v18_conv_1_bias: Tensor[(192), int32], %v18_conv_1_zero_x: Tensor[(1), int8], %v18_conv_1_zero_y: Tensor[(1), int8], %v18_conv_1_scale: Tensor[(192), float32], %v18_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v18_conv_2_bias: Tensor[(64), int32], %v18_conv_2_zero_x: Tensor[(1), int8], %v18_conv_2_zero_y: Tensor[(1), int8], %v18_conv_2_scale: Tensor[(64), float32], %v18_qadd_zero_x1: Tensor[(1), int8], %v18_qadd_zero_x2: Tensor[(1), int8], %v18_qadd_scale_x1: Tensor[(1), float32], %v18_qadd_scale_x2: Tensor[(1), float32], %v18_qadd_zero_y: Tensor[(1), int8], %v18_qadd_scale_y: Tensor[(1), float32], %v19_conv_0_weight: Tensor[(192, 64, 1, 1), int8], %v19_conv_0_bias: Tensor[(192), int32], %v19_conv_0_zero_x: Tensor[(1), int8], %v19_conv_0_zero_y: Tensor[(1), int8], %v19_conv_0_scale: Tensor[(192), float32], %v19_conv_1_weight: Tensor[(192, 1, 7, 7), int8], %v19_conv_1_bias: Tensor[(192), int32], %v19_conv_1_zero_x: Tensor[(1), int8], %v19_conv_1_zero_y: Tensor[(1), int8], %v19_conv_1_scale: Tensor[(192), float32], %v19_conv_2_weight: Tensor[(64, 192, 1, 1), int8], %v19_conv_2_bias: Tensor[(64), int32], %v19_conv_2_zero_x: Tensor[(1), int8], %v19_conv_2_zero_y: Tensor[(1), int8], %v19_conv_2_scale: Tensor[(64), float32], %v19_qadd_zero_x1: Tensor[(1), int8], %v19_qadd_zero_x2: Tensor[(1), int8], %v19_qadd_scale_x1: Tensor[(1), float32], %v19_qadd_scale_x2: Tensor[(1), float32], %v19_qadd_zero_y: Tensor[(1), int8], %v19_qadd_scale_y: Tensor[(1), float32], %v20_conv_0_weight: Tensor[(384, 64, 1, 1), int8], %v20_conv_0_bias: Tensor[(384), int32], %v20_conv_0_zero_x: Tensor[(1), int8], %v20_conv_0_zero_y: Tensor[(1), int8], %v20_conv_0_scale: Tensor[(384), float32], %v20_conv_1_weight: Tensor[(384, 1, 7, 7), int8], %v20_conv_1_bias: Tensor[(384), int32], %v20_conv_1_zero_x: Tensor[(1), int8], %v20_conv_1_zero_y: Tensor[(1), int8], %v20_conv_1_scale: Tensor[(384), float32], %v20_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v20_conv_2_bias: Tensor[(96), int32], %v20_conv_2_zero_x: Tensor[(1), int8], %v20_conv_2_zero_y: Tensor[(1), int8], %v20_conv_2_scale: Tensor[(96), float32], %v21_weight: Tensor[(10, 96, 1, 1), int8], %v21_bias: Tensor[(10), int32], %v21_zero_x: Tensor[(1), int8], %v21_zero_y: Tensor[(1), int8], %v21_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(384, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(384, 64, 1, 1), int8], Tensor[(64), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(96, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(24), int32], Tensor[(72), int32], Tensor[(72), int32], Tensor[(24), int32], Tensor[(72), int32], Tensor[(72), int32], Tensor[(24), int32], Tensor[(72), int32], Tensor[(72), int32], Tensor[(24), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(16), int32], Tensor[(48), int32], Tensor[(48), int32], Tensor[(16), int32], Tensor[(48), int32], Tensor[(48), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* from_string */ /* ty=Tensor[(1, 24, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[2, 2, 2, 2], groups=24) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[2, 2, 2, 2], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %45 = nn.mcutruncate(%44) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %47 = nn.mcutruncate(%46) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %48 = nn.mcuadd(%41, %47, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %49 = nn.mcutruncate(%48) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %51 = nn.mcutruncate(%50) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[2, 2, 2, 2], groups=72) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %78 = nn.mcuadd(%71, %77, %v11_qadd_zero_x1, %v11_qadd_zero_x2, %v11_qadd_scale_x1, %v11_qadd_scale_x2, %v11_qadd_zero_y, %v11_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %79 = nn.mcutruncate(%78) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %84 = nn.mcuconv2d(%83, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %85 = nn.mcutruncate(%84) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %97 = nn.mcutruncate(%96) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %99 = nn.mcutruncate(%98) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %100 = nn.mcuadd(%93, %99, %v14_qadd_zero_x1, %v14_qadd_zero_x2, %v14_qadd_scale_x1, %v14_qadd_scale_x2, %v14_qadd_zero_y, %v14_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %101 = nn.mcutruncate(%100) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %103 = nn.mcutruncate(%102) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[2, 2, 2, 2], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %105 = nn.mcutruncate(%104) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %106 = nn.mcuconv2d(%105, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %107 = nn.mcutruncate(%106) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %108 = nn.mcuadd(%101, %107, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %109 = nn.mcutruncate(%108) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %111 = nn.mcutruncate(%110) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %114 = nn.mcuconv2d(%113, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %115 = nn.mcutruncate(%114) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %122 = nn.mcuadd(%115, %121, %v17_qadd_zero_x1, %v17_qadd_zero_x2, %v17_qadd_scale_x1, %v17_qadd_scale_x2, %v17_qadd_zero_y, %v17_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %123 = nn.mcutruncate(%122) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %124 = nn.mcuconv2d(%123, %v18_conv_0_weight, %v18_conv_0_bias, %v18_conv_0_zero_x, %v18_conv_0_zero_y, %v18_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %125 = nn.mcutruncate(%124) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %126 = nn.mcuconv2d(%125, %v18_conv_1_weight, %v18_conv_1_bias, %v18_conv_1_zero_x, %v18_conv_1_zero_y, %v18_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %127 = nn.mcutruncate(%126) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %128 = nn.mcuconv2d(%127, %v18_conv_2_weight, %v18_conv_2_bias, %v18_conv_2_zero_x, %v18_conv_2_zero_y, %v18_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %129 = nn.mcutruncate(%128) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %130 = nn.mcuadd(%123, %129, %v18_qadd_zero_x1, %v18_qadd_zero_x2, %v18_qadd_scale_x1, %v18_qadd_scale_x2, %v18_qadd_zero_y, %v18_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %131 = nn.mcutruncate(%130) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %132 = nn.mcuconv2d(%131, %v19_conv_0_weight, %v19_conv_0_bias, %v19_conv_0_zero_x, %v19_conv_0_zero_y, %v19_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %133 = nn.mcutruncate(%132) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %134 = nn.mcuconv2d(%133, %v19_conv_1_weight, %v19_conv_1_bias, %v19_conv_1_zero_x, %v19_conv_1_zero_y, %v19_conv_1_scale, padding=[3, 3, 3, 3], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %135 = nn.mcutruncate(%134) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %136 = nn.mcuconv2d(%135, %v19_conv_2_weight, %v19_conv_2_bias, %v19_conv_2_zero_x, %v19_conv_2_zero_y, %v19_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %137 = nn.mcutruncate(%136) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %138 = nn.mcuadd(%131, %137, %v19_qadd_zero_x1, %v19_qadd_zero_x2, %v19_qadd_scale_x1, %v19_qadd_scale_x2, %v19_qadd_zero_y, %v19_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %139 = nn.mcutruncate(%138) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %140 = nn.mcuconv2d(%139, %v20_conv_0_weight, %v20_conv_0_bias, %v20_conv_0_zero_x, %v20_conv_0_zero_y, %v20_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %141 = nn.mcutruncate(%140) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %142 = nn.mcuconv2d(%141, %v20_conv_1_weight, %v20_conv_1_bias, %v20_conv_1_zero_x, %v20_conv_1_zero_y, %v20_conv_1_scale, padding=[3, 3, 3, 3], groups=384) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %143 = nn.mcutruncate(%142) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %144 = nn.mcuconv2d(%143, %v20_conv_2_weight, %v20_conv_2_bias, %v20_conv_2_zero_x, %v20_conv_2_zero_y, %v20_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %145 = nn.mcutruncate(%144) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %146 = mcumean(%145, axis=[2, 3], keepdims=True) /* from_string */ /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %147 = nn.mcuconv2d(%146, %v21_weight, %v21_bias, %v21_zero_x, %v21_zero_y, %v21_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %148 = nn.mcutruncate(%147) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %149 = reshape(%148, newshape=[0, 0]) /* from_string */ /* ty=Tensor[(1, 10), int8] */;
  %150 = cast(%149, dtype="float32") /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %151 = nn.log_softmax(%150) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %152 = greater_equal(%147, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %153 = less_equal(%147, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %154 = ones(shape=[], dtype="float32") /* from_string */ /* ty=float32 */;
  %155 = negative(%154) /* from_string */ /* ty=float32 */;
  %156 = multiply(%155, %label) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %157 = sum(%156, axis=[-1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1), float32] */;
  %158 = exp(%151) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %159 = multiply(%157, %158) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %160 = subtract(%156, %159) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %161 = multiply(%152, %153) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %162 = reshape(%160, newshape=[1, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %163 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %164 = where(%161, %162, %163) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %165 = cast(%164, dtype="int32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %166 = reshape(%146, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %167 = tile(%164, reps=[1, 96, 1, 1]) /* from_string */ /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %168 = cast(%166, dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %169 = reshape(%167, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(960, 1, 1, 1), float32] */;
  %170 = nn.conv2d(%168, %169, padding=[0, 0, 0, 0], groups=96, out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 960, 1, 1), float32] */;
  %171 = reshape(%170, newshape=[1, 96, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 96, 10, 1, 1), float32] */;
  %172 = sum(%171, axis=[0]) /* from_string */ /* ty=Tensor[(96, 10, 1, 1), float32] */;
  %173 = transpose(%172, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %174 = abs(%173) /* from_string */ /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %175 = max(%174, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %176 = divide(%175, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %177 = divide(%173, %176) /* from_string */ /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %178 = greater_equal(%144, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %179 = less_equal(%144, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %180 = cast(%v21_weight, dtype="float32") /* from_string */ /* ty=Tensor[(10, 96, 1, 1), float32] */;
  %181 = nn.conv2d_transpose(%164, %180, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %182 = abs(%181) /* from_string */ /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %183 = max(%182, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %184 = divide(%183, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %185 = divide(%181, %184) /* from_string */ /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %186 = cast(%185, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 1, 1), int8] */;
  %187 = cast(%186, dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %188 = multiply(%187, 0.0625f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %189 = ones(shape=[1, 96, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %190 = multiply(%178, %179) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %191 = multiply(%188, %189) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %192 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %193 = where(%190, %191, %192) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %194 = cast(%193, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %195 = greater_equal(%142, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %196 = less_equal(%142, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %197 = cast(%v20_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %198 = nn.conv2d_transpose(%193, %197, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %199 = abs(%198) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %200 = max(%199, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %201 = divide(%200, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %202 = divide(%198, %201) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %203 = multiply(%195, %196) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %204 = cast(%202, dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %205 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %206 = where(%203, %204, %205) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %207 = cast(%206, dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %208 = greater_equal(%140, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %209 = less_equal(%140, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %210 = nn.conv2d_transpose(%206, %v20_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %211 = abs(%210) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %212 = max(%211, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %213 = divide(%212, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %214 = divide(%210, %213) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %215 = multiply(%208, %209) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %216 = cast(%214, dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %217 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %218 = where(%215, %216, %217) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %219 = cast(%218, dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %220 = tile(%218, reps=[1, 64, 1, 1]) /* from_string */ /* ty=Tensor[(1, 24576, 4, 4), int8] */;
  %221 = reshape(%139, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %222 = reshape(%220, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(24576, 1, 4, 4), int8] */;
  %223 = nn.conv2d(%221, %222, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24576, 1, 1), int32] */;
  %224 = reshape(%223, newshape=[1, 64, 384, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 384, 1, 1), int32] */;
  %225 = sum(%224, axis=[0]) /* from_string */ /* ty=Tensor[(64, 384, 1, 1), int32] */;
  %226 = transpose(%225, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %227 = abs(%226) /* from_string */ /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %228 = max(%227, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %229 = divide(%228, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %230 = divide(%226, %229) /* from_string */ /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %231 = greater_equal(%136, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %232 = less_equal(%136, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %233 = greater_equal(%138, meta[relay.Constant][0] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %234 = less_equal(%138, meta[relay.Constant][1] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %235 = nn.conv2d_transpose(%218, %v20_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %236 = abs(%235) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %237 = max(%236, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %238 = divide(%237, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %239 = divide(%235, %238) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %240 = multiply(%233, %234) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %241 = cast(%239, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %242 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %243 = where(%240, %241, %242) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %244 = cast(%243, dtype="float32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %245 = reshape(%v19_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %246 = divide(%244, %245) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %247 = reshape(%v19_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %248 = multiply(%246, %247) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %249 = multiply(%231, %232) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %250 = cast(%248, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %251 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %252 = where(%249, %250, %251) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %253 = cast(%252, dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %254 = greater_equal(%134, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %255 = less_equal(%134, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %256 = nn.conv2d_transpose(%252, %v19_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %257 = abs(%256) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %258 = max(%257, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %259 = divide(%258, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %260 = divide(%256, %259) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %261 = multiply(%254, %255) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %262 = cast(%260, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %263 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %264 = where(%261, %262, %263) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %265 = cast(%264, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %266 = greater_equal(%132, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %267 = less_equal(%132, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %268 = nn.conv2d_transpose(%264, %v19_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %269 = abs(%268) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %270 = max(%269, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %271 = divide(%270, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %272 = divide(%268, %271) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %273 = multiply(%266, %267) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %274 = cast(%272, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %275 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %276 = where(%273, %274, %275) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %277 = cast(%276, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %278 = tile(%276, reps=[1, 64, 1, 1]) /* from_string */ /* ty=Tensor[(1, 12288, 4, 4), int8] */;
  %279 = reshape(%131, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %280 = reshape(%278, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(12288, 1, 4, 4), int8] */;
  %281 = nn.conv2d(%279, %280, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 12288, 1, 1), int32] */;
  %282 = reshape(%281, newshape=[1, 64, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 192, 1, 1), int32] */;
  %283 = sum(%282, axis=[0]) /* from_string */ /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %284 = transpose(%283, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %285 = abs(%284) /* from_string */ /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %286 = max(%285, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %287 = divide(%286, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %288 = divide(%284, %287) /* from_string */ /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %289 = greater_equal(%128, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %290 = less_equal(%128, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %291 = greater_equal(%130, meta[relay.Constant][2] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %292 = less_equal(%130, meta[relay.Constant][3] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %293 = nn.conv2d_transpose(%276, %v19_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %294 = abs(%293) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %295 = max(%294, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %296 = divide(%295, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %297 = divide(%293, %296) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %298 = multiply(%291, %292) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %299 = cast(%297, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %300 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %301 = where(%298, %299, %300) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %302 = cast(%301, dtype="float32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %303 = reshape(%v18_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %304 = divide(%302, %303) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %305 = reshape(%v18_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %306 = multiply(%304, %305) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %307 = multiply(%289, %290) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %308 = cast(%306, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %309 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %310 = where(%307, %308, %309) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %311 = cast(%310, dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %312 = greater_equal(%126, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %313 = less_equal(%126, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %314 = nn.conv2d_transpose(%310, %v18_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %315 = abs(%314) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %316 = max(%315, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %317 = divide(%316, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %318 = divide(%314, %317) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %319 = multiply(%312, %313) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %320 = cast(%318, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %321 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %322 = where(%319, %320, %321) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %323 = cast(%322, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %324 = greater_equal(%124, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %325 = less_equal(%124, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %326 = nn.conv2d_transpose(%322, %v18_conv_1_weight, channels=192, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %327 = abs(%326) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %328 = max(%327, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %329 = divide(%328, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %330 = divide(%326, %329) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %331 = multiply(%324, %325) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %332 = cast(%330, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %333 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %334 = where(%331, %332, %333) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %335 = cast(%334, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %336 = tile(%334, reps=[1, 64, 1, 1]) /* from_string */ /* ty=Tensor[(1, 12288, 4, 4), int8] */;
  %337 = reshape(%123, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %338 = reshape(%336, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(12288, 1, 4, 4), int8] */;
  %339 = nn.conv2d(%337, %338, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 12288, 1, 1), int32] */;
  %340 = reshape(%339, newshape=[1, 64, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 192, 1, 1), int32] */;
  %341 = sum(%340, axis=[0]) /* from_string */ /* ty=Tensor[(64, 192, 1, 1), int32] */;
  %342 = transpose(%341, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %343 = abs(%342) /* from_string */ /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %344 = max(%343, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %345 = divide(%344, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %346 = divide(%342, %345) /* from_string */ /* ty=Tensor[(192, 64, 1, 1), int32] */;
  %347 = greater_equal(%120, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %348 = less_equal(%120, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %349 = greater_equal(%122, meta[relay.Constant][4] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %350 = less_equal(%122, meta[relay.Constant][5] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %351 = nn.conv2d_transpose(%334, %v18_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %352 = abs(%351) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %353 = max(%352, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %354 = divide(%353, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %355 = divide(%351, %354) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %356 = multiply(%349, %350) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %357 = cast(%355, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %358 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %359 = where(%356, %357, %358) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %360 = cast(%359, dtype="float32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %361 = reshape(%v17_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %362 = divide(%360, %361) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %363 = reshape(%v17_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %364 = multiply(%362, %363) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), float32] */;
  %365 = multiply(%347, %348) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %366 = cast(%364, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %367 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %368 = where(%365, %366, %367) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %369 = cast(%368, dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %370 = greater_equal(%118, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %371 = less_equal(%118, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %372 = nn.conv2d_transpose(%368, %v17_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %373 = abs(%372) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %374 = max(%373, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %375 = divide(%374, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %376 = divide(%372, %375) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %377 = multiply(%370, %371) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %378 = cast(%376, dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %379 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %380 = where(%377, %378, %379) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %381 = cast(%380, dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %382 = greater_equal(%116, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %383 = less_equal(%116, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %384 = nn.conv2d_transpose(%380, %v17_conv_1_weight, channels=384, kernel_size=[7, 7], padding=[3, 3, 3, 3], groups=384, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %385 = abs(%384) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %386 = max(%385, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %387 = divide(%386, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %388 = divide(%384, %387) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %389 = multiply(%382, %383) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %390 = cast(%388, dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %391 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %392 = where(%389, %390, %391) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %393 = cast(%392, dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %394 = tile(%392, reps=[1, 64, 1, 1]) /* from_string */ /* ty=Tensor[(1, 24576, 4, 4), int8] */;
  %395 = reshape(%115, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %396 = reshape(%394, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(24576, 1, 4, 4), int8] */;
  %397 = nn.conv2d(%395, %396, padding=[0, 0, 0, 0], groups=64, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24576, 1, 1), int32] */;
  %398 = reshape(%397, newshape=[1, 64, 384, 1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 384, 1, 1), int32] */;
  %399 = sum(%398, axis=[0]) /* from_string */ /* ty=Tensor[(64, 384, 1, 1), int32] */;
  %400 = transpose(%399, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %401 = abs(%400) /* from_string */ /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %402 = max(%401, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %403 = divide(%402, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %404 = divide(%400, %403) /* from_string */ /* ty=Tensor[(384, 64, 1, 1), int32] */;
  %405 = greater_equal(%114, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %406 = less_equal(%114, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %407 = nn.conv2d_transpose(%392, %v17_conv_0_weight, channels=64, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %408 = abs(%407) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %409 = max(%408, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %410 = divide(%409, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %411 = divide(%407, %410) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %412 = multiply(%405, %406) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), bool] */;
  %413 = cast(%411, dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %414 = zeros(shape=[1, 64, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %415 = where(%412, %413, %414) /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int8] */;
  %416 = cast(%415, dtype="int32") /* from_string */ /* ty=Tensor[(1, 64, 4, 4), int32] */;
  %417 = greater_equal(%112, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %418 = less_equal(%112, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %419 = nn.conv2d_transpose(%415, %v16_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %420 = abs(%419) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %421 = max(%420, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %422 = divide(%421, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %423 = divide(%419, %422) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %424 = multiply(%417, %418) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %425 = cast(%423, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %426 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %427 = where(%424, %425, %426) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %428 = cast(%427, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %429 = greater_equal(%110, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %430 = less_equal(%110, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %431 = nn.conv2d_transpose(%427, %v16_conv_1_weight, channels=192, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %432 = abs(%431) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %433 = max(%432, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %434 = divide(%433, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %435 = divide(%431, %434) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %436 = multiply(%429, %430) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %437 = cast(%435, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %438 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %439 = where(%436, %437, %438) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %440 = cast(%439, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %441 = tile(%439, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %442 = reshape(%109, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %443 = reshape(%441, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %444 = nn.conv2d(%442, %443, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %445 = reshape(%444, newshape=[1, 32, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %446 = sum(%445, axis=[0]) /* from_string */ /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %447 = transpose(%446, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %448 = abs(%447) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %449 = max(%448, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %450 = divide(%449, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %451 = divide(%447, %450) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %452 = greater_equal(%106, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %453 = less_equal(%106, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %454 = greater_equal(%108, meta[relay.Constant][6] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %455 = less_equal(%108, meta[relay.Constant][7] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %456 = nn.conv2d_transpose(%439, %v16_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %457 = abs(%456) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %458 = max(%457, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %459 = divide(%458, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %460 = divide(%456, %459) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %461 = multiply(%454, %455) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %462 = cast(%460, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %463 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %464 = where(%461, %462, %463) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %465 = cast(%464, dtype="float32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %466 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %467 = divide(%465, %466) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %468 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %469 = multiply(%467, %468) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %470 = multiply(%452, %453) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %471 = cast(%469, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %472 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %473 = where(%470, %471, %472) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %474 = cast(%473, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %475 = greater_equal(%104, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %476 = less_equal(%104, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %477 = nn.conv2d_transpose(%473, %v15_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %478 = abs(%477) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %479 = max(%478, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %480 = divide(%479, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %481 = divide(%477, %480) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %482 = multiply(%475, %476) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %483 = cast(%481, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %484 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %485 = where(%482, %483, %484) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %486 = cast(%485, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %487 = greater_equal(%102, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %488 = less_equal(%102, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %489 = nn.conv2d_transpose(%485, %v15_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %490 = abs(%489) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %491 = max(%490, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %492 = divide(%491, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %493 = divide(%489, %492) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %494 = multiply(%487, %488) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %495 = cast(%493, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %496 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %497 = where(%494, %495, %496) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %498 = cast(%497, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %499 = tile(%497, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %500 = reshape(%101, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %501 = reshape(%499, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %502 = nn.conv2d(%500, %501, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %503 = reshape(%502, newshape=[1, 32, 96, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %504 = sum(%503, axis=[0]) /* from_string */ /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %505 = transpose(%504, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %506 = abs(%505) /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %507 = max(%506, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %508 = divide(%507, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %509 = divide(%505, %508) /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %510 = greater_equal(%98, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %511 = less_equal(%98, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %512 = greater_equal(%100, meta[relay.Constant][8] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %513 = less_equal(%100, meta[relay.Constant][9] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %514 = nn.conv2d_transpose(%497, %v15_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %515 = abs(%514) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %516 = max(%515, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %517 = divide(%516, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %518 = divide(%514, %517) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %519 = multiply(%512, %513) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %520 = cast(%518, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %521 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %522 = where(%519, %520, %521) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %523 = cast(%522, dtype="float32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %524 = reshape(%v14_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %525 = divide(%523, %524) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %526 = reshape(%v14_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %527 = multiply(%525, %526) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %528 = multiply(%510, %511) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %529 = cast(%527, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %530 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %531 = where(%528, %529, %530) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %532 = cast(%531, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %533 = greater_equal(%96, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %534 = less_equal(%96, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %535 = nn.conv2d_transpose(%531, %v14_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %536 = abs(%535) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %537 = max(%536, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %538 = divide(%537, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %539 = divide(%535, %538) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %540 = multiply(%533, %534) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %541 = cast(%539, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %542 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %543 = where(%540, %541, %542) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %544 = cast(%543, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %545 = greater_equal(%94, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %546 = less_equal(%94, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %547 = nn.conv2d_transpose(%543, %v14_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %548 = abs(%547) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %549 = max(%548, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %550 = divide(%549, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %551 = divide(%547, %550) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %552 = multiply(%545, %546) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %553 = cast(%551, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %554 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %555 = where(%552, %553, %554) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %556 = cast(%555, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %557 = tile(%555, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %558 = reshape(%93, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %559 = reshape(%557, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %560 = nn.conv2d(%558, %559, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %561 = reshape(%560, newshape=[1, 32, 96, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %562 = sum(%561, axis=[0]) /* from_string */ /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %563 = transpose(%562, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %564 = abs(%563) /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %565 = max(%564, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %566 = divide(%565, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %567 = divide(%563, %566) /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %568 = greater_equal(%90, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %569 = less_equal(%90, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %570 = greater_equal(%92, meta[relay.Constant][10] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %571 = less_equal(%92, meta[relay.Constant][11] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %572 = nn.conv2d_transpose(%555, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %573 = abs(%572) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %574 = max(%573, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %575 = divide(%574, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %576 = divide(%572, %575) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %577 = multiply(%570, %571) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %578 = cast(%576, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %579 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %580 = where(%577, %578, %579) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %581 = cast(%580, dtype="float32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %582 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %583 = divide(%581, %582) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %584 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %585 = multiply(%583, %584) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %586 = multiply(%568, %569) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %587 = cast(%585, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %588 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %589 = where(%586, %587, %588) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %590 = cast(%589, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %591 = greater_equal(%88, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %592 = less_equal(%88, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %593 = nn.conv2d_transpose(%589, %v13_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %594 = abs(%593) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %595 = max(%594, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %596 = divide(%595, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %597 = divide(%593, %596) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %598 = multiply(%591, %592) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %599 = cast(%597, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %600 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %601 = where(%598, %599, %600) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %602 = cast(%601, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %603 = greater_equal(%86, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %604 = less_equal(%86, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %605 = nn.conv2d_transpose(%601, %v13_conv_1_weight, channels=96, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=96, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %606 = abs(%605) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %607 = max(%606, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %608 = divide(%607, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %609 = divide(%605, %608) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %610 = multiply(%603, %604) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %611 = cast(%609, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %612 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %613 = where(%610, %611, %612) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %614 = cast(%613, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %615 = tile(%613, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 3072, 8, 8), int8] */;
  %616 = reshape(%85, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %617 = reshape(%615, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(3072, 1, 8, 8), int8] */;
  %618 = nn.conv2d(%616, %617, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 3072, 1, 1), int32] */;
  %619 = reshape(%618, newshape=[1, 32, 96, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 96, 1, 1), int32] */;
  %620 = sum(%619, axis=[0]) /* from_string */ /* ty=Tensor[(32, 96, 1, 1), int32] */;
  %621 = transpose(%620, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %622 = abs(%621) /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %623 = max(%622, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %624 = divide(%623, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(96, 1, 1, 1), int32] */;
  %625 = divide(%621, %624) /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int32] */;
  %626 = greater_equal(%84, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %627 = less_equal(%84, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %628 = nn.conv2d_transpose(%613, %v13_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %629 = abs(%628) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %630 = max(%629, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %631 = divide(%630, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %632 = divide(%628, %631) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %633 = multiply(%626, %627) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %634 = cast(%632, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %635 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %636 = where(%633, %634, %635) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %637 = cast(%636, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %638 = greater_equal(%82, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %639 = less_equal(%82, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %640 = nn.conv2d_transpose(%636, %v12_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %641 = abs(%640) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %642 = max(%641, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %643 = divide(%642, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %644 = divide(%640, %643) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %645 = multiply(%638, %639) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %646 = cast(%644, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %647 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %648 = where(%645, %646, %647) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %649 = cast(%648, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %650 = greater_equal(%80, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %651 = less_equal(%80, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %652 = nn.conv2d_transpose(%648, %v12_conv_1_weight, channels=144, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=144, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %653 = abs(%652) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %654 = max(%653, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %655 = divide(%654, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %656 = divide(%652, %655) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %657 = multiply(%650, %651) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %658 = cast(%656, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %659 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %660 = where(%657, %658, %659) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %661 = cast(%660, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %662 = greater_equal(%76, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %663 = less_equal(%76, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %664 = greater_equal(%78, meta[relay.Constant][12] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %665 = less_equal(%78, meta[relay.Constant][13] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %666 = nn.conv2d_transpose(%660, %v12_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %667 = abs(%666) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %668 = max(%667, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %669 = divide(%668, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %670 = divide(%666, %669) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %671 = multiply(%664, %665) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %672 = cast(%670, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %673 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %674 = where(%671, %672, %673) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %675 = cast(%674, dtype="float32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %676 = reshape(%v11_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %677 = divide(%675, %676) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %678 = reshape(%v11_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %679 = multiply(%677, %678) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %680 = multiply(%662, %663) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %681 = cast(%679, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %682 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %683 = where(%680, %681, %682) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %684 = cast(%683, dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %685 = greater_equal(%74, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %686 = less_equal(%74, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %687 = nn.conv2d_transpose(%683, %v11_conv_2_weight, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %688 = abs(%687) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %689 = max(%688, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %690 = divide(%689, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %691 = divide(%687, %690) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %692 = multiply(%685, %686) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %693 = cast(%691, dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %694 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %695 = where(%692, %693, %694) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %696 = cast(%695, dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %697 = greater_equal(%72, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %698 = less_equal(%72, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %699 = nn.conv2d_transpose(%695, %v11_conv_1_weight, channels=72, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=72, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %700 = abs(%699) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %701 = max(%700, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %702 = divide(%701, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %703 = divide(%699, %702) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %704 = multiply(%697, %698) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %705 = cast(%703, dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %706 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %707 = where(%704, %705, %706) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %708 = cast(%707, dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %709 = greater_equal(%68, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %710 = less_equal(%68, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %711 = greater_equal(%70, meta[relay.Constant][14] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %712 = less_equal(%70, meta[relay.Constant][15] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %713 = nn.conv2d_transpose(%707, %v11_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %714 = abs(%713) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %715 = max(%714, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %716 = divide(%715, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %717 = divide(%713, %716) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %718 = multiply(%711, %712) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %719 = cast(%717, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %720 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %721 = where(%718, %719, %720) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %722 = cast(%721, dtype="float32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %723 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %724 = divide(%722, %723) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %725 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %726 = multiply(%724, %725) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %727 = multiply(%709, %710) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %728 = cast(%726, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %729 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %730 = where(%727, %728, %729) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %731 = cast(%730, dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %732 = greater_equal(%66, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %733 = less_equal(%66, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %734 = nn.conv2d_transpose(%730, %v10_conv_2_weight, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %735 = abs(%734) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %736 = max(%735, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %737 = divide(%736, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %738 = divide(%734, %737) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %739 = multiply(%732, %733) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %740 = cast(%738, dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %741 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %742 = where(%739, %740, %741) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %743 = cast(%742, dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %744 = greater_equal(%64, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %745 = less_equal(%64, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %746 = nn.conv2d_transpose(%742, %v10_conv_1_weight, channels=72, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=72, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %747 = abs(%746) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %748 = max(%747, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %749 = divide(%748, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %750 = divide(%746, %749) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %751 = multiply(%744, %745) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %752 = cast(%750, dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %753 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %754 = where(%751, %752, %753) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %755 = cast(%754, dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %756 = greater_equal(%60, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %757 = less_equal(%60, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %758 = greater_equal(%62, meta[relay.Constant][16] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %759 = less_equal(%62, meta[relay.Constant][17] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %760 = nn.conv2d_transpose(%754, %v10_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %761 = abs(%760) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %762 = max(%761, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %763 = divide(%762, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %764 = divide(%760, %763) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %765 = multiply(%758, %759) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %766 = cast(%764, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %767 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %768 = where(%765, %766, %767) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %769 = cast(%768, dtype="float32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %770 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %771 = divide(%769, %770) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %772 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %773 = multiply(%771, %772) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %774 = multiply(%756, %757) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %775 = cast(%773, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %776 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %777 = where(%774, %775, %776) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %778 = cast(%777, dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %779 = greater_equal(%58, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %780 = less_equal(%58, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %781 = nn.conv2d_transpose(%777, %v9_conv_2_weight, channels=72, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %782 = abs(%781) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %783 = max(%782, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %784 = divide(%783, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %785 = divide(%781, %784) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %786 = multiply(%779, %780) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %787 = cast(%785, dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %788 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %789 = where(%786, %787, %788) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %790 = cast(%789, dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %791 = greater_equal(%56, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %792 = less_equal(%56, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %793 = nn.conv2d_transpose(%789, %v9_conv_1_weight, channels=72, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=72, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %794 = abs(%793) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %795 = max(%794, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %796 = divide(%795, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %797 = divide(%793, %796) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %798 = multiply(%791, %792) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), bool] */;
  %799 = cast(%797, dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %800 = zeros(shape=[1, 72, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %801 = where(%798, %799, %800) /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int8] */;
  %802 = cast(%801, dtype="int32") /* from_string */ /* ty=Tensor[(1, 72, 8, 8), int32] */;
  %803 = greater_equal(%54, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %804 = less_equal(%54, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %805 = nn.conv2d_transpose(%801, %v9_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %806 = abs(%805) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %807 = max(%806, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %808 = divide(%807, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %809 = divide(%805, %808) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %810 = multiply(%803, %804) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %811 = cast(%809, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %812 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %813 = where(%810, %811, %812) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %814 = cast(%813, dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %815 = greater_equal(%52, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %816 = less_equal(%52, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %817 = nn.conv2d_transpose(%813, %v8_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %818 = abs(%817) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %819 = max(%818, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %820 = divide(%819, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %821 = divide(%817, %820) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %822 = multiply(%815, %816) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %823 = cast(%821, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %824 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %825 = where(%822, %823, %824) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %826 = cast(%825, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %827 = greater_equal(%50, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %828 = less_equal(%50, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %829 = nn.conv2d_transpose(%825, %v8_conv_1_weight, channels=96, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=96, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %830 = abs(%829) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %831 = max(%830, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %832 = divide(%831, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %833 = divide(%829, %832) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %834 = multiply(%827, %828) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %835 = cast(%833, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %836 = zeros(shape=[1, 96, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %837 = where(%834, %835, %836) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %838 = cast(%837, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %839 = greater_equal(%46, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %840 = less_equal(%46, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %841 = greater_equal(%48, meta[relay.Constant][18] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %842 = less_equal(%48, meta[relay.Constant][19] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %843 = nn.conv2d_transpose(%837, %v8_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %844 = abs(%843) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %845 = max(%844, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %846 = divide(%845, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %847 = divide(%843, %846) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %848 = multiply(%841, %842) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %849 = cast(%847, dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %850 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %851 = where(%848, %849, %850) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %852 = cast(%851, dtype="float32") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %853 = reshape(%v7_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %854 = divide(%852, %853) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %855 = reshape(%v7_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %856 = multiply(%854, %855) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %857 = multiply(%839, %840) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %858 = cast(%856, dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %859 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %860 = where(%857, %858, %859) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %861 = cast(%860, dtype="int32") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %862 = greater_equal(%44, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %863 = less_equal(%44, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %864 = nn.conv2d_transpose(%860, %v7_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %865 = abs(%864) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %866 = max(%865, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %867 = divide(%866, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %868 = divide(%864, %867) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %869 = multiply(%862, %863) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %870 = cast(%868, dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %871 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %872 = where(%869, %870, %871) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %873 = cast(%872, dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %874 = greater_equal(%42, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %875 = less_equal(%42, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %876 = nn.conv2d_transpose(%872, %v7_conv_1_weight, channels=48, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=48, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %877 = abs(%876) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %878 = max(%877, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %879 = divide(%878, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %880 = divide(%876, %879) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %881 = multiply(%874, %875) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %882 = cast(%880, dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %883 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %884 = where(%881, %882, %883) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %885 = cast(%884, dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %886 = greater_equal(%38, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %887 = less_equal(%38, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %888 = greater_equal(%40, meta[relay.Constant][20] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %889 = less_equal(%40, meta[relay.Constant][21] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %890 = nn.conv2d_transpose(%884, %v7_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %891 = abs(%890) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %892 = max(%891, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %893 = divide(%892, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %894 = divide(%890, %893) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %895 = multiply(%888, %889) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %896 = cast(%894, dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %897 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %898 = where(%895, %896, %897) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %899 = cast(%898, dtype="float32") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %900 = reshape(%v6_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %901 = divide(%899, %900) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %902 = reshape(%v6_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %903 = multiply(%901, %902) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %904 = multiply(%886, %887) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %905 = cast(%903, dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %906 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %907 = where(%904, %905, %906) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %908 = cast(%907, dtype="int32") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %909 = greater_equal(%36, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %910 = less_equal(%36, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %911 = nn.conv2d_transpose(%907, %v6_conv_2_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %912 = abs(%911) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %913 = max(%912, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %914 = divide(%913, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %915 = divide(%911, %914) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %916 = multiply(%909, %910) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %917 = cast(%915, dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %918 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %919 = where(%916, %917, %918) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %920 = cast(%919, dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %921 = greater_equal(%34, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %922 = less_equal(%34, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %923 = nn.conv2d_transpose(%919, %v6_conv_1_weight, channels=48, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=48, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %924 = abs(%923) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %925 = max(%924, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %926 = divide(%925, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %927 = divide(%923, %926) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %928 = multiply(%921, %922) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), bool] */;
  %929 = cast(%927, dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %930 = zeros(shape=[1, 48, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %931 = where(%928, %929, %930) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %932 = cast(%931, dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %933 = nn.cross_entropy_with_logits(%151, %label) /* from_string */ /* ty=float32 */;
  %934 = sum(%165, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(10), int32] */;
  %935 = cast(%177, dtype="int8") /* from_string */ /* ty=Tensor[(10, 96, 1, 1), int8] */;
  %936 = sum(%194, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %937 = sum(%207, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), int32] */;
  %938 = sum(%219, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), int32] */;
  %939 = cast(%230, dtype="int8") /* from_string */ /* ty=Tensor[(384, 64, 1, 1), int8] */;
  %940 = sum(%253, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(64), int32] */;
  %941 = sum(%265, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %942 = sum(%277, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %943 = cast(%288, dtype="int8") /* from_string */ /* ty=Tensor[(192, 64, 1, 1), int8] */;
  %944 = sum(%311, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(64), int32] */;
  %945 = sum(%323, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %946 = sum(%335, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %947 = cast(%346, dtype="int8") /* from_string */ /* ty=Tensor[(192, 64, 1, 1), int8] */;
  %948 = sum(%369, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(64), int32] */;
  %949 = sum(%381, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), int32] */;
  %950 = sum(%393, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), int32] */;
  %951 = cast(%404, dtype="int8") /* from_string */ /* ty=Tensor[(384, 64, 1, 1), int8] */;
  %952 = sum(%416, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(64), int32] */;
  %953 = sum(%428, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %954 = sum(%440, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %955 = cast(%451, dtype="int8") /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %956 = sum(%474, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %957 = sum(%486, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %958 = sum(%498, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %959 = cast(%509, dtype="int8") /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %960 = sum(%532, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %961 = sum(%544, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %962 = sum(%556, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %963 = cast(%567, dtype="int8") /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %964 = sum(%590, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %965 = sum(%602, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %966 = sum(%614, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %967 = cast(%625, dtype="int8") /* from_string */ /* ty=Tensor[(96, 32, 1, 1), int8] */;
  %968 = sum(%637, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %969 = sum(%649, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %970 = sum(%661, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %971 = sum(%684, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(24), int32] */;
  %972 = sum(%696, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(72), int32] */;
  %973 = sum(%708, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(72), int32] */;
  %974 = sum(%731, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(24), int32] */;
  %975 = sum(%743, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(72), int32] */;
  %976 = sum(%755, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(72), int32] */;
  %977 = sum(%778, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(24), int32] */;
  %978 = sum(%790, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(72), int32] */;
  %979 = sum(%802, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(72), int32] */;
  %980 = sum(%814, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(24), int32] */;
  %981 = sum(%826, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %982 = sum(%838, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %983 = sum(%861, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(16), int32] */;
  %984 = sum(%873, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(48), int32] */;
  %985 = sum(%885, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(48), int32] */;
  %986 = sum(%908, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(16), int32] */;
  %987 = sum(%920, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(48), int32] */;
  %988 = sum(%932, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(48), int32] */;
  (%933, %934, %935, %936, %937, %938, %939, %940, %941, %942, %943, %944, %945, %946, %947, %948, %949, %950, %951, %952, %953, %954, %955, %956, %957, %958, %959, %960, %961, %962, %963, %964, %965, %966, %967, %968, %969, %970, %971, %972, %973, %974, %975, %976, %977, %978, %979, %980, %981, %982, %983, %984, %985, %986, %987, %988)
}
