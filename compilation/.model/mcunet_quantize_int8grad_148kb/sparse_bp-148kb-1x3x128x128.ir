fn (%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(32, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(32), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(32), float32], %v2_conv_1_weight: Tensor[(32, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(32), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(32), float32], %v2_conv_2_weight: Tensor[(16, 32, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(24, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(24), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(24), float32], %v5_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v5_conv_0_bias: Tensor[(120), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(120), float32], %v5_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(120), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(120), float32], %v5_conv_2_weight: Tensor[(24, 120, 1, 1), int8], %v5_conv_2_bias: Tensor[(24), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(24), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v6_conv_0_bias: Tensor[(120), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(120), float32], %v6_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(120), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(120), float32], %v6_conv_2_weight: Tensor[(40, 120, 1, 1), int8], %v6_conv_2_bias: Tensor[(40), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(40), float32], %v7_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v7_conv_0_bias: Tensor[(160), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(160), float32], %v7_conv_1_weight: Tensor[(160, 1, 7, 7), int8], %v7_conv_1_bias: Tensor[(160), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(160), float32], %v7_conv_2_weight: Tensor[(40, 160, 1, 1), int8], %v7_conv_2_bias: Tensor[(40), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(40), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v8_conv_0_bias: Tensor[(160), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(160), float32], %v8_conv_1_weight: Tensor[(160, 1, 5, 5), int8], %v8_conv_1_bias: Tensor[(160), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(160), float32], %v8_conv_2_weight: Tensor[(48, 160, 1, 1), int8], %v8_conv_2_bias: Tensor[(48), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(48), float32], %v9_conv_0_weight: Tensor[(144, 48, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(48, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(48), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(48), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(192, 48, 1, 1), int8], %v10_conv_0_bias: Tensor[(192), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(192), float32], %v10_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(192), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(192), float32], %v10_conv_2_weight: Tensor[(48, 192, 1, 1), int8], %v10_conv_2_bias: Tensor[(48), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(48), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(240, 48, 1, 1), int8], %v11_conv_0_bias: Tensor[(240), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(240), float32], %v11_conv_1_weight: Tensor[(240, 1, 7, 7), int8], %v11_conv_1_bias: Tensor[(240), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(240), float32], %v11_conv_2_weight: Tensor[(96, 240, 1, 1), int8], %v11_conv_2_bias: Tensor[(96), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(96), float32], %v12_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v12_conv_0_bias: Tensor[(384), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(384), float32], %v12_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(384), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(384), float32], %v12_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v12_conv_2_bias: Tensor[(96), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(96), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v13_conv_0_bias: Tensor[(384), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(384), float32], %v13_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(384), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(384), float32], %v13_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v13_conv_2_bias: Tensor[(96), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(96), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(576, 96, 1, 1), int8], %v14_conv_0_bias: Tensor[(576), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(576), float32], %v14_conv_1_weight: Tensor[(576, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(576), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(576), float32], %v14_conv_2_weight: Tensor[(160, 576, 1, 1), int8], %v14_conv_2_bias: Tensor[(160), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(160), float32], %v15_weight: Tensor[(10, 160, 1, 1), int8], %v15_bias: Tensor[(10), int32], %v15_zero_x: Tensor[(1), int8], %v15_zero_y: Tensor[(1), int8], %v15_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 160, 1, 1), int8], Tensor[(160), int32], Tensor[(576), int32], Tensor[(576), int32], Tensor[(576, 48, 1, 1), int8], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(384, 96, 1, 1), int8], Tensor[(96), int32], Tensor[(384), int32], Tensor[(384), int32], Tensor[(96), int32], Tensor[(240), int32], Tensor[(240), int32], Tensor[(240, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 48, 1, 1), int8], Tensor[(48), int32], Tensor[(160), int32], Tensor[(160), int32], Tensor[(160, 40, 1, 1), int8], Tensor[(40), int32], Tensor[(160), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* from_string */ /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=32) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=120) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=120) /* from_string */ /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %37 = nn.mcutruncate(%36) /* from_string */ /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %39 = nn.mcutruncate(%38) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %40 = nn.mcuconv2d(%39, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %41 = nn.mcutruncate(%40) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[3, 3, 3, 3], groups=160) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %43 = nn.mcutruncate(%42) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %46 = nn.mcuadd(%39, %45, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %47 = nn.mcutruncate(%46) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[2, 2, 2, 2], groups=160) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %60 = nn.mcuadd(%53, %59, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %61 = nn.mcutruncate(%60) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %62 = nn.mcuconv2d(%61, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %63 = nn.mcutruncate(%62) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %68 = nn.mcuadd(%61, %67, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %69 = nn.mcutruncate(%68) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %70 = nn.mcuconv2d(%69, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %71 = nn.mcutruncate(%70) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=240) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %73 = nn.mcutruncate(%72) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %75 = nn.mcutruncate(%74) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %76 = nn.mcuconv2d(%75, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %77 = nn.mcutruncate(%76) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %79 = nn.mcutruncate(%78) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %81 = nn.mcutruncate(%80) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %82 = nn.mcuadd(%75, %81, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %83 = nn.mcutruncate(%82) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %84 = nn.mcuconv2d(%83, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %85 = nn.mcutruncate(%84) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %87 = nn.mcutruncate(%86) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %89 = nn.mcutruncate(%88) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %90 = nn.mcuadd(%83, %89, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %91 = nn.mcutruncate(%90) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %92 = nn.mcuconv2d(%91, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %93 = nn.mcutruncate(%92) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[1, 1, 1, 1], groups=576) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %95 = nn.mcutruncate(%94) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), int8] */;
  %98 = mcumean(%97, axis=[2, 3], keepdims=True) /* from_string */ /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %99 = nn.mcuconv2d(%98, %v15_weight, %v15_bias, %v15_zero_x, %v15_zero_y, %v15_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %100 = nn.mcutruncate(%99) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %101 = reshape(%100, newshape=[0, 0]) /* from_string */ /* ty=Tensor[(1, 10), int8] */;
  %102 = cast(%101, dtype="float32") /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %103 = nn.log_softmax(%102) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %104 = greater_equal(%99, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %105 = less_equal(%99, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %106 = ones(shape=[], dtype="float32") /* from_string */ /* ty=float32 */;
  %107 = negative(%106) /* from_string */ /* ty=float32 */;
  %108 = multiply(%107, %label) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %109 = sum(%108, axis=[-1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1), float32] */;
  %110 = exp(%103) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %111 = multiply(%109, %110) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %112 = subtract(%108, %111) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %113 = multiply(%104, %105) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %114 = reshape(%112, newshape=[1, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %115 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %116 = where(%113, %114, %115) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %117 = cast(%116, dtype="int32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %118 = reshape(%98, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %119 = tile(%116, reps=[1, 160, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %120 = cast(%118, dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %121 = reshape(%119, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(1600, 1, 1, 1), float32] */;
  %122 = nn.conv2d(%120, %121, padding=[0, 0, 0, 0], groups=160, out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %123 = reshape(%122, newshape=[1, 160, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 160, 10, 1, 1), float32] */;
  %124 = sum(%123, axis=[0]) /* from_string */ /* ty=Tensor[(160, 10, 1, 1), float32] */;
  %125 = transpose(%124, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %126 = abs(%125) /* from_string */ /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %127 = max(%126, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %128 = divide(%127, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %129 = divide(%125, %128) /* from_string */ /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %130 = greater_equal(%96, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %131 = less_equal(%96, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %132 = cast(%v15_weight, dtype="float32") /* from_string */ /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %133 = nn.conv2d_transpose(%116, %132, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %134 = abs(%133) /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %135 = max(%134, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %136 = divide(%135, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %137 = divide(%133, %136) /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %138 = cast(%137, dtype="int8") /* from_string */ /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %139 = cast(%138, dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %140 = multiply(%139, 0.0625f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %141 = ones(shape=[1, 160, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %142 = multiply(%130, %131) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %143 = multiply(%140, %141) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %144 = zeros(shape=[1, 160, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %145 = where(%142, %143, %144) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %146 = cast(%145, dtype="int32") /* from_string */ /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %147 = greater_equal(%94, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %148 = less_equal(%94, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %149 = cast(%v14_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %150 = nn.conv2d_transpose(%145, %149, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %151 = abs(%150) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %152 = max(%151, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %153 = divide(%152, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %154 = divide(%150, %153) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %155 = multiply(%147, %148) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %156 = cast(%154, dtype="int8") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %157 = zeros(shape=[1, 576, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %158 = where(%155, %156, %157) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %159 = cast(%158, dtype="int32") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %160 = greater_equal(%92, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %161 = less_equal(%92, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %162 = nn.conv2d_transpose(%158, %v14_conv_1_weight, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %163 = abs(%162) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %164 = max(%163, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %165 = divide(%164, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %166 = divide(%162, %165) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %167 = multiply(%160, %161) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %168 = cast(%166, dtype="int8") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %169 = zeros(shape=[1, 576, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %170 = where(%167, %168, %169) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %171 = cast(%170, dtype="int32") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %172 = strided_slice(%91, begin=[0, 0, 0, 0], end=[1, 48, 4, 4], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 48, 4, 4), int8] */;
  %173 = tile(%170, reps=[1, 48, 1, 1]) /* from_string */ /* ty=Tensor[(1, 27648, 4, 4), int8] */;
  %174 = reshape(%172, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 4, 4), int8] */;
  %175 = reshape(%173, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(27648, 1, 4, 4), int8] */;
  %176 = nn.conv2d(%174, %175, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 27648, 1, 1), int32] */;
  %177 = reshape(%176, newshape=[1, 48, 576, 1, 1]) /* from_string */ /* ty=Tensor[(1, 48, 576, 1, 1), int32] */;
  %178 = sum(%177, axis=[0]) /* from_string */ /* ty=Tensor[(48, 576, 1, 1), int32] */;
  %179 = transpose(%178, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(576, 48, 1, 1), int32] */;
  %180 = abs(%179) /* from_string */ /* ty=Tensor[(576, 48, 1, 1), int32] */;
  %181 = max(%180, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(576, 1, 1, 1), int32] */;
  %182 = divide(%181, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(576, 1, 1, 1), int32] */;
  %183 = divide(%179, %182) /* from_string */ /* ty=Tensor[(576, 48, 1, 1), int32] */;
  %184 = greater_equal(%88, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %185 = less_equal(%88, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %186 = greater_equal(%90, meta[relay.Constant][0] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %187 = less_equal(%90, meta[relay.Constant][1] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %188 = nn.conv2d_transpose(%170, %v14_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %189 = abs(%188) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %190 = max(%189, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %191 = divide(%190, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %192 = divide(%188, %191) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %193 = multiply(%186, %187) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %194 = cast(%192, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %195 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %196 = where(%193, %194, %195) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %197 = cast(%196, dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %198 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %199 = divide(%197, %198) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %200 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %201 = multiply(%199, %200) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %202 = multiply(%184, %185) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %203 = cast(%201, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %204 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %205 = where(%202, %203, %204) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %206 = cast(%205, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %207 = greater_equal(%86, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %208 = less_equal(%86, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %209 = nn.conv2d_transpose(%205, %v13_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %210 = abs(%209) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %211 = max(%210, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %212 = divide(%211, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %213 = divide(%209, %212) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %214 = multiply(%207, %208) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %215 = cast(%213, dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %216 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %217 = where(%214, %215, %216) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %218 = cast(%217, dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %219 = greater_equal(%84, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %220 = less_equal(%84, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %221 = nn.conv2d_transpose(%217, %v13_conv_1_weight, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %222 = abs(%221) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %223 = max(%222, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %224 = divide(%223, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %225 = divide(%221, %224) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %226 = multiply(%219, %220) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %227 = cast(%225, dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %228 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %229 = where(%226, %227, %228) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %230 = cast(%229, dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %231 = tile(%229, reps=[1, 96, 1, 1]) /* from_string */ /* ty=Tensor[(1, 36864, 4, 4), int8] */;
  %232 = reshape(%83, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %233 = reshape(%231, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(36864, 1, 4, 4), int8] */;
  %234 = nn.conv2d(%232, %233, padding=[0, 0, 0, 0], groups=96, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 36864, 1, 1), int32] */;
  %235 = reshape(%234, newshape=[1, 96, 384, 1, 1]) /* from_string */ /* ty=Tensor[(1, 96, 384, 1, 1), int32] */;
  %236 = sum(%235, axis=[0]) /* from_string */ /* ty=Tensor[(96, 384, 1, 1), int32] */;
  %237 = transpose(%236, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %238 = abs(%237) /* from_string */ /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %239 = max(%238, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %240 = divide(%239, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(384, 1, 1, 1), int32] */;
  %241 = divide(%237, %240) /* from_string */ /* ty=Tensor[(384, 96, 1, 1), int32] */;
  %242 = greater_equal(%80, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %243 = less_equal(%80, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %244 = greater_equal(%82, meta[relay.Constant][2] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %245 = less_equal(%82, meta[relay.Constant][3] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %246 = nn.conv2d_transpose(%229, %v13_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %247 = abs(%246) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %248 = max(%247, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %249 = divide(%248, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %250 = divide(%246, %249) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %251 = multiply(%244, %245) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %252 = cast(%250, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %253 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %254 = where(%251, %252, %253) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %255 = cast(%254, dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %256 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %257 = divide(%255, %256) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %258 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %259 = multiply(%257, %258) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %260 = multiply(%242, %243) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %261 = cast(%259, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %262 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %263 = where(%260, %261, %262) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %264 = cast(%263, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %265 = greater_equal(%78, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %266 = less_equal(%78, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %267 = nn.conv2d_transpose(%263, %v12_conv_2_weight, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %268 = abs(%267) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %269 = max(%268, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %270 = divide(%269, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %271 = divide(%267, %270) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %272 = multiply(%265, %266) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %273 = cast(%271, dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %274 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %275 = where(%272, %273, %274) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %276 = cast(%275, dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %277 = greater_equal(%76, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %278 = less_equal(%76, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %279 = nn.conv2d_transpose(%275, %v12_conv_1_weight, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %280 = abs(%279) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %281 = max(%280, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %282 = divide(%281, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %283 = divide(%279, %282) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %284 = multiply(%277, %278) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %285 = cast(%283, dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %286 = zeros(shape=[1, 384, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %287 = where(%284, %285, %286) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %288 = cast(%287, dtype="int32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %289 = greater_equal(%74, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %290 = less_equal(%74, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %291 = nn.conv2d_transpose(%287, %v12_conv_0_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %292 = abs(%291) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %293 = max(%292, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %294 = divide(%293, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %295 = divide(%291, %294) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %296 = multiply(%289, %290) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %297 = cast(%295, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %298 = zeros(shape=[1, 96, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %299 = where(%296, %297, %298) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %300 = cast(%299, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %301 = greater_equal(%72, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %302 = less_equal(%72, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %303 = nn.conv2d_transpose(%299, %v11_conv_2_weight, channels=240, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %304 = abs(%303) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %305 = max(%304, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %306 = divide(%305, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %307 = divide(%303, %306) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %308 = multiply(%301, %302) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %309 = cast(%307, dtype="int8") /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %310 = zeros(shape=[1, 240, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %311 = where(%308, %309, %310) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %312 = cast(%311, dtype="int32") /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %313 = greater_equal(%70, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %314 = less_equal(%70, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %315 = nn.conv2d_transpose(%311, %v11_conv_1_weight, channels=240, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=240, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %316 = abs(%315) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %317 = max(%316, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %318 = divide(%317, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %319 = divide(%315, %318) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %320 = multiply(%313, %314) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %321 = cast(%319, dtype="int8") /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %322 = zeros(shape=[1, 240, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %323 = where(%320, %321, %322) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %324 = cast(%323, dtype="int32") /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %325 = tile(%323, reps=[1, 48, 1, 1]) /* from_string */ /* ty=Tensor[(1, 11520, 8, 8), int8] */;
  %326 = reshape(%69, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %327 = reshape(%325, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(11520, 1, 8, 8), int8] */;
  %328 = nn.conv2d(%326, %327, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 11520, 1, 1), int32] */;
  %329 = reshape(%328, newshape=[1, 48, 240, 1, 1]) /* from_string */ /* ty=Tensor[(1, 48, 240, 1, 1), int32] */;
  %330 = sum(%329, axis=[0]) /* from_string */ /* ty=Tensor[(48, 240, 1, 1), int32] */;
  %331 = transpose(%330, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %332 = abs(%331) /* from_string */ /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %333 = max(%332, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(240, 1, 1, 1), int32] */;
  %334 = divide(%333, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(240, 1, 1, 1), int32] */;
  %335 = divide(%331, %334) /* from_string */ /* ty=Tensor[(240, 48, 1, 1), int32] */;
  %336 = greater_equal(%66, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %337 = less_equal(%66, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %338 = greater_equal(%68, meta[relay.Constant][4] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %339 = less_equal(%68, meta[relay.Constant][5] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %340 = nn.conv2d_transpose(%323, %v11_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %341 = abs(%340) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %342 = max(%341, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %343 = divide(%342, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %344 = divide(%340, %343) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %345 = multiply(%338, %339) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %346 = cast(%344, dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %347 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %348 = where(%345, %346, %347) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %349 = cast(%348, dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %350 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %351 = divide(%349, %350) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %352 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %353 = multiply(%351, %352) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %354 = multiply(%336, %337) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %355 = cast(%353, dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %356 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %357 = where(%354, %355, %356) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %358 = cast(%357, dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %359 = greater_equal(%64, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %360 = less_equal(%64, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %361 = nn.conv2d_transpose(%357, %v10_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %362 = abs(%361) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %363 = max(%362, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %364 = divide(%363, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %365 = divide(%361, %364) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %366 = multiply(%359, %360) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %367 = cast(%365, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %368 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %369 = where(%366, %367, %368) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %370 = cast(%369, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %371 = greater_equal(%62, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %372 = less_equal(%62, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %373 = nn.conv2d_transpose(%369, %v10_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %374 = abs(%373) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %375 = max(%374, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %376 = divide(%375, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %377 = divide(%373, %376) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %378 = multiply(%371, %372) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %379 = cast(%377, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %380 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %381 = where(%378, %379, %380) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %382 = cast(%381, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %383 = tile(%381, reps=[1, 48, 1, 1]) /* from_string */ /* ty=Tensor[(1, 9216, 8, 8), int8] */;
  %384 = reshape(%61, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %385 = reshape(%383, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(9216, 1, 8, 8), int8] */;
  %386 = nn.conv2d(%384, %385, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 9216, 1, 1), int32] */;
  %387 = reshape(%386, newshape=[1, 48, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 48, 192, 1, 1), int32] */;
  %388 = sum(%387, axis=[0]) /* from_string */ /* ty=Tensor[(48, 192, 1, 1), int32] */;
  %389 = transpose(%388, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %390 = abs(%389) /* from_string */ /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %391 = max(%390, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %392 = divide(%391, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %393 = divide(%389, %392) /* from_string */ /* ty=Tensor[(192, 48, 1, 1), int32] */;
  %394 = greater_equal(%58, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %395 = less_equal(%58, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %396 = greater_equal(%60, meta[relay.Constant][6] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %397 = less_equal(%60, meta[relay.Constant][7] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %398 = nn.conv2d_transpose(%381, %v10_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %399 = abs(%398) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %400 = max(%399, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %401 = divide(%400, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %402 = divide(%398, %401) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %403 = multiply(%396, %397) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %404 = cast(%402, dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %405 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %406 = where(%403, %404, %405) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %407 = cast(%406, dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %408 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %409 = divide(%407, %408) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %410 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %411 = multiply(%409, %410) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %412 = multiply(%394, %395) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %413 = cast(%411, dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %414 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %415 = where(%412, %413, %414) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %416 = cast(%415, dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %417 = greater_equal(%56, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %418 = less_equal(%56, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %419 = nn.conv2d_transpose(%415, %v9_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %420 = abs(%419) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %421 = max(%420, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %422 = divide(%421, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %423 = divide(%419, %422) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %424 = multiply(%417, %418) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %425 = cast(%423, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %426 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %427 = where(%424, %425, %426) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %428 = cast(%427, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %429 = greater_equal(%54, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %430 = less_equal(%54, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %431 = nn.conv2d_transpose(%427, %v9_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %432 = abs(%431) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %433 = max(%432, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %434 = divide(%433, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %435 = divide(%431, %434) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %436 = multiply(%429, %430) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %437 = cast(%435, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %438 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %439 = where(%436, %437, %438) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %440 = cast(%439, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %441 = tile(%439, reps=[1, 48, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6912, 8, 8), int8] */;
  %442 = reshape(%53, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %443 = reshape(%441, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6912, 1, 8, 8), int8] */;
  %444 = nn.conv2d(%442, %443, padding=[0, 0, 0, 0], groups=48, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6912, 1, 1), int32] */;
  %445 = reshape(%444, newshape=[1, 48, 144, 1, 1]) /* from_string */ /* ty=Tensor[(1, 48, 144, 1, 1), int32] */;
  %446 = sum(%445, axis=[0]) /* from_string */ /* ty=Tensor[(48, 144, 1, 1), int32] */;
  %447 = transpose(%446, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %448 = abs(%447) /* from_string */ /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %449 = max(%448, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %450 = divide(%449, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %451 = divide(%447, %450) /* from_string */ /* ty=Tensor[(144, 48, 1, 1), int32] */;
  %452 = greater_equal(%52, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %453 = less_equal(%52, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %454 = nn.conv2d_transpose(%439, %v9_conv_0_weight, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %455 = abs(%454) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %456 = max(%455, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %457 = divide(%456, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %458 = divide(%454, %457) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %459 = multiply(%452, %453) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %460 = cast(%458, dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %461 = zeros(shape=[1, 48, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %462 = where(%459, %460, %461) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %463 = cast(%462, dtype="int32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %464 = greater_equal(%50, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %465 = less_equal(%50, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %466 = nn.conv2d_transpose(%462, %v8_conv_2_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %467 = abs(%466) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %468 = max(%467, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %469 = divide(%468, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %470 = divide(%466, %469) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %471 = multiply(%464, %465) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %472 = cast(%470, dtype="int8") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %473 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %474 = where(%471, %472, %473) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %475 = cast(%474, dtype="int32") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %476 = greater_equal(%48, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %477 = less_equal(%48, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %478 = nn.conv2d_transpose(%474, %v8_conv_1_weight, channels=160, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=160, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %479 = abs(%478) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %480 = max(%479, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %481 = divide(%480, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %482 = divide(%478, %481) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %483 = multiply(%476, %477) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %484 = cast(%482, dtype="int8") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %485 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %486 = where(%483, %484, %485) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %487 = cast(%486, dtype="int32") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %488 = tile(%486, reps=[1, 40, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6400, 8, 8), int8] */;
  %489 = reshape(%47, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %490 = reshape(%488, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6400, 1, 8, 8), int8] */;
  %491 = nn.conv2d(%489, %490, padding=[0, 0, 0, 0], groups=40, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6400, 1, 1), int32] */;
  %492 = reshape(%491, newshape=[1, 40, 160, 1, 1]) /* from_string */ /* ty=Tensor[(1, 40, 160, 1, 1), int32] */;
  %493 = sum(%492, axis=[0]) /* from_string */ /* ty=Tensor[(40, 160, 1, 1), int32] */;
  %494 = transpose(%493, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %495 = abs(%494) /* from_string */ /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %496 = max(%495, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %497 = divide(%496, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(160, 1, 1, 1), int32] */;
  %498 = divide(%494, %497) /* from_string */ /* ty=Tensor[(160, 40, 1, 1), int32] */;
  %499 = greater_equal(%44, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %500 = less_equal(%44, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %501 = greater_equal(%46, meta[relay.Constant][8] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %502 = less_equal(%46, meta[relay.Constant][9] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %503 = nn.conv2d_transpose(%486, %v8_conv_0_weight, channels=40, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %504 = abs(%503) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %505 = max(%504, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %506 = divide(%505, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %507 = divide(%503, %506) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %508 = multiply(%501, %502) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %509 = cast(%507, dtype="int8") /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %510 = zeros(shape=[1, 40, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %511 = where(%508, %509, %510) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %512 = cast(%511, dtype="float32") /* from_string */ /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %513 = reshape(%v7_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %514 = divide(%512, %513) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %515 = reshape(%v7_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %516 = multiply(%514, %515) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), float32] */;
  %517 = multiply(%499, %500) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), bool] */;
  %518 = cast(%516, dtype="int8") /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %519 = zeros(shape=[1, 40, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %520 = where(%517, %518, %519) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %521 = cast(%520, dtype="int32") /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %522 = greater_equal(%42, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %523 = less_equal(%42, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %524 = nn.conv2d_transpose(%520, %v7_conv_2_weight, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %525 = abs(%524) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %526 = max(%525, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %527 = divide(%526, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %528 = divide(%524, %527) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %529 = multiply(%522, %523) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %530 = cast(%528, dtype="int8") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %531 = zeros(shape=[1, 160, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %532 = where(%529, %530, %531) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %533 = cast(%532, dtype="int32") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %534 = nn.cross_entropy_with_logits(%103, %label) /* from_string */ /* ty=float32 */;
  %535 = sum(%117, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(10), int32] */;
  %536 = cast(%129, dtype="int8") /* from_string */ /* ty=Tensor[(10, 160, 1, 1), int8] */;
  %537 = sum(%146, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(160), int32] */;
  %538 = sum(%159, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(576), int32] */;
  %539 = sum(%171, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(576), int32] */;
  %540 = cast(%183, dtype="int8") /* from_string */ /* ty=Tensor[(576, 48, 1, 1), int8] */;
  %541 = sum(%206, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %542 = sum(%218, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), int32] */;
  %543 = sum(%230, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), int32] */;
  %544 = cast(%241, dtype="int8") /* from_string */ /* ty=Tensor[(384, 96, 1, 1), int8] */;
  %545 = sum(%264, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %546 = sum(%276, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), int32] */;
  %547 = sum(%288, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), int32] */;
  %548 = sum(%300, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %549 = sum(%312, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(240), int32] */;
  %550 = sum(%324, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(240), int32] */;
  %551 = cast(%335, dtype="int8") /* from_string */ /* ty=Tensor[(240, 48, 1, 1), int8] */;
  %552 = sum(%358, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(48), int32] */;
  %553 = sum(%370, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %554 = sum(%382, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %555 = cast(%393, dtype="int8") /* from_string */ /* ty=Tensor[(192, 48, 1, 1), int8] */;
  %556 = sum(%416, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(48), int32] */;
  %557 = sum(%428, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %558 = sum(%440, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %559 = cast(%451, dtype="int8") /* from_string */ /* ty=Tensor[(144, 48, 1, 1), int8] */;
  %560 = sum(%463, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(48), int32] */;
  %561 = sum(%475, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(160), int32] */;
  %562 = sum(%487, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(160), int32] */;
  %563 = cast(%498, dtype="int8") /* from_string */ /* ty=Tensor[(160, 40, 1, 1), int8] */;
  %564 = sum(%521, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(40), int32] */;
  %565 = sum(%533, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(160), int32] */;
  (%534, %535, %536, %537, %538, %539, %540, %541, %542, %543, %544, %545, %546, %547, %548, %549, %550, %551, %552, %553, %554, %555, %556, %557, %558, %559, %560, %561, %562, %563, %564, %565)
}
