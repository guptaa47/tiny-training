fn (%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(48), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(48), float32], %v2_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(48), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(48), float32], %v2_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v2_conv_2_bias: Tensor[(8), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(8), float32], %v3_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(8, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(8), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(8), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 8, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(16), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(16), float32], %v5_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v5_conv_0_bias: Tensor[(96), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(96), float32], %v5_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(96), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(96), float32], %v5_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v5_conv_2_bias: Tensor[(16), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(16), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v6_conv_0_bias: Tensor[(96), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(96), float32], %v6_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(96), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(96), float32], %v6_conv_2_weight: Tensor[(16, 96, 1, 1), int8], %v6_conv_2_bias: Tensor[(16), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(16), float32], %v6_qadd_zero_x1: Tensor[(1), int8], %v6_qadd_zero_x2: Tensor[(1), int8], %v6_qadd_scale_x1: Tensor[(1), float32], %v6_qadd_scale_x2: Tensor[(1), float32], %v6_qadd_zero_y: Tensor[(1), int8], %v6_qadd_scale_y: Tensor[(1), float32], %v7_conv_0_weight: Tensor[(96, 16, 1, 1), int8], %v7_conv_0_bias: Tensor[(96), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(96), float32], %v7_conv_1_weight: Tensor[(96, 1, 3, 3), int8], %v7_conv_1_bias: Tensor[(96), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(96), float32], %v7_conv_2_weight: Tensor[(24, 96, 1, 1), int8], %v7_conv_2_bias: Tensor[(24), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(24), float32], %v8_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v8_conv_0_bias: Tensor[(144), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(144), float32], %v8_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v8_conv_1_bias: Tensor[(144), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(144), float32], %v8_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v8_conv_2_bias: Tensor[(24), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(24), float32], %v8_qadd_zero_x1: Tensor[(1), int8], %v8_qadd_zero_x2: Tensor[(1), int8], %v8_qadd_scale_x1: Tensor[(1), float32], %v8_qadd_scale_x2: Tensor[(1), float32], %v8_qadd_zero_y: Tensor[(1), int8], %v8_qadd_scale_y: Tensor[(1), float32], %v9_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(24), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(24), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v10_conv_0_bias: Tensor[(144), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(144), float32], %v10_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(144), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(144), float32], %v10_conv_2_weight: Tensor[(24, 144, 1, 1), int8], %v10_conv_2_bias: Tensor[(24), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(24), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(144, 24, 1, 1), int8], %v11_conv_0_bias: Tensor[(144), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(144), float32], %v11_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v11_conv_1_bias: Tensor[(144), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(144), float32], %v11_conv_2_weight: Tensor[(32, 144, 1, 1), int8], %v11_conv_2_bias: Tensor[(32), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(32), float32], %v12_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v12_conv_0_bias: Tensor[(192), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(192), float32], %v12_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v12_conv_1_bias: Tensor[(192), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(192), float32], %v12_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v12_conv_2_bias: Tensor[(32), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(32), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v13_conv_0_bias: Tensor[(192), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(192), float32], %v13_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v13_conv_1_bias: Tensor[(192), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(192), float32], %v13_conv_2_weight: Tensor[(32, 192, 1, 1), int8], %v13_conv_2_bias: Tensor[(32), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(32), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(192, 32, 1, 1), int8], %v14_conv_0_bias: Tensor[(192), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(192), float32], %v14_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(192), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(192), float32], %v14_conv_2_weight: Tensor[(56, 192, 1, 1), int8], %v14_conv_2_bias: Tensor[(56), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(56), float32], %v15_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v15_conv_0_bias: Tensor[(336), int32], %v15_conv_0_zero_x: Tensor[(1), int8], %v15_conv_0_zero_y: Tensor[(1), int8], %v15_conv_0_scale: Tensor[(336), float32], %v15_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v15_conv_1_bias: Tensor[(336), int32], %v15_conv_1_zero_x: Tensor[(1), int8], %v15_conv_1_zero_y: Tensor[(1), int8], %v15_conv_1_scale: Tensor[(336), float32], %v15_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v15_conv_2_bias: Tensor[(56), int32], %v15_conv_2_zero_x: Tensor[(1), int8], %v15_conv_2_zero_y: Tensor[(1), int8], %v15_conv_2_scale: Tensor[(56), float32], %v15_qadd_zero_x1: Tensor[(1), int8], %v15_qadd_zero_x2: Tensor[(1), int8], %v15_qadd_scale_x1: Tensor[(1), float32], %v15_qadd_scale_x2: Tensor[(1), float32], %v15_qadd_zero_y: Tensor[(1), int8], %v15_qadd_scale_y: Tensor[(1), float32], %v16_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v16_conv_0_bias: Tensor[(336), int32], %v16_conv_0_zero_x: Tensor[(1), int8], %v16_conv_0_zero_y: Tensor[(1), int8], %v16_conv_0_scale: Tensor[(336), float32], %v16_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v16_conv_1_bias: Tensor[(336), int32], %v16_conv_1_zero_x: Tensor[(1), int8], %v16_conv_1_zero_y: Tensor[(1), int8], %v16_conv_1_scale: Tensor[(336), float32], %v16_conv_2_weight: Tensor[(56, 336, 1, 1), int8], %v16_conv_2_bias: Tensor[(56), int32], %v16_conv_2_zero_x: Tensor[(1), int8], %v16_conv_2_zero_y: Tensor[(1), int8], %v16_conv_2_scale: Tensor[(56), float32], %v16_qadd_zero_x1: Tensor[(1), int8], %v16_qadd_zero_x2: Tensor[(1), int8], %v16_qadd_scale_x1: Tensor[(1), float32], %v16_qadd_scale_x2: Tensor[(1), float32], %v16_qadd_zero_y: Tensor[(1), int8], %v16_qadd_scale_y: Tensor[(1), float32], %v17_conv_0_weight: Tensor[(336, 56, 1, 1), int8], %v17_conv_0_bias: Tensor[(336), int32], %v17_conv_0_zero_x: Tensor[(1), int8], %v17_conv_0_zero_y: Tensor[(1), int8], %v17_conv_0_scale: Tensor[(336), float32], %v17_conv_1_weight: Tensor[(336, 1, 3, 3), int8], %v17_conv_1_bias: Tensor[(336), int32], %v17_conv_1_zero_x: Tensor[(1), int8], %v17_conv_1_zero_y: Tensor[(1), int8], %v17_conv_1_scale: Tensor[(336), float32], %v17_conv_2_weight: Tensor[(112, 336, 1, 1), int8], %v17_conv_2_bias: Tensor[(112), int32], %v17_conv_2_zero_x: Tensor[(1), int8], %v17_conv_2_zero_y: Tensor[(1), int8], %v17_conv_2_scale: Tensor[(112), float32], %v18_weight: Tensor[(10, 112, 1, 1), int8], %v18_bias: Tensor[(10), int32], %v18_zero_x: Tensor[(1), int8], %v18_zero_y: Tensor[(1), int8], %v18_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), int32], Tensor[(10, 112, 1, 1), int8], Tensor[(112), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 56, 1, 1), int8], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 56, 1, 1), int8], Tensor[(56), int32], Tensor[(336), int32], Tensor[(336), int32], Tensor[(336, 56, 1, 1), int8], Tensor[(56), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(192), int32], Tensor[(192), int32], Tensor[(192, 32, 1, 1), int8], Tensor[(32), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(144, 24, 1, 1), int8], Tensor[(24), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(24), int32], Tensor[(144), int32], Tensor[(144), int32], Tensor[(24), int32], Tensor[(96), int32], Tensor[(96), int32], Tensor[(16), int32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* from_string */ /* ty=Tensor[(1, 48, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* from_string */ /* ty=Tensor[(1, 8, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, padding=[1, 1, 1, 1], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %37 = nn.mcutruncate(%36) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %39 = nn.mcutruncate(%38) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %40 = nn.mcuadd(%33, %39, %v6_qadd_zero_x1, %v6_qadd_zero_x2, %v6_qadd_scale_x1, %v6_qadd_scale_x2, %v6_qadd_zero_y, %v6_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %41 = nn.mcutruncate(%40) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %43 = nn.mcutruncate(%42) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=96) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %46 = nn.mcuconv2d(%45, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %47 = nn.mcutruncate(%46) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %54 = nn.mcuadd(%47, %53, %v8_qadd_zero_x1, %v8_qadd_zero_x2, %v8_qadd_scale_x1, %v8_qadd_scale_x2, %v8_qadd_zero_y, %v8_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %55 = nn.mcutruncate(%54) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %60 = nn.mcuconv2d(%59, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %61 = nn.mcutruncate(%60) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %62 = nn.mcuadd(%55, %61, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %63 = nn.mcutruncate(%62) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %68 = nn.mcuconv2d(%67, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %69 = nn.mcutruncate(%68) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %70 = nn.mcuadd(%63, %69, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %71 = nn.mcutruncate(%70) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %73 = nn.mcutruncate(%72) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %75 = nn.mcutruncate(%74) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %76 = nn.mcuconv2d(%75, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %77 = nn.mcutruncate(%76) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %79 = nn.mcutruncate(%78) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %81 = nn.mcutruncate(%80) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %82 = nn.mcuconv2d(%81, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %83 = nn.mcutruncate(%82) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %84 = nn.mcuadd(%77, %83, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %85 = nn.mcutruncate(%84) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %87 = nn.mcutruncate(%86) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %89 = nn.mcutruncate(%88) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %90 = nn.mcuconv2d(%89, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %91 = nn.mcutruncate(%90) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %92 = nn.mcuadd(%85, %91, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %93 = nn.mcutruncate(%92) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %95 = nn.mcutruncate(%94) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %98 = nn.mcuconv2d(%97, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %99 = nn.mcutruncate(%98) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %100 = nn.mcuconv2d(%99, %v15_conv_0_weight, %v15_conv_0_bias, %v15_conv_0_zero_x, %v15_conv_0_zero_y, %v15_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %101 = nn.mcutruncate(%100) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %102 = nn.mcuconv2d(%101, %v15_conv_1_weight, %v15_conv_1_bias, %v15_conv_1_zero_x, %v15_conv_1_zero_y, %v15_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %103 = nn.mcutruncate(%102) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %104 = nn.mcuconv2d(%103, %v15_conv_2_weight, %v15_conv_2_bias, %v15_conv_2_zero_x, %v15_conv_2_zero_y, %v15_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %105 = nn.mcutruncate(%104) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %106 = nn.mcuadd(%99, %105, %v15_qadd_zero_x1, %v15_qadd_zero_x2, %v15_qadd_scale_x1, %v15_qadd_scale_x2, %v15_qadd_zero_y, %v15_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %107 = nn.mcutruncate(%106) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %108 = nn.mcuconv2d(%107, %v16_conv_0_weight, %v16_conv_0_bias, %v16_conv_0_zero_x, %v16_conv_0_zero_y, %v16_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %109 = nn.mcutruncate(%108) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %110 = nn.mcuconv2d(%109, %v16_conv_1_weight, %v16_conv_1_bias, %v16_conv_1_zero_x, %v16_conv_1_zero_y, %v16_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %111 = nn.mcutruncate(%110) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %112 = nn.mcuconv2d(%111, %v16_conv_2_weight, %v16_conv_2_bias, %v16_conv_2_zero_x, %v16_conv_2_zero_y, %v16_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %113 = nn.mcutruncate(%112) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %114 = nn.mcuadd(%107, %113, %v16_qadd_zero_x1, %v16_qadd_zero_x2, %v16_qadd_scale_x1, %v16_qadd_scale_x2, %v16_qadd_zero_y, %v16_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %115 = nn.mcutruncate(%114) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %116 = nn.mcuconv2d(%115, %v17_conv_0_weight, %v17_conv_0_bias, %v17_conv_0_zero_x, %v17_conv_0_zero_y, %v17_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %117 = nn.mcutruncate(%116) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %118 = nn.mcuconv2d(%117, %v17_conv_1_weight, %v17_conv_1_bias, %v17_conv_1_zero_x, %v17_conv_1_zero_y, %v17_conv_1_scale, padding=[1, 1, 1, 1], groups=336) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %119 = nn.mcutruncate(%118) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %120 = nn.mcuconv2d(%119, %v17_conv_2_weight, %v17_conv_2_bias, %v17_conv_2_zero_x, %v17_conv_2_zero_y, %v17_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %121 = nn.mcutruncate(%120) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), int8] */;
  %122 = mcumean(%121, axis=[2, 3], keepdims=True) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %123 = nn.mcuconv2d(%122, %v18_weight, %v18_bias, %v18_zero_x, %v18_zero_y, %v18_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %124 = nn.mcutruncate(%123) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %125 = reshape(%124, newshape=[0, 0]) /* from_string */ /* ty=Tensor[(1, 10), int8] */;
  %126 = cast(%125, dtype="float32") /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %127 = nn.log_softmax(%126) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %128 = greater_equal(%123, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %129 = less_equal(%123, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %130 = ones(shape=[], dtype="float32") /* from_string */ /* ty=float32 */;
  %131 = negative(%130) /* from_string */ /* ty=float32 */;
  %132 = multiply(%131, %label) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %133 = sum(%132, axis=[-1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1), float32] */;
  %134 = exp(%127) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %135 = multiply(%133, %134) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %136 = subtract(%132, %135) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %137 = multiply(%128, %129) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %138 = reshape(%136, newshape=[1, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %139 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %140 = where(%137, %138, %139) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %141 = cast(%140, dtype="int32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %142 = reshape(%122, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %143 = tile(%140, reps=[1, 112, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %144 = cast(%142, dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %145 = reshape(%143, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(1120, 1, 1, 1), float32] */;
  %146 = nn.conv2d(%144, %145, padding=[0, 0, 0, 0], groups=112, out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 1120, 1, 1), float32] */;
  %147 = reshape(%146, newshape=[1, 112, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 112, 10, 1, 1), float32] */;
  %148 = sum(%147, axis=[0]) /* from_string */ /* ty=Tensor[(112, 10, 1, 1), float32] */;
  %149 = transpose(%148, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %150 = abs(%149) /* from_string */ /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %151 = max(%150, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %152 = divide(%151, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(10, 1, 1, 1), float32] */;
  %153 = divide(%149, %152) /* from_string */ /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %154 = greater_equal(%120, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %155 = less_equal(%120, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %156 = cast(%v18_weight, dtype="float32") /* from_string */ /* ty=Tensor[(10, 112, 1, 1), float32] */;
  %157 = nn.conv2d_transpose(%140, %156, channels=112, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %158 = abs(%157) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %159 = max(%158, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %160 = divide(%159, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %161 = divide(%157, %160) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %162 = cast(%161, dtype="int8") /* from_string */ /* ty=Tensor[(1, 112, 1, 1), int8] */;
  %163 = cast(%162, dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %164 = multiply(%163, 0.0625f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 112, 1, 1), float32] */;
  %165 = ones(shape=[1, 112, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %166 = multiply(%154, %155) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), bool] */;
  %167 = multiply(%164, %165) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %168 = zeros(shape=[1, 112, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %169 = where(%166, %167, %168) /* from_string */ /* ty=Tensor[(1, 112, 4, 4), float32] */;
  %170 = cast(%169, dtype="int32") /* from_string */ /* ty=Tensor[(1, 112, 4, 4), int32] */;
  %171 = greater_equal(%118, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %172 = less_equal(%118, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %173 = cast(%v17_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(112, 336, 1, 1), float32] */;
  %174 = nn.conv2d_transpose(%169, %173, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %175 = abs(%174) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %176 = max(%175, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %177 = divide(%176, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), float32] */;
  %178 = divide(%174, %177) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), float32] */;
  %179 = multiply(%171, %172) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %180 = cast(%178, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %181 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %182 = where(%179, %180, %181) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %183 = cast(%182, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %184 = greater_equal(%116, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %185 = less_equal(%116, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %186 = nn.conv2d_transpose(%182, %v17_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %187 = abs(%186) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %188 = max(%187, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %189 = divide(%188, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %190 = divide(%186, %189) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %191 = multiply(%184, %185) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %192 = cast(%190, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %193 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %194 = where(%191, %192, %193) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %195 = cast(%194, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %196 = tile(%194, reps=[1, 56, 1, 1]) /* from_string */ /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %197 = reshape(%115, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %198 = reshape(%196, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %199 = nn.conv2d(%197, %198, padding=[0, 0, 0, 0], groups=56, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %200 = reshape(%199, newshape=[1, 56, 336, 1, 1]) /* from_string */ /* ty=Tensor[(1, 56, 336, 1, 1), int32] */;
  %201 = sum(%200, axis=[0]) /* from_string */ /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %202 = transpose(%201, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %203 = abs(%202) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %204 = max(%203, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %205 = divide(%204, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %206 = divide(%202, %205) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %207 = greater_equal(%112, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %208 = less_equal(%112, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %209 = greater_equal(%114, meta[relay.Constant][0] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %210 = less_equal(%114, meta[relay.Constant][1] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %211 = nn.conv2d_transpose(%194, %v17_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %212 = abs(%211) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %213 = max(%212, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %214 = divide(%213, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %215 = divide(%211, %214) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %216 = multiply(%209, %210) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %217 = cast(%215, dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %218 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %219 = where(%216, %217, %218) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %220 = cast(%219, dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %221 = reshape(%v16_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %222 = divide(%220, %221) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %223 = reshape(%v16_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %224 = multiply(%222, %223) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %225 = multiply(%207, %208) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %226 = cast(%224, dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %227 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %228 = where(%225, %226, %227) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %229 = cast(%228, dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %230 = greater_equal(%110, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %231 = less_equal(%110, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %232 = nn.conv2d_transpose(%228, %v16_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %233 = abs(%232) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %234 = max(%233, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %235 = divide(%234, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %236 = divide(%232, %235) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %237 = multiply(%230, %231) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %238 = cast(%236, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %239 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %240 = where(%237, %238, %239) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %241 = cast(%240, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %242 = greater_equal(%108, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %243 = less_equal(%108, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %244 = nn.conv2d_transpose(%240, %v16_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %245 = abs(%244) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %246 = max(%245, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %247 = divide(%246, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %248 = divide(%244, %247) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %249 = multiply(%242, %243) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %250 = cast(%248, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %251 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %252 = where(%249, %250, %251) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %253 = cast(%252, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %254 = tile(%252, reps=[1, 56, 1, 1]) /* from_string */ /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %255 = reshape(%107, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %256 = reshape(%254, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %257 = nn.conv2d(%255, %256, padding=[0, 0, 0, 0], groups=56, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %258 = reshape(%257, newshape=[1, 56, 336, 1, 1]) /* from_string */ /* ty=Tensor[(1, 56, 336, 1, 1), int32] */;
  %259 = sum(%258, axis=[0]) /* from_string */ /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %260 = transpose(%259, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %261 = abs(%260) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %262 = max(%261, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %263 = divide(%262, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %264 = divide(%260, %263) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %265 = greater_equal(%104, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %266 = less_equal(%104, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %267 = greater_equal(%106, meta[relay.Constant][2] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %268 = less_equal(%106, meta[relay.Constant][3] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %269 = nn.conv2d_transpose(%252, %v16_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %270 = abs(%269) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %271 = max(%270, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %272 = divide(%271, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %273 = divide(%269, %272) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %274 = multiply(%267, %268) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %275 = cast(%273, dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %276 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %277 = where(%274, %275, %276) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %278 = cast(%277, dtype="float32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %279 = reshape(%v15_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %280 = divide(%278, %279) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %281 = reshape(%v15_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %282 = multiply(%280, %281) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), float32] */;
  %283 = multiply(%265, %266) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %284 = cast(%282, dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %285 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %286 = where(%283, %284, %285) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %287 = cast(%286, dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %288 = greater_equal(%102, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %289 = less_equal(%102, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %290 = nn.conv2d_transpose(%286, %v15_conv_2_weight, channels=336, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %291 = abs(%290) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %292 = max(%291, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %293 = divide(%292, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %294 = divide(%290, %293) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %295 = multiply(%288, %289) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %296 = cast(%294, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %297 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %298 = where(%295, %296, %297) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %299 = cast(%298, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %300 = greater_equal(%100, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %301 = less_equal(%100, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %302 = nn.conv2d_transpose(%298, %v15_conv_1_weight, channels=336, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=336, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %303 = abs(%302) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %304 = max(%303, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %305 = divide(%304, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %306 = divide(%302, %305) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %307 = multiply(%300, %301) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), bool] */;
  %308 = cast(%306, dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %309 = zeros(shape=[1, 336, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %310 = where(%307, %308, %309) /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int8] */;
  %311 = cast(%310, dtype="int32") /* from_string */ /* ty=Tensor[(1, 336, 4, 4), int32] */;
  %312 = tile(%310, reps=[1, 56, 1, 1]) /* from_string */ /* ty=Tensor[(1, 18816, 4, 4), int8] */;
  %313 = reshape(%99, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %314 = reshape(%312, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(18816, 1, 4, 4), int8] */;
  %315 = nn.conv2d(%313, %314, padding=[0, 0, 0, 0], groups=56, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 18816, 1, 1), int32] */;
  %316 = reshape(%315, newshape=[1, 56, 336, 1, 1]) /* from_string */ /* ty=Tensor[(1, 56, 336, 1, 1), int32] */;
  %317 = sum(%316, axis=[0]) /* from_string */ /* ty=Tensor[(56, 336, 1, 1), int32] */;
  %318 = transpose(%317, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %319 = abs(%318) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %320 = max(%319, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %321 = divide(%320, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(336, 1, 1, 1), int32] */;
  %322 = divide(%318, %321) /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int32] */;
  %323 = greater_equal(%98, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %324 = less_equal(%98, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %325 = nn.conv2d_transpose(%310, %v15_conv_0_weight, channels=56, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %326 = abs(%325) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %327 = max(%326, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %328 = divide(%327, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %329 = divide(%325, %328) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %330 = multiply(%323, %324) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), bool] */;
  %331 = cast(%329, dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %332 = zeros(shape=[1, 56, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %333 = where(%330, %331, %332) /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int8] */;
  %334 = cast(%333, dtype="int32") /* from_string */ /* ty=Tensor[(1, 56, 4, 4), int32] */;
  %335 = greater_equal(%96, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %336 = less_equal(%96, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %337 = nn.conv2d_transpose(%333, %v14_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %338 = abs(%337) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %339 = max(%338, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %340 = divide(%339, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 4, 4), int32] */;
  %341 = divide(%337, %340) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %342 = multiply(%335, %336) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), bool] */;
  %343 = cast(%341, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %344 = zeros(shape=[1, 192, 4, 4], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %345 = where(%342, %343, %344) /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int8] */;
  %346 = cast(%345, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 4, 4), int32] */;
  %347 = greater_equal(%94, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %348 = less_equal(%94, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %349 = nn.conv2d_transpose(%345, %v14_conv_1_weight, channels=192, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %350 = abs(%349) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %351 = max(%350, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %352 = divide(%351, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %353 = divide(%349, %352) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %354 = multiply(%347, %348) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %355 = cast(%353, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %356 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %357 = where(%354, %355, %356) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %358 = cast(%357, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %359 = tile(%357, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %360 = reshape(%93, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %361 = reshape(%359, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %362 = nn.conv2d(%360, %361, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %363 = reshape(%362, newshape=[1, 32, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %364 = sum(%363, axis=[0]) /* from_string */ /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %365 = transpose(%364, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %366 = abs(%365) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %367 = max(%366, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %368 = divide(%367, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %369 = divide(%365, %368) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %370 = greater_equal(%90, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %371 = less_equal(%90, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %372 = greater_equal(%92, meta[relay.Constant][4] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %373 = less_equal(%92, meta[relay.Constant][5] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %374 = nn.conv2d_transpose(%357, %v14_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %375 = abs(%374) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %376 = max(%375, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %377 = divide(%376, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %378 = divide(%374, %377) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %379 = multiply(%372, %373) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %380 = cast(%378, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %381 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %382 = where(%379, %380, %381) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %383 = cast(%382, dtype="float32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %384 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %385 = divide(%383, %384) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %386 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %387 = multiply(%385, %386) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %388 = multiply(%370, %371) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %389 = cast(%387, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %390 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %391 = where(%388, %389, %390) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %392 = cast(%391, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %393 = greater_equal(%88, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %394 = less_equal(%88, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %395 = nn.conv2d_transpose(%391, %v13_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %396 = abs(%395) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %397 = max(%396, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %398 = divide(%397, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %399 = divide(%395, %398) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %400 = multiply(%393, %394) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %401 = cast(%399, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %402 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %403 = where(%400, %401, %402) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %404 = cast(%403, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %405 = greater_equal(%86, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %406 = less_equal(%86, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %407 = nn.conv2d_transpose(%403, %v13_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %408 = abs(%407) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %409 = max(%408, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %410 = divide(%409, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %411 = divide(%407, %410) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %412 = multiply(%405, %406) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %413 = cast(%411, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %414 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %415 = where(%412, %413, %414) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %416 = cast(%415, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %417 = tile(%415, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %418 = reshape(%85, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %419 = reshape(%417, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %420 = nn.conv2d(%418, %419, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %421 = reshape(%420, newshape=[1, 32, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %422 = sum(%421, axis=[0]) /* from_string */ /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %423 = transpose(%422, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %424 = abs(%423) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %425 = max(%424, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %426 = divide(%425, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %427 = divide(%423, %426) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %428 = greater_equal(%82, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %429 = less_equal(%82, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %430 = greater_equal(%84, meta[relay.Constant][6] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %431 = less_equal(%84, meta[relay.Constant][7] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %432 = nn.conv2d_transpose(%415, %v13_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %433 = abs(%432) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %434 = max(%433, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %435 = divide(%434, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %436 = divide(%432, %435) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %437 = multiply(%430, %431) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %438 = cast(%436, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %439 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %440 = where(%437, %438, %439) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %441 = cast(%440, dtype="float32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %442 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %443 = divide(%441, %442) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %444 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %445 = multiply(%443, %444) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), float32] */;
  %446 = multiply(%428, %429) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %447 = cast(%445, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %448 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %449 = where(%446, %447, %448) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %450 = cast(%449, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %451 = greater_equal(%80, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %452 = less_equal(%80, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %453 = nn.conv2d_transpose(%449, %v12_conv_2_weight, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %454 = abs(%453) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %455 = max(%454, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %456 = divide(%455, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %457 = divide(%453, %456) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %458 = multiply(%451, %452) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %459 = cast(%457, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %460 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %461 = where(%458, %459, %460) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %462 = cast(%461, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %463 = greater_equal(%78, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %464 = less_equal(%78, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %465 = nn.conv2d_transpose(%461, %v12_conv_1_weight, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %466 = abs(%465) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %467 = max(%466, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %468 = divide(%467, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %469 = divide(%465, %468) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %470 = multiply(%463, %464) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %471 = cast(%469, dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %472 = zeros(shape=[1, 192, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %473 = where(%470, %471, %472) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %474 = cast(%473, dtype="int32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %475 = tile(%473, reps=[1, 32, 1, 1]) /* from_string */ /* ty=Tensor[(1, 6144, 8, 8), int8] */;
  %476 = reshape(%77, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %477 = reshape(%475, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(6144, 1, 8, 8), int8] */;
  %478 = nn.conv2d(%476, %477, padding=[0, 0, 0, 0], groups=32, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 6144, 1, 1), int32] */;
  %479 = reshape(%478, newshape=[1, 32, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 192, 1, 1), int32] */;
  %480 = sum(%479, axis=[0]) /* from_string */ /* ty=Tensor[(32, 192, 1, 1), int32] */;
  %481 = transpose(%480, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %482 = abs(%481) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %483 = max(%482, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %484 = divide(%483, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(192, 1, 1, 1), int32] */;
  %485 = divide(%481, %484) /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int32] */;
  %486 = greater_equal(%76, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %487 = less_equal(%76, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %488 = nn.conv2d_transpose(%473, %v12_conv_0_weight, channels=32, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %489 = abs(%488) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %490 = max(%489, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %491 = divide(%490, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %492 = divide(%488, %491) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %493 = multiply(%486, %487) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), bool] */;
  %494 = cast(%492, dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %495 = zeros(shape=[1, 32, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %496 = where(%493, %494, %495) /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int8] */;
  %497 = cast(%496, dtype="int32") /* from_string */ /* ty=Tensor[(1, 32, 8, 8), int32] */;
  %498 = greater_equal(%74, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %499 = less_equal(%74, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %500 = nn.conv2d_transpose(%496, %v11_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %501 = abs(%500) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %502 = max(%501, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %503 = divide(%502, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %504 = divide(%500, %503) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %505 = multiply(%498, %499) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %506 = cast(%504, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %507 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %508 = where(%505, %506, %507) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %509 = cast(%508, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %510 = greater_equal(%72, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %511 = less_equal(%72, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %512 = nn.conv2d_transpose(%508, %v11_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %513 = abs(%512) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %514 = max(%513, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %515 = divide(%514, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %516 = divide(%512, %515) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %517 = multiply(%510, %511) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %518 = cast(%516, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %519 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %520 = where(%517, %518, %519) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %521 = cast(%520, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %522 = tile(%520, reps=[1, 24, 1, 1]) /* from_string */ /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %523 = reshape(%71, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %524 = reshape(%522, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %525 = nn.conv2d(%523, %524, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %526 = reshape(%525, newshape=[1, 24, 144, 1, 1]) /* from_string */ /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %527 = sum(%526, axis=[0]) /* from_string */ /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %528 = transpose(%527, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %529 = abs(%528) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %530 = max(%529, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %531 = divide(%530, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %532 = divide(%528, %531) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %533 = greater_equal(%68, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %534 = less_equal(%68, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %535 = greater_equal(%70, meta[relay.Constant][8] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %536 = less_equal(%70, meta[relay.Constant][9] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %537 = nn.conv2d_transpose(%520, %v11_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %538 = abs(%537) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %539 = max(%538, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %540 = divide(%539, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %541 = divide(%537, %540) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %542 = multiply(%535, %536) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %543 = cast(%541, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %544 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %545 = where(%542, %543, %544) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %546 = cast(%545, dtype="float32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %547 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %548 = divide(%546, %547) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %549 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %550 = multiply(%548, %549) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %551 = multiply(%533, %534) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %552 = cast(%550, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %553 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %554 = where(%551, %552, %553) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %555 = cast(%554, dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %556 = greater_equal(%66, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %557 = less_equal(%66, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %558 = nn.conv2d_transpose(%554, %v10_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %559 = abs(%558) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %560 = max(%559, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %561 = divide(%560, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %562 = divide(%558, %561) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %563 = multiply(%556, %557) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %564 = cast(%562, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %565 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %566 = where(%563, %564, %565) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %567 = cast(%566, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %568 = greater_equal(%64, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %569 = less_equal(%64, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %570 = nn.conv2d_transpose(%566, %v10_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %571 = abs(%570) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %572 = max(%571, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %573 = divide(%572, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %574 = divide(%570, %573) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %575 = multiply(%568, %569) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %576 = cast(%574, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %577 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %578 = where(%575, %576, %577) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %579 = cast(%578, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %580 = tile(%578, reps=[1, 24, 1, 1]) /* from_string */ /* ty=Tensor[(1, 3456, 8, 8), int8] */;
  %581 = reshape(%63, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %582 = reshape(%580, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(3456, 1, 8, 8), int8] */;
  %583 = nn.conv2d(%581, %582, padding=[0, 0, 0, 0], groups=24, out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 3456, 1, 1), int32] */;
  %584 = reshape(%583, newshape=[1, 24, 144, 1, 1]) /* from_string */ /* ty=Tensor[(1, 24, 144, 1, 1), int32] */;
  %585 = sum(%584, axis=[0]) /* from_string */ /* ty=Tensor[(24, 144, 1, 1), int32] */;
  %586 = transpose(%585, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %587 = abs(%586) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %588 = max(%587, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %589 = divide(%588, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(144, 1, 1, 1), int32] */;
  %590 = divide(%586, %589) /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int32] */;
  %591 = greater_equal(%60, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %592 = less_equal(%60, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %593 = greater_equal(%62, meta[relay.Constant][10] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %594 = less_equal(%62, meta[relay.Constant][11] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %595 = nn.conv2d_transpose(%578, %v10_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %596 = abs(%595) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %597 = max(%596, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %598 = divide(%597, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %599 = divide(%595, %598) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %600 = multiply(%593, %594) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %601 = cast(%599, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %602 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %603 = where(%600, %601, %602) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %604 = cast(%603, dtype="float32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %605 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %606 = divide(%604, %605) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %607 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %608 = multiply(%606, %607) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %609 = multiply(%591, %592) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %610 = cast(%608, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %611 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %612 = where(%609, %610, %611) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %613 = cast(%612, dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %614 = greater_equal(%58, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %615 = less_equal(%58, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %616 = nn.conv2d_transpose(%612, %v9_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %617 = abs(%616) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %618 = max(%617, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %619 = divide(%618, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %620 = divide(%616, %619) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %621 = multiply(%614, %615) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %622 = cast(%620, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %623 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %624 = where(%621, %622, %623) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %625 = cast(%624, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %626 = greater_equal(%56, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %627 = less_equal(%56, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %628 = nn.conv2d_transpose(%624, %v9_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %629 = abs(%628) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %630 = max(%629, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %631 = divide(%630, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %632 = divide(%628, %631) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %633 = multiply(%626, %627) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %634 = cast(%632, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %635 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %636 = where(%633, %634, %635) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %637 = cast(%636, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %638 = greater_equal(%52, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %639 = less_equal(%52, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %640 = greater_equal(%54, meta[relay.Constant][12] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %641 = less_equal(%54, meta[relay.Constant][13] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %642 = nn.conv2d_transpose(%636, %v9_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %643 = abs(%642) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %644 = max(%643, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %645 = divide(%644, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %646 = divide(%642, %645) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %647 = multiply(%640, %641) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %648 = cast(%646, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %649 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %650 = where(%647, %648, %649) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %651 = cast(%650, dtype="float32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %652 = reshape(%v8_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %653 = divide(%651, %652) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %654 = reshape(%v8_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %655 = multiply(%653, %654) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %656 = multiply(%638, %639) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %657 = cast(%655, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %658 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %659 = where(%656, %657, %658) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %660 = cast(%659, dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %661 = greater_equal(%50, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %662 = less_equal(%50, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %663 = nn.conv2d_transpose(%659, %v8_conv_2_weight, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %664 = abs(%663) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %665 = max(%664, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %666 = divide(%665, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %667 = divide(%663, %666) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %668 = multiply(%661, %662) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %669 = cast(%667, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %670 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %671 = where(%668, %669, %670) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %672 = cast(%671, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %673 = greater_equal(%48, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %674 = less_equal(%48, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %675 = nn.conv2d_transpose(%671, %v8_conv_1_weight, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %676 = abs(%675) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %677 = max(%676, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %678 = divide(%677, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %679 = divide(%675, %678) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %680 = multiply(%673, %674) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %681 = cast(%679, dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %682 = zeros(shape=[1, 144, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %683 = where(%680, %681, %682) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %684 = cast(%683, dtype="int32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %685 = greater_equal(%46, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %686 = less_equal(%46, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %687 = nn.conv2d_transpose(%683, %v8_conv_0_weight, channels=24, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %688 = abs(%687) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %689 = max(%688, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %690 = divide(%689, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %691 = divide(%687, %690) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %692 = multiply(%685, %686) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), bool] */;
  %693 = cast(%691, dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %694 = zeros(shape=[1, 24, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %695 = where(%692, %693, %694) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int8] */;
  %696 = cast(%695, dtype="int32") /* from_string */ /* ty=Tensor[(1, 24, 8, 8), int32] */;
  %697 = greater_equal(%44, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %698 = less_equal(%44, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %699 = nn.conv2d_transpose(%695, %v7_conv_2_weight, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %700 = abs(%699) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %701 = max(%700, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %702 = divide(%701, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 8, 8), int32] */;
  %703 = divide(%699, %702) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %704 = multiply(%697, %698) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), bool] */;
  %705 = cast(%703, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %706 = zeros(shape=[1, 96, 8, 8], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %707 = where(%704, %705, %706) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int8] */;
  %708 = cast(%707, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 8, 8), int32] */;
  %709 = greater_equal(%42, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %710 = less_equal(%42, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %711 = nn.conv2d_transpose(%707, %v7_conv_1_weight, channels=96, kernel_size=[3, 3], strides=[2, 2], output_padding=[1, 1], padding=[1, 1, 1, 1], groups=96, kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %712 = abs(%711) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %713 = max(%712, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %714 = divide(%713, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %715 = divide(%711, %714) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %716 = multiply(%709, %710) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), bool] */;
  %717 = cast(%715, dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %718 = zeros(shape=[1, 96, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %719 = where(%716, %717, %718) /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int8] */;
  %720 = cast(%719, dtype="int32") /* from_string */ /* ty=Tensor[(1, 96, 16, 16), int32] */;
  %721 = greater_equal(%38, -128 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %722 = less_equal(%38, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %723 = greater_equal(%40, meta[relay.Constant][14] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %724 = less_equal(%40, meta[relay.Constant][15] /* ty=int8 */) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %725 = nn.conv2d_transpose(%719, %v7_conv_0_weight, channels=16, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="int32") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %726 = abs(%725) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %727 = max(%726, axis=[1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %728 = divide(%727, 127 /* ty=int32 */) /* from_string */ /* ty=Tensor[(1, 1, 16, 16), int32] */;
  %729 = divide(%725, %728) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %730 = multiply(%723, %724) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %731 = cast(%729, dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %732 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %733 = where(%730, %731, %732) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %734 = cast(%733, dtype="float32") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %735 = reshape(%v6_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %736 = divide(%734, %735) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %737 = reshape(%v6_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %738 = multiply(%736, %737) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %739 = multiply(%721, %722) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), bool] */;
  %740 = cast(%738, dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %741 = zeros(shape=[1, 16, 16, 16], dtype="int8") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %742 = where(%739, %740, %741) /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %743 = cast(%742, dtype="int32") /* from_string */ /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %744 = nn.cross_entropy_with_logits(%127, %label) /* from_string */ /* ty=float32 */;
  %745 = sum(%141, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(10), int32] */;
  %746 = cast(%153, dtype="int8") /* from_string */ /* ty=Tensor[(10, 112, 1, 1), int8] */;
  %747 = sum(%170, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(112), int32] */;
  %748 = sum(%183, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %749 = sum(%195, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %750 = cast(%206, dtype="int8") /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int8] */;
  %751 = sum(%229, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(56), int32] */;
  %752 = sum(%241, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %753 = sum(%253, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %754 = cast(%264, dtype="int8") /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int8] */;
  %755 = sum(%287, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(56), int32] */;
  %756 = sum(%299, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %757 = sum(%311, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(336), int32] */;
  %758 = cast(%322, dtype="int8") /* from_string */ /* ty=Tensor[(336, 56, 1, 1), int8] */;
  %759 = sum(%334, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(56), int32] */;
  %760 = sum(%346, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %761 = sum(%358, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %762 = cast(%369, dtype="int8") /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %763 = sum(%392, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %764 = sum(%404, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %765 = sum(%416, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %766 = cast(%427, dtype="int8") /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %767 = sum(%450, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %768 = sum(%462, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %769 = sum(%474, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), int32] */;
  %770 = cast(%485, dtype="int8") /* from_string */ /* ty=Tensor[(192, 32, 1, 1), int8] */;
  %771 = sum(%497, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(32), int32] */;
  %772 = sum(%509, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %773 = sum(%521, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %774 = cast(%532, dtype="int8") /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %775 = sum(%555, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(24), int32] */;
  %776 = sum(%567, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %777 = sum(%579, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %778 = cast(%590, dtype="int8") /* from_string */ /* ty=Tensor[(144, 24, 1, 1), int8] */;
  %779 = sum(%613, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(24), int32] */;
  %780 = sum(%625, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %781 = sum(%637, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %782 = sum(%660, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(24), int32] */;
  %783 = sum(%672, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %784 = sum(%684, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), int32] */;
  %785 = sum(%696, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(24), int32] */;
  %786 = sum(%708, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %787 = sum(%720, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), int32] */;
  %788 = sum(%743, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(16), int32] */;
  (%744, %745, %746, %747, %748, %749, %750, %751, %752, %753, %754, %755, %756, %757, %758, %759, %760, %761, %762, %763, %764, %765, %766, %767, %768, %769, %770, %771, %772, %773, %774, %775, %776, %777, %778, %779, %780, %781, %782, %783, %784, %785, %786, %787, %788)
}
